{
  "version": 3,
  "sources": [
    "../../salvo/contract.py",
    "../../salvo/subroutines.py"
  ],
  "mappings": "AA8BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkYK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAxEA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxFA;;AAAA;AAAA;AAAA;;AAAA;AAlOL;;;AAAA;AAAA;;;AAkOK;;;AAAA;;AAhGA;;AAAA;AAAA;AAAA;;AAAA;AAlIL;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAkIK;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AA1GL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0GK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAvEL;;;AAAA;AAuEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAlEL;;;AAAA;AAAA;;AAkEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AAAA;AA6DK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;AAwDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnDL;;;AAAA;AAAA;;AAmDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AAAA;AAAA;;;AAAA;;;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAjCL;;;AAAA;AAAA;;;AAiCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAAA;;;AAcK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AC2JL;;;AAKW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;;AAAA;AAAA;AAAW;;AAAX;AAAP;AAGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;ADpKJ;;;AAOY;;AAAA;AAAkB;;AAAA;AAAlB;AADQ;;;AAAA;AAKL;;;AAAA;AAAP;AAQR;;;AAKe;;AAAiC;AAAjC;;AAAA;;;AAAP;AAGR;;;ACwHQ;;AAAA;AAAa;;AAAb;AAA6B;;AAAA;AAA7B;AAIG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;ADvHI;;AACM;AADN;;AAAA;;;AAAP;AAKR;;;AAEe;;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAGR;;;AAEwC;;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGR;;;AAEyC;;AAAA;AAA1B;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGR;;;AAEe;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAGR;;;;;AAGe;;AAAA;AAAW;;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGmB;AAAA;AAAA;AAAA;;AAAA;AAGF;;;;AAAA;AAGE;AAAH;AAAP;;AAAA;;AAAA;AAAjB;;;AAEY;;AAAA;;AAAkD;AAAhC;AAAlB;AAAA;;AAEsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAnB;;;;;AAAf;;;AAEgB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;;;AANC;;AAAmC;AAAnC;AAAA;;;;;AAST;;AAAA;;AAAA;AAYA;;AAAe;AAAf;;AAER;;;AAMe;;AAAqB;AAArB;AAAP;AACyB;;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAIO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAS6B;;AAAe;;AAAf;AAAZ;AAJoB;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAArC;;AAAuB;;AAAvB;AAAA;AAAA;;AAOR;;;AAWe;;AAAqB;;AAArB;AAAP;AAEO;;AAAA;;AAAoB;;;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;;;AAApB;AAAP;AAEO;;AAAA;;AAEuC;;AAAA;AAAA;AAAA;;AAAnB;AAAA;AAAA;AAAA;;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADF;;;AADc;AAAA;;;AAApB;AAAP;AAWO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGI;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAKI;;AAAc;;;AAAd;AAAA;;;AACI;;AAAc;;;AAAd;AADJ;;;AAEI;;AAAoB;AAApB;AAFJ;;;;AADJ;AAOmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAnB;AAAA;;AAAA;AAA0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA1D;AAS0B;;AAA0B;;;AAA1B;AAAZ;AACY;;AAAA;;AAAZ;AACiB;;AAPZ;AADiB;;AAAA;AAIjB;;;AAJiB;AAKhB;;;;AALgB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAApC;;AAAA;;AAAA;AAAA;AAAA;AAcoC;;AAAA;AAApC;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAKA;AAAwB;;AAAxB;AAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAtC;AAawB;AAAG;;AAA3B;AAGgB;AAAhB;AAAA;;AAAA;AAAA;;;;;;AAER;;;;;AAQe;;AAAA;AAAA;AAAW;;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AAIY;;AAAA;AAEK;AAAA;AAAA;AAAA;ACnBc;AAAf;AAGN;AAGE;AAAP;;AAAA;;AAAA;;;;;AAAb;;;ADY2B;;ACVY;;AAAA;AAAA;AAAA;AAA/B;;AAA2D;AAAvC;AAGjB;;AAAA;AAAX;;;AAC0B;;;;;ADGlB;AASI;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AADJ;AAKA;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACA;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;ACvBK;;AAA6B;AAA7B;AAAA;;;;;ADuFb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BmB;;AAAX;;AAgBS;AAAL;;AAAK;;AAAO;;AAAP;AAAjB;;;AACY;;ACrOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADqOC;AAAA;;AADK;;AAAA;AAAA;AAAA;;;;;AAkBT;;AAAS;;AAMT;;AAAA;AAIO;;AAAP;AACO;;AAAc;;AAAd;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@20",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x6333cd9d 0xb66d2f56 0x8996bb37 0x5381d6a8 0x7815fe41 0x0b42d12a 0xbbfa8e01 0xf85053ad 0x06f0d132 0x5be219f0 0x3ffbca24 0x81e90542 0xfd1cd76a 0xf7172148 0xa0e81872 // method \"calc_single_box_cost(uint8,uint16)uint64\", method \"read_gen_unix()uint64\", method \"read_grid_cell_value_by_index(uint64,uint8)uint8\", method \"read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8\", method \"does_box_user_registry_exist(account)bool\", method \"does_box_game_grid_exist(uint64)bool\", method \"does_box_game_state_exist(uint64)bool\", method \"does_box_game_character_exist(account)bool\", method \"read_box_game_lobby(uint64)address[]\", method \"generate()void\", method \"get_box_user_registry(pay)void\", method \"new_game(pay,pay,pay,pay,pay,uint8)void\", method \"commit_turn(uint64,uint256)void\", method \"mimc_tester()byte[]\", method \"update()void\"",
      "defined_out": [
        "Method(calc_single_box_cost(uint8,uint16)uint64)",
        "Method(commit_turn(uint64,uint256)void)",
        "Method(does_box_game_character_exist(account)bool)",
        "Method(does_box_game_grid_exist(uint64)bool)",
        "Method(does_box_game_state_exist(uint64)bool)",
        "Method(does_box_user_registry_exist(account)bool)",
        "Method(generate()void)",
        "Method(get_box_user_registry(pay)void)",
        "Method(mimc_tester()byte[])",
        "Method(new_game(pay,pay,pay,pay,pay,uint8)void)",
        "Method(read_box_game_lobby(uint64)address[])",
        "Method(read_gen_unix()uint64)",
        "Method(read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8)",
        "Method(read_grid_cell_value_by_index(uint64,uint8)uint8)",
        "Method(update()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_cost(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_grid_cell_value_by_index(uint64,uint8)uint8)",
        "Method(read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8)",
        "Method(does_box_user_registry_exist(account)bool)",
        "Method(does_box_game_grid_exist(uint64)bool)",
        "Method(does_box_game_state_exist(uint64)bool)",
        "Method(does_box_game_character_exist(account)bool)",
        "Method(read_box_game_lobby(uint64)address[])",
        "Method(generate()void)",
        "Method(get_box_user_registry(pay)void)",
        "Method(new_game(pay,pay,pay,pay,pay,uint8)void)",
        "Method(commit_turn(uint64,uint256)void)",
        "Method(mimc_tester()byte[])",
        "Method(update()void)"
      ]
    },
    "82": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_cost(uint8,uint16)uint64)",
        "Method(commit_turn(uint64,uint256)void)",
        "Method(does_box_game_character_exist(account)bool)",
        "Method(does_box_game_grid_exist(uint64)bool)",
        "Method(does_box_game_state_exist(uint64)bool)",
        "Method(does_box_user_registry_exist(account)bool)",
        "Method(generate()void)",
        "Method(get_box_user_registry(pay)void)",
        "Method(mimc_tester()byte[])",
        "Method(new_game(pay,pay,pay,pay,pay,uint8)void)",
        "Method(read_box_game_lobby(uint64)address[])",
        "Method(read_gen_unix()uint64)",
        "Method(read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8)",
        "Method(read_grid_cell_value_by_index(uint64,uint8)uint8)",
        "Method(update()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_cost(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_grid_cell_value_by_index(uint64,uint8)uint8)",
        "Method(read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8)",
        "Method(does_box_user_registry_exist(account)bool)",
        "Method(does_box_game_grid_exist(uint64)bool)",
        "Method(does_box_game_state_exist(uint64)bool)",
        "Method(does_box_game_character_exist(account)bool)",
        "Method(read_box_game_lobby(uint64)address[])",
        "Method(generate()void)",
        "Method(get_box_user_registry(pay)void)",
        "Method(new_game(pay,pay,pay,pay,pay,uint8)void)",
        "Method(commit_turn(uint64,uint256)void)",
        "Method(mimc_tester()byte[])",
        "Method(update()void)",
        "tmp%2#0"
      ]
    },
    "85": {
      "op": "match main_calc_single_box_cost_route@5 main_read_gen_unix_route@6 main_read_grid_cell_value_by_index_route@7 main_read_grid_cell_value_at_coords_route@8 main_does_box_user_registry_exist_route@9 main_does_box_game_grid_exist_route@10 main_does_box_game_state_exist_route@11 main_does_box_game_character_exist_route@12 main_read_box_game_lobby_route@13 main_generate_route@14 main_get_box_user_registry_route@15 main_new_game_route@16 main_commit_turn_route@17 main_mimc_tester_route@18 main_update_route@19",
      "stack_out": []
    },
    "117": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": []
    },
    "119": {
      "block": "main_update_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "121": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0",
        "UpdateApplication"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "callsub": "smart_contracts.salvo.contract.Salvo.update",
      "op": "callsub update"
    },
    "131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "block": "main_mimc_tester_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "135": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "136": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "137": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "139": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "140": {
      "callsub": "smart_contracts.salvo.contract.Salvo.mimc_tester",
      "op": "callsub mimc_tester",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "143": {
      "op": "dup",
      "defined_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "144": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length%0#0"
      ]
    },
    "145": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "as_bytes%0#0"
      ]
    },
    "146": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length_uint16%0#0"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%6#0"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "151": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "152": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "154": {
      "op": "log",
      "stack_out": []
    },
    "155": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "156": {
      "op": "return",
      "stack_out": []
    },
    "157": {
      "block": "main_commit_turn_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "159": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "160": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "161": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "163": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "164": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "167": {
      "op": "btoi",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "168": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "171": {
      "callsub": "smart_contracts.salvo.contract.Salvo.commit_turn",
      "op": "callsub commit_turn",
      "stack_out": []
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": []
    },
    "176": {
      "block": "main_new_game_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "183": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "185": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "5"
      ]
    },
    "187": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "188": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "189": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "191": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "192": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "193": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "194": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%74#0"
      ]
    },
    "196": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "gtxn_idx%1#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%74#0",
        "4"
      ]
    },
    "198": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "199": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "200": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "202": {
      "op": "intc_0 // pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "203": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "204": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "205": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%75#0"
      ]
    },
    "207": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%75#0",
        "3"
      ]
    },
    "209": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "210": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "211": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "213": {
      "op": "intc_0 // pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "215": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "216": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%76#0"
      ]
    },
    "218": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%76#0",
        "2"
      ]
    },
    "219": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ]
    },
    "220": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "221": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "223": {
      "op": "intc_0 // pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "224": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "225": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ]
    },
    "226": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "tmp%77#0"
      ]
    },
    "228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "tmp%77#0",
        "1"
      ]
    },
    "229": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0"
      ]
    },
    "230": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "231": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "233": {
      "op": "intc_0 // pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "234": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "235": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0"
      ]
    },
    "236": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "239": {
      "callsub": "smart_contracts.salvo.contract.Salvo.new_game",
      "op": "callsub new_game",
      "stack_out": []
    },
    "242": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "243": {
      "op": "return",
      "stack_out": []
    },
    "244": {
      "block": "main_get_box_user_registry_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "246": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "247": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "248": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "250": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "251": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "1"
      ]
    },
    "254": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "255": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "256": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "258": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "259": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "260": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "261": {
      "callsub": "smart_contracts.salvo.contract.Salvo.get_box_user_registry",
      "op": "callsub get_box_user_registry",
      "stack_out": []
    },
    "264": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "265": {
      "op": "return",
      "stack_out": []
    },
    "266": {
      "block": "main_generate_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "268": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "269": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "270": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "273": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "274": {
      "callsub": "smart_contracts.salvo.contract.Salvo.generate",
      "op": "callsub generate"
    },
    "277": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "block": "main_read_box_game_lobby_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "282": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "283": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "285": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "286": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "289": {
      "op": "btoi",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "290": {
      "callsub": "smart_contracts.salvo.contract.Salvo.read_box_game_lobby",
      "op": "callsub read_box_game_lobby",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "293": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "0x151f7c75"
      ]
    },
    "294": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%58#0"
      ]
    },
    "295": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "296": {
      "op": "log",
      "stack_out": []
    },
    "297": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "298": {
      "op": "return",
      "stack_out": []
    },
    "299": {
      "block": "main_does_box_game_character_exist_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "301": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "302": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "303": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "305": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "306": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "309": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "310": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "312": {
      "callsub": "smart_contracts.salvo.contract.Salvo.does_box_game_character_exist",
      "op": "callsub does_box_game_character_exist",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "315": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "316": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "317": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "319": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "320": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "323": {
      "op": "log",
      "stack_out": []
    },
    "324": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_does_box_game_state_exist_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "336": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "337": {
      "callsub": "smart_contracts.salvo.contract.Salvo.does_box_game_state_exist",
      "op": "callsub does_box_game_state_exist",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "340": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "341": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "342": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "344": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "345": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "347": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "348": {
      "op": "log",
      "stack_out": []
    },
    "349": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "350": {
      "op": "return",
      "stack_out": []
    },
    "351": {
      "block": "main_does_box_game_grid_exist_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "353": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "354": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "355": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "357": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "358": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "361": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "362": {
      "callsub": "smart_contracts.salvo.contract.Salvo.does_box_game_grid_exist",
      "op": "callsub does_box_game_grid_exist",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "365": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "366": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "367": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "369": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "370": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "371": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "373": {
      "op": "log",
      "stack_out": []
    },
    "374": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "375": {
      "op": "return",
      "stack_out": []
    },
    "376": {
      "block": "main_does_box_user_registry_exist_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "378": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "379": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "380": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "382": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "383": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "386": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "387": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "389": {
      "callsub": "smart_contracts.salvo.contract.Salvo.does_box_user_registry_exist",
      "op": "callsub does_box_user_registry_exist",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "392": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "393": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "394": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "396": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "397": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "400": {
      "op": "log",
      "stack_out": []
    },
    "401": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "block": "main_read_grid_cell_value_at_coords_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "405": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "406": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "407": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "409": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "410": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "413": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "414": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "417": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "420": {
      "callsub": "smart_contracts.salvo.contract.Salvo.read_grid_cell_value_at_coords",
      "op": "callsub read_grid_cell_value_at_coords",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "423": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "424": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "425": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "426": {
      "op": "log",
      "stack_out": []
    },
    "427": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "428": {
      "op": "return",
      "stack_out": []
    },
    "429": {
      "block": "main_read_grid_cell_value_by_index_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "431": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "432": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "435": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "436": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "439": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "440": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "443": {
      "callsub": "smart_contracts.salvo.contract.Salvo.read_grid_cell_value_by_index",
      "op": "callsub read_grid_cell_value_by_index",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "446": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "447": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "449": {
      "op": "log",
      "stack_out": []
    },
    "450": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "451": {
      "op": "return",
      "stack_out": []
    },
    "452": {
      "block": "main_read_gen_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "454": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "455": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "456": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "458": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "459": {
      "op": "intc 4 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "461": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "462": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "463": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "464": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "465": {
      "op": "log",
      "stack_out": []
    },
    "466": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "467": {
      "op": "return",
      "stack_out": []
    },
    "468": {
      "block": "main_calc_single_box_cost_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "470": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "471": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "472": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "474": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "475": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "478": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "481": {
      "callsub": "smart_contracts.salvo.contract.Salvo.calc_single_box_cost",
      "op": "callsub calc_single_box_cost",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "484": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "485": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "486": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "487": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "488": {
      "op": "log",
      "stack_out": []
    },
    "489": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "490": {
      "op": "return",
      "stack_out": []
    },
    "491": {
      "subroutine": "smart_contracts.salvo.subroutines.get_grid_cell_value",
      "params": {
        "game_id#0": "uint64",
        "box_game_grid#0": "bytes",
        "i#0": "bytes"
      },
      "block": "get_grid_cell_value",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "494": {
      "op": "frame_dig -3",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "496": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "497": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_game_grid#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_game_grid#0 (copy)"
      ]
    },
    "499": {
      "op": "swap",
      "stack_out": [
        "box_game_grid#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "500": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "501": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "502": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "503": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "505": {
      "error": "Game ID not found. Ensure the game was created and still exists.",
      "op": "assert // Game ID not found. Ensure the game was created and still exists.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "506": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "i#0 (copy)"
      ]
    },
    "508": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "510": {
      "op": "pushint 121 // 121",
      "defined_out": [
        "121",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "121"
      ]
    },
    "512": {
      "op": "<",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "513": {
      "error": "Invalid position index. Ensure index value is within valid range.",
      "op": "assert // Invalid position index. Ensure index value is within valid range.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "515": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "516": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "517": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "518": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "1"
      ]
    },
    "519": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "520": {
      "retsub": true,
      "op": "retsub"
    },
    "521": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.calc_single_box_cost",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_cost",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "524": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "526": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "527": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "529": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "530": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "531": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "534": {
      "op": "*",
      "defined_out": [
        "size_cost#0"
      ],
      "stack_out": [
        "size_cost#0"
      ]
    },
    "535": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_cost#0"
      ],
      "stack_out": [
        "size_cost#0",
        "2500"
      ]
    },
    "538": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "539": {
      "retsub": true,
      "op": "retsub"
    },
    "540": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.read_grid_cell_value_by_index",
      "params": {
        "game_id#0": "uint64",
        "i#0": "bytes"
      },
      "block": "read_grid_cell_value_by_index",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "543": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "545": {
      "op": "bytec_3 // \"g_\"",
      "defined_out": [
        "\"g_\"",
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)",
        "\"g_\""
      ]
    },
    "546": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"g_\"",
        "game_id#0 (copy)",
        "i#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)",
        "\"g_\"",
        "i#0 (copy)"
      ]
    },
    "548": {
      "callsub": "smart_contracts.salvo.subroutines.get_grid_cell_value",
      "op": "callsub get_grid_cell_value",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "551": {
      "retsub": true,
      "op": "retsub"
    },
    "552": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.read_grid_cell_value_at_coords",
      "params": {
        "game_id#0": "uint64",
        "x#0": "bytes",
        "y#0": "bytes"
      },
      "block": "read_grid_cell_value_at_coords",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "555": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "558": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "11"
      ]
    },
    "560": {
      "op": "*",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "561": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#1",
        "y#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#1",
        "y#0 (copy)"
      ]
    },
    "563": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#0"
      ]
    },
    "564": {
      "op": "+",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "565": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "566": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "567": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "568": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "570": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "571": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "572": {
      "op": "extract 7 1",
      "defined_out": [
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0"
      ]
    },
    "575": {
      "op": "frame_dig -3",
      "defined_out": [
        "game_id#0 (copy)",
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0",
        "game_id#0 (copy)"
      ]
    },
    "577": {
      "op": "bytec_3 // \"g_\"",
      "defined_out": [
        "\"g_\"",
        "game_id#0 (copy)",
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0",
        "game_id#0 (copy)",
        "\"g_\""
      ]
    },
    "578": {
      "op": "uncover 2",
      "stack_out": [
        "game_id#0 (copy)",
        "\"g_\"",
        "uint8%0#0"
      ]
    },
    "580": {
      "callsub": "smart_contracts.salvo.subroutines.get_grid_cell_value",
      "op": "callsub get_grid_cell_value",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "583": {
      "retsub": true,
      "op": "retsub"
    },
    "584": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.does_box_user_registry_exist",
      "params": {
        "account#0": "bytes"
      },
      "block": "does_box_user_registry_exist",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "587": {
      "op": "bytec 4 // \"r_\"",
      "defined_out": [
        "\"r_\""
      ],
      "stack_out": [
        "\"r_\""
      ]
    },
    "589": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"r_\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"r_\"",
        "account#0 (copy)"
      ]
    },
    "591": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "592": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "593": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "595": {
      "retsub": true,
      "op": "retsub"
    },
    "596": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.does_box_game_grid_exist",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "does_box_game_grid_exist",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "599": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "601": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "602": {
      "op": "bytec_3 // \"g_\"",
      "defined_out": [
        "\"g_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"g_\""
      ]
    },
    "603": {
      "op": "swap",
      "stack_out": [
        "\"g_\"",
        "encoded_value%0#0"
      ]
    },
    "604": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "605": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "606": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "608": {
      "retsub": true,
      "op": "retsub"
    },
    "609": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.does_box_game_state_exist",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "does_box_game_state_exist",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "612": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "614": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "615": {
      "op": "bytec 5 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "618": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "619": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "620": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "622": {
      "retsub": true,
      "op": "retsub"
    },
    "623": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.does_box_game_character_exist",
      "params": {
        "account#0": "bytes"
      },
      "block": "does_box_game_character_exist",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "626": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\""
      ],
      "stack_out": [
        "\"c_\""
      ]
    },
    "627": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c_\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"c_\"",
        "account#0 (copy)"
      ]
    },
    "629": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "630": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "631": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "633": {
      "retsub": true,
      "op": "retsub"
    },
    "634": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.read_box_game_lobby",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_box_game_lobby",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "637": {
      "op": "intc_1 // 0",
      "stack_out": [
        "user_addr_bytes#0"
      ]
    },
    "638": {
      "op": "dup",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9"
      ]
    },
    "639": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_id#0 (copy)"
      ]
    },
    "641": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "encoded_value%0#0"
      ]
    },
    "642": {
      "op": "bytec 6 // \"l_\"",
      "defined_out": [
        "\"l_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "encoded_value%0#0",
        "\"l_\""
      ]
    },
    "644": {
      "op": "swap",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "\"l_\"",
        "encoded_value%0#0"
      ]
    },
    "645": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "box_prefixed_key%0#0"
      ]
    },
    "646": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "647": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "648": {
      "op": "bury 1",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "650": {
      "error": "Game ID not found. Ensure the game was created and still exists.",
      "op": "assert // Game ID not found. Ensure the game was created and still exists.",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "box_prefixed_key%0#0"
      ]
    },
    "651": {
      "op": "box_get",
      "defined_out": [
        "game_lobby_b_arr#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "maybe_exists%1#0"
      ]
    },
    "652": {
      "op": "swap",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "maybe_exists%1#0",
        "game_lobby_b_arr#0"
      ]
    },
    "653": {
      "op": "dup",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "maybe_exists%1#0",
        "game_lobby_b_arr#0",
        "game_lobby_b_arr#0 (copy)"
      ]
    },
    "654": {
      "op": "uncover 2",
      "defined_out": [
        "game_lobby_b_arr#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "game_lobby_b_arr#0",
        "maybe_exists%1#0"
      ]
    },
    "656": {
      "error": "check self.box_game_lobby entry exists",
      "op": "assert // check self.box_game_lobby entry exists",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "game_lobby_b_arr#0"
      ]
    },
    "657": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "game_lobby_b_arr#0",
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "game_lobby_b_arr#0",
        "users_in_lobby#0"
      ]
    },
    "661": {
      "op": "swap",
      "defined_out": [
        "game_lobby_b_arr#0",
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "game_lobby_b_arr#0"
      ]
    },
    "662": {
      "op": "len",
      "defined_out": [
        "game_lobby_b_arr#0",
        "tmp%0#0",
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "intc_1 // 0",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "664": {
      "block": "read_box_game_lobby_for_header@1",
      "stack_in": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "666": {
      "op": "frame_dig 4",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "668": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "669": {
      "op": "bz read_box_game_lobby_after_for@6",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "672": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "game_lobby_b_arr#0"
      ]
    },
    "674": {
      "op": "frame_dig 5",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "game_lobby_b_arr#0",
        "i#0"
      ]
    },
    "676": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "game_lobby_b_arr#0",
        "i#0",
        "32"
      ]
    },
    "677": {
      "op": "extract3",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "user_addr_bytes#0"
      ]
    },
    "678": {
      "op": "dup",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "user_addr_bytes#0",
        "user_addr_bytes#0"
      ]
    },
    "679": {
      "op": "frame_bury 0",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "user_addr_bytes#0"
      ]
    },
    "681": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "user_addr_bytes#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "715": {
      "op": "!=",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "tmp%1#0",
        "user_addr_bytes#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "716": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "tmp%1#0",
        "user_addr_bytes#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "users_in_lobby#9"
      ]
    },
    "718": {
      "op": "frame_bury 1",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "tmp%1#0",
        "user_addr_bytes#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "720": {
      "op": "bz read_box_game_lobby_after_if_else@4",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "723": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "users_in_lobby#0"
      ]
    },
    "725": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "728": {
      "op": "frame_dig 0",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "user_addr_bytes#0"
      ]
    },
    "730": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "731": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "732": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "733": {
      "op": "intc_2 // 32",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "32"
      ]
    },
    "734": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "game_lobby_b_arr#0",
        "i#0",
        "len_%0#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "735": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "game_lobby_b_arr#0",
        "i#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "736": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "game_lobby_b_arr#0",
        "i#0",
        "len_16_bit%0#0",
        "tmp%0#0",
        "user_addr_bytes#0",
        "users_in_lobby#0",
        "users_in_lobby#9"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "739": {
      "op": "swap",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "740": {
      "op": "concat",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "users_in_lobby#9"
      ]
    },
    "741": {
      "op": "frame_bury 1",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "743": {
      "block": "read_box_game_lobby_after_if_else@4",
      "stack_in": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "users_in_lobby#0"
      ]
    },
    "745": {
      "op": "frame_bury 3",
      "defined_out": [
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "747": {
      "op": "frame_dig 5",
      "defined_out": [
        "i#0",
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "749": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "i#0",
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "750": {
      "op": "+",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "751": {
      "op": "frame_bury 5",
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "753": {
      "op": "b read_box_game_lobby_for_header@1"
    },
    "756": {
      "block": "read_box_game_lobby_after_for@6",
      "stack_in": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "users_in_lobby#0"
      ],
      "stack_out": [
        "user_addr_bytes#0",
        "users_in_lobby#9",
        "game_lobby_b_arr#0",
        "users_in_lobby#0",
        "tmp%0#0",
        "i#0",
        "users_in_lobby#0"
      ]
    },
    "758": {
      "op": "frame_bury 0"
    },
    "760": {
      "retsub": true,
      "op": "retsub"
    },
    "761": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "bytec 7 // \"game_id\"",
      "defined_out": [
        "\"game_id\""
      ],
      "stack_out": [
        "\"game_id\""
      ]
    },
    "763": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"game_id\"",
        "1"
      ],
      "stack_out": [
        "\"game_id\"",
        "1"
      ]
    },
    "764": {
      "op": "app_global_put",
      "stack_out": []
    },
    "765": {
      "retsub": true,
      "op": "retsub"
    },
    "766": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.get_box_user_registry",
      "params": {
        "box_r_pay#0": "uint64"
      },
      "block": "get_box_user_registry",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "769": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "771": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "772": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "773": {
      "error": "Invalid group size. Ensure number of transactions in group is within valid bounds.",
      "op": "assert // Invalid group size. Ensure number of transactions in group is within valid bounds.",
      "stack_out": []
    },
    "774": {
      "op": "bytec 4 // \"r_\"",
      "defined_out": [
        "\"r_\""
      ],
      "stack_out": [
        "\"r_\""
      ]
    },
    "776": {
      "op": "txn Sender",
      "defined_out": [
        "\"r_\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"r_\"",
        "materialized_values%0#0"
      ]
    },
    "778": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "779": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "780": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "782": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "783": {
      "error": "Box found. Ensure the box does not exist.",
      "op": "assert // Box found. Ensure the box does not exist.",
      "stack_out": []
    },
    "784": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_r_pay#0 (copy)"
      ],
      "stack_out": [
        "box_r_pay#0 (copy)"
      ]
    },
    "786": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "788": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "790": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "791": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "792": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_r_pay#0 (copy)"
      ]
    },
    "794": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "796": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "799": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": []
    },
    "800": {
      "op": "global Round",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "802": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "30"
      ]
    },
    "804": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "805": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "806": {
      "op": "pushbytes 0x0000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x0000000000000000000000000000000000"
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "0x0000000000000000000000000000000000",
        "val_as_bytes%0#0"
      ]
    },
    "826": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "827": {
      "op": "bytec 4 // \"r_\"",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "\"r_\""
      ]
    },
    "829": {
      "op": "txn Sender",
      "defined_out": [
        "\"r_\"",
        "encoded_tuple_buffer%4#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "\"r_\"",
        "materialized_values%1#0"
      ]
    },
    "831": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "box_prefixed_key%1#0"
      ]
    },
    "832": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "833": {
      "op": "box_put",
      "stack_out": []
    },
    "834": {
      "retsub": true,
      "op": "retsub"
    },
    "835": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.new_game",
      "params": {
        "box_g_pay#0": "uint64",
        "box_s_pay#0": "uint64",
        "box_c_pay#0": "uint64",
        "box_l_pay#0": "uint64",
        "stake_pay#0": "uint64",
        "lobby_size#0": "bytes"
      },
      "block": "new_game",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "838": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "840": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "6"
      ]
    },
    "842": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "843": {
      "error": "Invalid group size. Ensure number of transactions in group is within valid bounds.",
      "op": "assert // Invalid group size. Ensure number of transactions in group is within valid bounds.",
      "stack_out": []
    },
    "844": {
      "op": "frame_dig -6",
      "defined_out": [
        "box_g_pay#0 (copy)"
      ],
      "stack_out": [
        "box_g_pay#0 (copy)"
      ]
    },
    "846": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "848": {
      "op": "pushint 54900 // 54900",
      "defined_out": [
        "54900",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "54900"
      ]
    },
    "852": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "853": {
      "error": "Insufficient payment amount. Value is not enough to cover the minimum requirements.",
      "op": "assert // Insufficient payment amount. Value is not enough to cover the minimum requirements.",
      "stack_out": []
    },
    "854": {
      "op": "frame_dig -5",
      "defined_out": [
        "box_s_pay#0 (copy)"
      ],
      "stack_out": [
        "box_s_pay#0 (copy)"
      ]
    },
    "856": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "858": {
      "op": "pushint 27700 // 27700",
      "defined_out": [
        "27700",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "27700"
      ]
    },
    "862": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "863": {
      "error": "Insufficient payment amount. Value is not enough to cover the minimum requirements.",
      "op": "assert // Insufficient payment amount. Value is not enough to cover the minimum requirements.",
      "stack_out": []
    },
    "864": {
      "op": "frame_dig -3",
      "defined_out": [
        "box_l_pay#0 (copy)"
      ],
      "stack_out": [
        "box_l_pay#0 (copy)"
      ]
    },
    "866": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "868": {
      "op": "frame_dig -1",
      "defined_out": [
        "lobby_size#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "lobby_size#0 (copy)"
      ]
    },
    "870": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "871": {
      "op": "dup",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "872": {
      "op": "cover 2",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "874": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%7#0",
        "32"
      ]
    },
    "875": {
      "op": "*",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "876": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "to_encode%0#0",
        "to_encode%0#0"
      ]
    },
    "877": {
      "op": "cover 2",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "879": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "880": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "881": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "882": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "884": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "885": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "886": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "uint16%0#0"
      ]
    },
    "889": {
      "op": "pushbytes 0x0a",
      "defined_out": [
        "0x0a",
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "uint16%0#0",
        "0x0a"
      ]
    },
    "892": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "0x0a",
        "uint16%0#0"
      ]
    },
    "893": {
      "callsub": "smart_contracts.salvo.contract.Salvo.calc_single_box_cost",
      "op": "callsub calc_single_box_cost",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "896": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%9#0"
      ]
    },
    "897": {
      "error": "Insufficient payment amount. Value is not enough to cover the minimum requirements.",
      "op": "assert // Insufficient payment amount. Value is not enough to cover the minimum requirements.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "898": {
      "op": "frame_dig -6",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_g_pay#0 (copy)"
      ]
    },
    "900": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%10#0"
      ]
    },
    "902": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "904": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%12#0"
      ]
    },
    "905": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "906": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "908": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%13#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%13#0"
      ]
    },
    "910": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "912": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%15#0"
      ]
    },
    "913": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "914": {
      "op": "frame_dig -4",
      "defined_out": [
        "box_c_pay#0 (copy)",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "916": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%16#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%16#0"
      ]
    },
    "918": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "920": {
      "op": "==",
      "defined_out": [
        "tmp%18#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%18#0"
      ]
    },
    "921": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "922": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_l_pay#0 (copy)"
      ]
    },
    "924": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%19#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%19#0"
      ]
    },
    "926": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "928": {
      "op": "==",
      "defined_out": [
        "tmp%21#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%21#0"
      ]
    },
    "929": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "930": {
      "op": "frame_dig -2",
      "defined_out": [
        "stake_pay#0 (copy)",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "932": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%22#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%22#0"
      ]
    },
    "934": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "936": {
      "op": "==",
      "defined_out": [
        "tmp%24#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%24#0"
      ]
    },
    "937": {
      "error": "Stake payment sender address must match sender address.",
      "op": "assert // Stake payment sender address must match sender address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "938": {
      "op": "frame_dig -6",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_g_pay#0 (copy)"
      ]
    },
    "940": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%25#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%25#0"
      ]
    },
    "942": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "944": {
      "op": "==",
      "defined_out": [
        "tmp%27#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%27#0"
      ]
    },
    "945": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "946": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "948": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%28#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%28#0"
      ]
    },
    "950": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "952": {
      "op": "==",
      "defined_out": [
        "tmp%30#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%30#0"
      ]
    },
    "953": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "954": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "956": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%31#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%31#0"
      ]
    },
    "958": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "960": {
      "op": "==",
      "defined_out": [
        "tmp%33#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%33#0"
      ]
    },
    "961": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "962": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "box_l_pay#0 (copy)"
      ]
    },
    "964": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%34#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%34#0"
      ]
    },
    "966": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "968": {
      "op": "==",
      "defined_out": [
        "tmp%36#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%36#0"
      ]
    },
    "969": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "970": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "972": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%37#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%37#0"
      ]
    },
    "974": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "976": {
      "op": "==",
      "defined_out": [
        "tmp%39#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%39#0"
      ]
    },
    "977": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "978": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "lobby_size#0 (copy)"
      ]
    },
    "980": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "lobby_size#0 (copy)",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "lobby_size#0 (copy)",
        "0x02"
      ]
    },
    "983": {
      "op": "b>=",
      "defined_out": [
        "tmp%40#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%40#0"
      ]
    },
    "984": {
      "op": "bz new_game_bool_false@4",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "987": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "lobby_size#0 (copy)"
      ]
    },
    "989": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "lobby_size#0 (copy)",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "lobby_size#0 (copy)",
        "0x04"
      ]
    },
    "992": {
      "op": "b<=",
      "defined_out": [
        "tmp%41#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%41#0"
      ]
    },
    "993": {
      "op": "bz new_game_bool_false@4",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "996": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%7#0"
      ]
    },
    "998": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%7#0",
        "2"
      ]
    },
    "999": {
      "op": "%",
      "defined_out": [
        "tmp%43#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "tmp%43#0"
      ]
    },
    "1000": {
      "op": "bnz new_game_bool_false@4",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "1003": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "and_result%0#0"
      ]
    },
    "1004": {
      "block": "new_game_bool_merge@5",
      "stack_in": [
        "tmp%7#0",
        "to_encode%0#0",
        "and_result%0#0"
      ],
      "error": "Invalid Lobby size. Value must be an even number and within permitted bounds.",
      "op": "assert // Invalid Lobby size. Value must be an even number and within permitted bounds.",
      "defined_out": [],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "1005": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "0"
      ]
    },
    "1006": {
      "op": "bytec 7 // \"game_id\"",
      "defined_out": [
        "\"game_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "0",
        "\"game_id\""
      ]
    },
    "1008": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1009": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0"
      ]
    },
    "1010": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1011": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1012": {
      "op": "bytec_3 // \"g_\"",
      "defined_out": [
        "\"g_\"",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "\"g_\""
      ]
    },
    "1013": {
      "op": "dig 1",
      "defined_out": [
        "\"g_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "\"g_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1015": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1016": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1139": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1140": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "tmp%45#0"
      ]
    },
    "1142": {
      "op": "pushint 1200 // 1200",
      "defined_out": [
        "1200",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "tmp%45#0",
        "1200"
      ]
    },
    "1145": {
      "op": "+",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "to_encode%1#0"
      ]
    },
    "1146": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1147": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "stake_pay#0 (copy)",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1149": {
      "op": "gtxns Amount",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "to_encode%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%2#0"
      ]
    },
    "1151": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1152": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0"
      ]
    },
    "1154": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "0x00"
      ]
    },
    "1155": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x00",
        "encoded_value%0#0",
        "lobby_size#0 (copy)",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "0x00",
        "lobby_size#0 (copy)"
      ]
    },
    "1157": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1158": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%2#0",
        "0x01"
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1162": {
      "op": "pushbytes 0x0020",
      "defined_out": [
        "0x0020",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%3#0",
        "0x0020"
      ]
    },
    "1166": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1167": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "1169": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "tmp%46#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1170": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "tmp%46#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "1172": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "tmp%46#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1173": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%46#0"
      ]
    },
    "1174": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1175": {
      "op": "bytec 5 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0",
        "\"s_\""
      ]
    },
    "1177": {
      "op": "dig 2",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1179": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%1#0"
      ]
    },
    "1180": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "box_prefixed_key%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1181": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1182": {
      "op": "frame_dig 1",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "to_encode%0#0"
      ]
    },
    "1184": {
      "op": "bzero",
      "defined_out": [
        "encoded_value%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ]
    },
    "1185": {
      "op": "bytec 6 // \"l_\"",
      "defined_out": [
        "\"l_\"",
        "encoded_value%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0",
        "\"l_\""
      ]
    },
    "1187": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "materialized_values%0#0",
        "\"l_\"",
        "encoded_value%0#0"
      ]
    },
    "1189": {
      "op": "concat",
      "defined_out": [
        "game_lobby_bref#0",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_lobby_bref#0"
      ]
    },
    "1190": {
      "op": "dup",
      "defined_out": [
        "game_lobby_bref#0",
        "game_lobby_bref#0 (copy)",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_lobby_bref#0",
        "game_lobby_bref#0 (copy)"
      ]
    },
    "1191": {
      "op": "box_del",
      "defined_out": [
        "game_lobby_bref#0",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "to_encode%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_lobby_bref#0",
        "{box_del}"
      ]
    },
    "1192": {
      "op": "pop",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_lobby_bref#0"
      ]
    },
    "1193": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_lobby_bref#0",
        "game_lobby_bref#0 (copy)"
      ]
    },
    "1194": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0",
        "game_lobby_bref#0 (copy)",
        "materialized_values%0#0"
      ]
    },
    "1196": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0"
      ]
    },
    "1197": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "game_lobby_bref#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0",
        "\"c_\""
      ]
    },
    "1198": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "game_lobby_bref#0",
        "materialized_values%1#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0",
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "1200": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "game_lobby_bref#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0",
        "box_prefixed_key%3#0"
      ]
    },
    "1201": {
      "op": "pushbytes 0x00060500010000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00060500010000000000000000000000000000000000000000000000000000000000000000",
        "box_prefixed_key%3#0",
        "game_lobby_bref#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0",
        "box_prefixed_key%3#0",
        "0x00060500010000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1240": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0"
      ]
    },
    "1241": {
      "op": "intc_1 // 0"
    },
    "1242": {
      "op": "txn Sender",
      "defined_out": [
        "0",
        "game_lobby_bref#0",
        "maybe_value%0#0",
        "tmp%50#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "game_lobby_bref#0",
        "0",
        "tmp%50#0"
      ]
    },
    "1244": {
      "op": "box_replace",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0"
      ]
    },
    "1245": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1246": {
      "op": "+",
      "defined_out": [
        "materialized_values%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "materialized_values%2#0"
      ]
    },
    "1247": {
      "op": "bytec 7 // \"game_id\"",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "materialized_values%2#0",
        "\"game_id\""
      ]
    },
    "1249": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "\"game_id\"",
        "materialized_values%2#0"
      ]
    },
    "1250": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "1251": {
      "retsub": true,
      "op": "retsub"
    },
    "1252": {
      "block": "new_game_bool_false@4",
      "stack_in": [
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0",
        "and_result%0#0"
      ]
    },
    "1253": {
      "op": "b new_game_bool_merge@5"
    },
    "1256": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.commit_turn",
      "params": {
        "game_id#0": "uint64",
        "turn_hash#0": "bytes"
      },
      "block": "commit_turn",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1259": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "acc_in_game#5"
      ]
    },
    "1261": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "acc_in_game#5",
        "game_id#0 (copy)"
      ]
    },
    "1263": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0"
      ]
    },
    "1264": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1265": {
      "op": "bytec 5 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1267": {
      "op": "swap",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "1268": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1269": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1270": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1271": {
      "op": "bury 1",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1273": {
      "error": "Game ID not found. Ensure the game was created and still exists.",
      "op": "assert // Game ID not found. Ensure the game was created and still exists.",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1274": {
      "op": "txn Sender",
      "defined_out": [
        "account#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "account#0"
      ]
    },
    "1276": {
      "op": "swap",
      "defined_out": [
        "account#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1277": {
      "op": "box_get",
      "defined_out": [
        "account#0",
        "encoded_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1278": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "maybe_value%0#0"
      ]
    },
    "1279": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "account#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "1280": {
      "op": "getbyte",
      "defined_out": [
        "account#0",
        "encoded_value%0#0",
        "player_count#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "player_count#0"
      ]
    },
    "1281": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "account#0",
        "encoded_value%0#0",
        "player_count#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "player_count#0",
        "32"
      ]
    },
    "1282": {
      "op": "*",
      "defined_out": [
        "account#0",
        "encoded_value%0#0",
        "game_lobby_length#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0"
      ]
    },
    "1283": {
      "op": "intc_1 // 0"
    },
    "1284": {
      "op": "dup",
      "defined_out": [
        "acc_in_game#0",
        "account#0",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1285": {
      "block": "commit_turn_for_header@2",
      "stack_in": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "1287": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0",
        "game_lobby_length#0"
      ]
    },
    "1289": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1290": {
      "op": "frame_dig 4",
      "defined_out": [
        "acc_in_game#5",
        "continue_looping%0#0",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "continue_looping%0#0",
        "acc_in_game#5"
      ]
    },
    "1292": {
      "op": "frame_bury 0",
      "defined_out": [
        "acc_in_game#5",
        "continue_looping%0#0",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1294": {
      "op": "bz commit_turn_after_for@8",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1297": {
      "op": "bytec 6 // \"l_\"",
      "defined_out": [
        "\"l_\"",
        "acc_in_game#5",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"l_\""
      ]
    },
    "1299": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"l_\"",
        "acc_in_game#5",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"l_\"",
        "encoded_value%0#0"
      ]
    },
    "1301": {
      "op": "concat",
      "defined_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "game_lobby_bref#0",
        "game_lobby_length#0",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "game_lobby_bref#0"
      ]
    },
    "1302": {
      "op": "box_get",
      "defined_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1303": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "1304": {
      "op": "frame_dig 5",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1306": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "acc_in_game#5",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "i#0",
        "32"
      ]
    },
    "1307": {
      "op": "extract3",
      "defined_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0",
        "player_addr_bytes#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "1308": {
      "op": "frame_dig 2",
      "defined_out": [
        "acc_in_game#5",
        "account#0",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0",
        "player_addr_bytes#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "player_addr_bytes#0",
        "account#0"
      ]
    },
    "1310": {
      "op": "==",
      "defined_out": [
        "acc_in_game#5",
        "account#0",
        "encoded_value%0#0",
        "game_lobby_length#0",
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "1311": {
      "op": "bz commit_turn_after_if_else@7",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1314": {
      "op": "intc_0 // 1",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "acc_in_game#5"
      ]
    },
    "1315": {
      "op": "frame_bury 0",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1317": {
      "block": "commit_turn_after_for@8",
      "stack_in": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "acc_in_game#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "acc_in_game#0"
      ]
    },
    "1319": {
      "error": "Player not found. Ensure player address is inside the game lobby.",
      "op": "assert // Player not found. Ensure player address is inside the game lobby.",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1320": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "acc_in_game#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"c_\""
      ]
    },
    "1321": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "acc_in_game#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "1323": {
      "op": "concat",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1324": {
      "op": "box_get",
      "defined_out": [
        "acc_in_game#0",
        "maybe_exists%2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1325": {
      "error": "check self.box_game_character entry exists",
      "op": "assert // check self.box_game_character entry exists",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "1326": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "acc_in_game#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1327": {
      "op": "getbit",
      "defined_out": [
        "acc_in_game#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "is_true%0#0"
      ]
    },
    "1328": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "acc_in_game#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1329": {
      "op": "intc_1 // 0",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1330": {
      "op": "uncover 2",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1332": {
      "op": "setbit",
      "defined_out": [
        "acc_in_game#0",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "encoded_bool%0#0"
      ]
    },
    "1333": {
      "op": "intc_1 // 0",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1334": {
      "op": "getbit",
      "defined_out": [
        "acc_in_game#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1335": {
      "op": "!",
      "defined_out": [
        "acc_in_game#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1336": {
      "op": "assert",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1337": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"c_\""
      ]
    },
    "1338": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "acc_in_game#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "1340": {
      "op": "concat",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%3#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%3#0"
      ]
    },
    "1341": {
      "op": "dup",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "1342": {
      "op": "box_get",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%3#0",
        "maybe_exists%3#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%3#0",
        "maybe_value%2#0",
        "maybe_exists%3#0"
      ]
    },
    "1343": {
      "error": "check self.box_game_character entry exists",
      "op": "assert // check self.box_game_character entry exists",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%3#0",
        "maybe_value%2#0"
      ]
    },
    "1344": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%3#0",
        "maybe_value%2#0",
        "turn_hash#0 (copy)"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%3#0",
        "maybe_value%2#0",
        "turn_hash#0 (copy)"
      ]
    },
    "1346": {
      "op": "replace2 5",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%3#0",
        "updated_data%0#0"
      ]
    },
    "1348": {
      "op": "box_put",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1349": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"c_\""
      ]
    },
    "1350": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "acc_in_game#0",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "\"c_\"",
        "materialized_values%2#0"
      ]
    },
    "1352": {
      "op": "concat",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%4#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1353": {
      "op": "dup",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0 (copy)"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0 (copy)"
      ]
    },
    "1354": {
      "op": "box_get",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%4#0",
        "maybe_exists%4#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0",
        "maybe_value%3#0",
        "maybe_exists%4#0"
      ]
    },
    "1355": {
      "error": "check self.box_game_character entry exists",
      "op": "assert // check self.box_game_character entry exists",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0",
        "maybe_value%3#0"
      ]
    },
    "1356": {
      "op": "intc_1 // 0",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "1357": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "acc_in_game#0",
        "box_prefixed_key%4#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0",
        "maybe_value%3#0",
        "0",
        "1"
      ]
    },
    "1358": {
      "op": "setbit",
      "defined_out": [
        "acc_in_game#0",
        "box_prefixed_key%4#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "box_prefixed_key%4#0",
        "updated_data%1#0"
      ]
    },
    "1359": {
      "op": "box_put",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1360": {
      "retsub": true,
      "op": "retsub"
    },
    "1361": {
      "block": "commit_turn_after_if_else@7",
      "stack_in": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "1363": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "1364": {
      "op": "+",
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "1365": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "account#0",
        "game_lobby_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "1367": {
      "op": "b commit_turn_for_header@2"
    },
    "1370": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.mimc_tester",
      "params": {},
      "block": "mimc_tester",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1373": {
      "op": "intc_1 // 0",
      "stack_out": [
        "preimage#0"
      ]
    },
    "1374": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1376": {
      "block": "mimc_tester_while_top@8",
      "stack_in": [
        "preimage#0",
        "i#0"
      ],
      "op": "pushint 68610 // 68610",
      "defined_out": [
        "68610"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "68610"
      ]
    },
    "1380": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "68610",
        "tmp%0#2"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "68610",
        "tmp%0#2"
      ]
    },
    "1382": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "1383": {
      "op": "bz mimc_tester_after_while@13",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1386": {
      "op": "itxn_begin"
    },
    "1387": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "appl"
      ]
    },
    "1389": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1391": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "DeleteApplication"
      ]
    },
    "1393": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1395": {
      "op": "bytec 8 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "0x068101"
      ]
    },
    "1397": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1399": {
      "op": "bytec 8 // 0x068101",
      "stack_out": [
        "preimage#0",
        "i#0",
        "0x068101"
      ]
    },
    "1401": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1403": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "0"
      ]
    },
    "1404": {
      "op": "itxn_field Fee",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1406": {
      "op": "itxn_submit"
    },
    "1407": {
      "op": "b mimc_tester_while_top@8"
    },
    "1410": {
      "block": "mimc_tester_after_while@13",
      "stack_in": [
        "preimage#0",
        "i#0"
      ],
      "op": "pushbytes 0x",
      "defined_out": [
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "preimage#0"
      ]
    },
    "1412": {
      "op": "frame_bury 0",
      "defined_out": [
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1414": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "i#0"
      ]
    },
    "1415": {
      "op": "frame_bury 1",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1417": {
      "block": "mimc_tester_for_header@1",
      "stack_in": [
        "preimage#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "i#0"
      ]
    },
    "1419": {
      "op": "pushint 121 // 121",
      "defined_out": [
        "121",
        "i#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "i#0",
        "121"
      ]
    },
    "1421": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1422": {
      "op": "bz mimc_tester_after_for@4",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1425": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "preimage#0"
      ]
    },
    "1427": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001",
        "i#0",
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "preimage#0",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "1461": {
      "op": "concat",
      "stack_out": [
        "preimage#0",
        "i#0",
        "preimage#0"
      ]
    },
    "1462": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1464": {
      "op": "frame_dig 1",
      "stack_out": [
        "preimage#0",
        "i#0",
        "i#0"
      ]
    },
    "1466": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1467": {
      "op": "+",
      "stack_out": [
        "preimage#0",
        "i#0",
        "i#0"
      ]
    },
    "1468": {
      "op": "frame_bury 1",
      "stack_out": [
        "preimage#0",
        "i#0"
      ]
    },
    "1470": {
      "op": "b mimc_tester_for_header@1"
    },
    "1473": {
      "block": "mimc_tester_after_for@4",
      "stack_in": [
        "preimage#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "preimage#0"
      ]
    },
    "1475": {
      "op": "mimc BLS12_381Mp111",
      "defined_out": [
        "output#0",
        "preimage#0"
      ],
      "stack_out": [
        "preimage#0",
        "i#0",
        "output#0"
      ]
    },
    "1477": {
      "op": "frame_bury 0"
    },
    "1479": {
      "retsub": true,
      "op": "retsub"
    },
    "1480": {
      "subroutine": "smart_contracts.salvo.contract.Salvo.update",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "intc 5 // TMPL_UPDATABLE",
      "defined_out": [
        "TMPL_UPDATABLE"
      ],
      "stack_out": [
        "TMPL_UPDATABLE"
      ]
    },
    "1482": {
      "error": "Template variable 'UPDATABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'UPDATABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "1483": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1485": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1487": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1488": {
      "error": "Only app creator can act as the sender address.",
      "op": "assert // Only app creator can act as the sender address.",
      "stack_out": []
    },
    "1489": {
      "retsub": true,
      "op": "retsub"
    }
  }
}