# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_cost", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "i"}], "name": "read_grid_cell_value_by_index", "returns": {"type": "uint8"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "x"}, {"type": "uint8", "name": "y"}], "name": "read_grid_cell_value_at_coords", "returns": {"type": "uint8"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "account"}], "name": "does_box_user_registry_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "does_box_game_grid_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "does_box_game_state_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "account"}], "name": "does_box_game_character_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_lobby", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_r_pay"}], "name": "get_box_user_registry", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_g_pay"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_c_pay"}, {"type": "pay", "name": "box_l_pay"}, {"type": "pay", "name": "stake_pay"}, {"type": "uint8", "name": "lobby_size"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint256", "name": "turn_hash"}], "name": "commit_turn", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [], "name": "update", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Salvo", "state": {"keys": {"box": {}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"box_user_registry": {"keyType": "address", "valueType": "UserRegistry", "prefix": "cl8="}, "box_game_grid": {"keyType": "uint64", "valueType": "uint8[121]", "prefix": "Z18="}, "box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_lobby": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "bF8="}, "box_game_character": {"keyType": "address", "valueType": "GameCharacter", "prefix": "Y18="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"GameCharacter": [{"name": "has_committed_turn", "type": "bool"}, {"name": "id", "type": "uint8"}, {"name": "position", "type": "uint8"}, {"name": "move_points", "type": "uint8"}, {"name": "direction", "type": "uint8"}, {"name": "turn_hash", "type": "uint256"}], "GameState": [{"name": "staking_closed", "type": "bool"}, {"name": "lobby_size", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "box_l_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pot", "type": "uint64"}, {"name": "admin_address", "type": "address"}], "UserRegistry": [{"name": "hosting_game", "type": "bool"}, {"name": "game_id", "type": "uint64"}, {"name": "commit_rand_round", "type": "uint64"}, {"name": "expiry_round", "type": "uint64"}]}, "byteCode": {"approval": "CyAGAQAgAgAAJggEFR98dQEAAmNfAmdfAnJfAnNfAmxfB2dhbWVfaWQxG0EAaYIOBGMzzZ0Etm0vVgSJlrs3BFOB1qgEeBX+QQQLQtEqBLv6jgEE+FBTrQQG8NEyBFviGfAEP/vKJASB6QVCBP0c12oEoOgYcjYaAI4OAUcBNwEgAQYA6wDSALkAngCKAH0AZwAjABAAAiNDMRmBBBJEMRhEiAS/IkMxGRREMRhENhoBFzYaAogEOiJDMRkURDEYRDEWgQUJSTgQIhJEMRaBBAlJOBAiEkQxFoEDCUk4ECISRDEWJQlJOBAiEkQxFiIJSTgQIhJENhoBiAJRIkMxGRREMRhEMRYiCUk4ECISRIgB9iJDMRkURDEYFESIAeQiQzEZFEQxGEQ2GgEXiAFVKExQsCJDMRkURDEYRDYaARfAHIgBNCkjTwJUKExQsCJDMRkURDEYRDYaAReIAQ0pI08CVChMULAiQzEZFEQxGEQ2GgEXiADnKSNPAlQoTFCwIkMxGRREMRhENhoBF8AciADAKSNPAlQoTFCwIkMxGRREMRhENhoBFzYaAjYaA4gAgShMULAiQzEZFEQxGEQ2GgEXNhoCiABeKExQsCJDMRkURDEYRCEEFihMULAiQzEZFEQxGEQ2GgE2GgKIACUWKExQsCJDigMBi/0Wi/5MUEm9RQFEi/8XSYF5DERMvkRMIliJigIBi/4Xi/8XCIGQAwuBxBMIiYoCAYv+K4v/iP/EiYoDAYv+F4ELC4v/FwgWSZOBCA5EVwcBi/0rTwKI/6SJigEBJwSL/1C+RQGJigEBi/8WK0xQvkUBiYoBAYv/FicFTFC+RQGJigEBKov/UL5FAYmKAQEjSYv/FicGTFBJvUUBRL5MSU8CRIACAABMFSOLBYsEDEEAVIsCiwUkWEmMAIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATiwOMAUEAFIsDVwIAiwBQSRUkChZXBgJMUIwBiwGMA4sFJAiMBUL/pIsDjACJJwciZ4mKAQAyBCUSRCcEMQBQvUUBFESL/zgAMQASRIv/OAcyChJEMgaBHggWgBEAAAAAAAAAAAAAAAAAAAAAAExQJwQxAFBMv4mKBgAyBIEGEkSL+jgIgfSsAw9Ei/s4CIG02AEPRIv9OAiL/xdJTgIkC0lOAhZJk4EQDkRXBgKAAQpMiP6JD0SL+jgAMQASRIv7OAAxABJEi/w4ADEAEkSL/TgAMQASRIv+OAAxABJEi/o4BzIKEkSL+zgHMgoSRIv8OAcyChJEi/04BzIKEkSL/jgHMgoSRIv/gAECp0EBCYv/gAEEpkEBAIsAJRhAAPkiRCMnB2VESRYrSwFQgHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvzIHgbAJCBaL/jgIFjEAKYv/UIABAVCAAgAgUE8DUE8CUExQJwVLAlBMv4sBrycGTwJQSbxISU8CvyoxAFCAJQAGBQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/IzEAuyIIJwdMZ4kjQv8EigIAgACL/hZJJwVMUEm9RQFEMQBMvkQlVSQLI0mLBYsDDIsEjABBABQnBosBUL5EiwUkWIsCEkEALyKMAIsARCoxAFC+RCNTKSNPAlQjUxREKjEAUEm+RIv/XAW/KjEAUEm+RCMiVL+JiwUkCIwFQv+rIQVEMQAyCRJEiQ==", "clear": "C4EBQw=="}, "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDMyIDIgVE1QTF9HRU5fVU5JWCBUTVBMX1VQREFUQUJMRQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDAgImNfIiAiZ18iICJyXyIgInNfIiAibF8iICJnYW1lX2lkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAMTkKICAgIHB1c2hieXRlc3MgMHg2MzMzY2Q5ZCAweGI2NmQyZjU2IDB4ODk5NmJiMzcgMHg1MzgxZDZhOCAweDc4MTVmZTQxIDB4MGI0MmQxMmEgMHhiYmZhOGUwMSAweGY4NTA1M2FkIDB4MDZmMGQxMzIgMHg1YmUyMTlmMCAweDNmZmJjYTI0IDB4ODFlOTA1NDIgMHhmZDFjZDc2YSAweGEwZTgxODcyIC8vIG1ldGhvZCAiY2FsY19zaW5nbGVfYm94X2Nvc3QodWludDgsdWludDE2KXVpbnQ2NCIsIG1ldGhvZCAicmVhZF9nZW5fdW5peCgpdWludDY0IiwgbWV0aG9kICJyZWFkX2dyaWRfY2VsbF92YWx1ZV9ieV9pbmRleCh1aW50NjQsdWludDgpdWludDgiLCBtZXRob2QgInJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3Jkcyh1aW50NjQsdWludDgsdWludDgpdWludDgiLCBtZXRob2QgImRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3QoYWNjb3VudClib29sIiwgbWV0aG9kICJkb2VzX2JveF9nYW1lX2dyaWRfZXhpc3QodWludDY0KWJvb2wiLCBtZXRob2QgImRvZXNfYm94X2dhbWVfc3RhdGVfZXhpc3QodWludDY0KWJvb2wiLCBtZXRob2QgImRvZXNfYm94X2dhbWVfY2hhcmFjdGVyX2V4aXN0KGFjY291bnQpYm9vbCIsIG1ldGhvZCAicmVhZF9ib3hfZ2FtZV9sb2JieSh1aW50NjQpYWRkcmVzc1tdIiwgbWV0aG9kICJnZW5lcmF0ZSgpdm9pZCIsIG1ldGhvZCAiZ2V0X2JveF91c2VyX3JlZ2lzdHJ5KHBheSl2b2lkIiwgbWV0aG9kICJuZXdfZ2FtZShwYXkscGF5LHBheSxwYXkscGF5LHVpbnQ4KXZvaWQiLCBtZXRob2QgImNvbW1pdF90dXJuKHVpbnQ2NCx1aW50MjU2KXZvaWQiLCBtZXRob2QgInVwZGF0ZSgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY2FsY19zaW5nbGVfYm94X2Nvc3Rfcm91dGVANSBtYWluX3JlYWRfZ2VuX3VuaXhfcm91dGVANiBtYWluX3JlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4X3JvdXRlQDcgbWFpbl9yZWFkX2dyaWRfY2VsbF92YWx1ZV9hdF9jb29yZHNfcm91dGVAOCBtYWluX2RvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3Rfcm91dGVAOSBtYWluX2RvZXNfYm94X2dhbWVfZ3JpZF9leGlzdF9yb3V0ZUAxMCBtYWluX2RvZXNfYm94X2dhbWVfc3RhdGVfZXhpc3Rfcm91dGVAMTEgbWFpbl9kb2VzX2JveF9nYW1lX2NoYXJhY3Rlcl9leGlzdF9yb3V0ZUAxMiBtYWluX3JlYWRfYm94X2dhbWVfbG9iYnlfcm91dGVAMTMgbWFpbl9nZW5lcmF0ZV9yb3V0ZUAxNCBtYWluX2dldF9ib3hfdXNlcl9yZWdpc3RyeV9yb3V0ZUAxNSBtYWluX25ld19nYW1lX3JvdXRlQDE2IG1haW5fY29tbWl0X3R1cm5fcm91dGVAMTcgbWFpbl91cGRhdGVfcm91dGVAMTgKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9yb3V0ZUAxODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo0MTUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IFVwZGF0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdXBkYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NvbW1pdF90dXJuX3JvdXRlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI1NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgY29tbWl0X3R1cm4KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fbmV3X2dhbWVfcm91dGVAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTU5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4biBHcm91cEluZGV4CiAgICBwdXNoaW50IDUgLy8gNQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuIEdyb3VwSW5kZXgKICAgIHB1c2hpbnQgNCAvLyA0CiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG4gR3JvdXBJbmRleAogICAgcHVzaGludCAzIC8vIDMKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzMgLy8gMgogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTU5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgbmV3X2dhbWUKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2JveF91c2VyX3JlZ2lzdHJ5X3JvdXRlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjEzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBnZXRfYm94X3VzZXJfcmVnaXN0cnkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2VuZXJhdGVfcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTIzLTEyNAogICAgLy8gIyBHZW5lcmF0ZSB0aGUgc21hcnQgY29udHJhY3QgYXBwbGljYXRpb24gY2xpZW50CiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIGdlbmVyYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfYm94X2dhbWVfbG9iYnlfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6OTktMTAwCiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIGFuIGFycmF5IG9mIGFsbCBhY3RpdmUgdXNlcnMgaW4gdGhlIGdhbWUgbG9iYnkgYXQgdGltZSBvZiBjYWxsCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo5OS0xMDAKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gYW4gYXJyYXkgb2YgYWxsIGFjdGl2ZSB1c2VycyBpbiB0aGUgZ2FtZSBsb2JieSBhdCB0aW1lIG9mIGNhbGwKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgY2FsbHN1YiByZWFkX2JveF9nYW1lX2xvYmJ5CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2RvZXNfYm94X2dhbWVfY2hhcmFjdGVyX2V4aXN0X3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojk0LTk1CiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBjaGFyYWN0ZXIgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojk0LTk1CiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBjaGFyYWN0ZXIgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGRvZXNfYm94X2dhbWVfY2hhcmFjdGVyX2V4aXN0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0X3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojg5LTkwCiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBzdGF0ZSBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo4OS05MAogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIGdhbWUgc3RhdGUgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGRvZXNfYm94X2dhbWVfc3RhdGVfZXhpc3QKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2RvZXNfYm94X2dhbWVfZ3JpZF9leGlzdF9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo4NC04NQogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIGdhbWUgZ3JpZCBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo4NC04NQogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIGdhbWUgZ3JpZCBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZG9lc19ib3hfZ2FtZV9ncmlkX2V4aXN0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kb2VzX2JveF91c2VyX3JlZ2lzdHJ5X2V4aXN0X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NzktODAKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiB1c2VyIHJlZ2lzdHJ5IGJveCB2YWx1ZSBleGlzdHMsIGVsc2UgRmFsc2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjgtMjkKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFNhbHZvKEFSQzRDb250cmFjdCwgYXZtX3ZlcnNpb249MTEpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo3OS04MAogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIHVzZXIgcmVnaXN0cnkgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3QKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3Jkc19yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjY5LTcwCiAgICAvLyAjIFJFQUQtT05MWTogUmVhZCBnYW1lIGdyaWQgY2VsbCB2YWx1ZSBhdCB4IGFuZCB5IGNvb3JkaW5hdGVzIHVuZGVyIHRoZSBnaXZlbiBnYW1lIGlkIGtleQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NjktNzAKICAgIC8vICMgUkVBRC1PTkxZOiBSZWFkIGdhbWUgZ3JpZCBjZWxsIHZhbHVlIGF0IHggYW5kIHkgY29vcmRpbmF0ZXMgdW5kZXIgdGhlIGdpdmVuIGdhbWUgaWQga2V5CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgcmVhZF9ncmlkX2NlbGxfdmFsdWVfYXRfY29vcmRzCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NjEtNjIKICAgIC8vICMgUkVBRC1PTkxZOiBSZWFkIGdhbWUgZ3JpZCBjZWxsIHZhbHVlIGF0IGFycmF5IGluZGV4IHVuZGVyIHRoZSBnaXZlbiBnYW1lIGlkIGtleQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NjEtNjIKICAgIC8vICMgUkVBRC1PTkxZOiBSZWFkIGdhbWUgZ3JpZCBjZWxsIHZhbHVlIGF0IGFycmF5IGluZGV4IHVuZGVyIHRoZSBnaXZlbiBnYW1lIGlkIGtleQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIHJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ2VuX3VuaXhfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo1Ni01NwogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiB0aGUgYXBwIGdlbmVzaXMgdGltZXN0YW1wIGluIFVuaXggZm9ybWF0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjU5CiAgICAvLyByZXR1cm4gVGVtcGxhdGVWYXJbVUludDY0XSgiR0VOX1VOSVgiKQogICAgaW50YyA0IC8vIFRNUExfR0VOX1VOSVgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo1Ni01NwogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiB0aGUgYXBwIGdlbmVzaXMgdGltZXN0YW1wIGluIFVuaXggZm9ybWF0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FsY19zaW5nbGVfYm94X2Nvc3Rfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo0Mi00MwogICAgLy8gIyBSRUFELU9OTFk6IENhbGN1bGF0ZSB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IChNQlIpIGNvc3QgZm9yIHN0b3JpbmcgYSBzaW5nbGUgYm94IHVuaXQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjgtMjkKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFNhbHZvKEFSQzRDb250cmFjdCwgYXZtX3ZlcnNpb249MTEpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjQyLTQzCiAgICAvLyAjIFJFQUQtT05MWTogQ2FsY3VsYXRlIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgKE1CUikgY29zdCBmb3Igc3RvcmluZyBhIHNpbmdsZSBib3ggdW5pdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGNhbGNfc2luZ2xlX2JveF9jb3N0CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLnN1YnJvdXRpbmVzLmdldF9ncmlkX2NlbGxfdmFsdWUoZ2FtZV9pZDogdWludDY0LCBib3hfZ2FtZV9ncmlkOiBieXRlcywgaTogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfZ3JpZF9jZWxsX3ZhbHVlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjE5OS0yMDMKICAgIC8vICMgR2V0IHRoZSB2YWx1ZSBvZiBhIGdyaWQgY2VsbCBhdCB0aGUgZXF1aXZhbGVudCBmbGF0dGVuZWQgMUQgYXJyYXkgaW5kZXgKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X2dyaWRfY2VsbF92YWx1ZSgKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsIGJveF9nYW1lX2dyaWQ6IEJveE1hcFtVSW50NjQsIHRhLkdhbWVHcmlkXSwgaTogYXJjNC5VSW50OAogICAgLy8gKSAtPiBhcmM0LlVJbnQ4OgogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjA0LTIwNQogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgZ2FtZV9pZCBpbiBib3hfZ2FtZV9ncmlkLCBlcnIuR0FNRV9JRF9OT1RfRk9VTkQKICAgIGZyYW1lX2RpZyAtMwogICAgaXRvYgogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gR2FtZSBJRCBub3QgZm91bmQuIEVuc3VyZSB0aGUgZ2FtZSB3YXMgY3JlYXRlZCBhbmQgc3RpbGwgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjIwNgogICAgLy8gYXNzZXJ0IGkubmF0aXZlIDwgY3N0LkdSSURfQ0VMTF9UT1RBTCwgZXJyLklOVkFMSURfUE9TX0lOREVYCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgcHVzaGludCAxMjEgLy8gMTIxCiAgICA8CiAgICBhc3NlcnQgLy8gSW52YWxpZCBwb3NpdGlvbiBpbmRleC4gRW5zdXJlIGluZGV4IHZhbHVlIGlzIHdpdGhpbiB2YWxpZCByYW5nZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9zdWJyb3V0aW5lcy5weToyMDgtMjA5CiAgICAvLyAjIEFjY2VzcyB0aGUgZ2FtZSBncmlkIGJveCBjb250ZW50cywgYXQgdGhlIGdpdmVuIGluZGV4LCBhbmQgcmV0dXJuIHRoZSBieXRlIHZhbHVlCiAgICAvLyByZXR1cm4gYm94X2dhbWVfZ3JpZFtnYW1lX2lkXVtpLm5hdGl2ZV0KICAgIHN3YXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBCb3hNYXAgZW50cnkgZXhpc3RzCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMQogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uY2FsY19zaW5nbGVfYm94X2Nvc3Qoa2V5X3NpemU6IGJ5dGVzLCB2YWx1ZV9zaXplOiBieXRlcykgLT4gdWludDY0OgpjYWxjX3NpbmdsZV9ib3hfY29zdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo0Mi00NgogICAgLy8gIyBSRUFELU9OTFk6IENhbGN1bGF0ZSB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IChNQlIpIGNvc3QgZm9yIHN0b3JpbmcgYSBzaW5nbGUgYm94IHVuaXQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgLy8gICAgIHNlbGYsIGtleV9zaXplOiBhcmM0LlVJbnQ4LCB2YWx1ZV9zaXplOiBhcmM0LlVJbnQxNgogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo1MAogICAgLy8ga2V5X3NpemUubmF0aXZlICsgdmFsdWVfc2l6ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NDkKICAgIC8vIHNpemVfY29zdCA9IGFyYzQuVUludDE2KDQwMCkubmF0aXZlICogKAogICAgcHVzaGludCA0MDAgLy8gNDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NDktNTEKICAgIC8vIHNpemVfY29zdCA9IGFyYzQuVUludDE2KDQwMCkubmF0aXZlICogKAogICAgLy8gICAgIGtleV9zaXplLm5hdGl2ZSArIHZhbHVlX3NpemUubmF0aXZlCiAgICAvLyApICAjIFNpemUgZmVlICg0MDAgcGVyIGJ5dGUgKiAobGVuKGtleSkrbGVuKHZhbHVlKSkpCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NTMtNTQKICAgIC8vICMgUmV0dXJuIHNpbmdsZSBib3ggdG90YWwgY29zdCBhbW91bnQKICAgIC8vIHJldHVybiBiYXNlX2Nvc3QubmF0aXZlICsgc2l6ZV9jb3N0CiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgKwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLmNvbnRyYWN0LlNhbHZvLnJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4KGdhbWVfaWQ6IHVpbnQ2NCwgaTogYnl0ZXMpIC0+IGJ5dGVzOgpyZWFkX2dyaWRfY2VsbF92YWx1ZV9ieV9pbmRleDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo2MS02NQogICAgLy8gIyBSRUFELU9OTFk6IFJlYWQgZ2FtZSBncmlkIGNlbGwgdmFsdWUgYXQgYXJyYXkgaW5kZXggdW5kZXIgdGhlIGdpdmVuIGdhbWUgaWQga2V5CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiByZWFkX2dyaWRfY2VsbF92YWx1ZV9ieV9pbmRleCgKICAgIC8vICAgICBzZWxmLCBnYW1lX2lkOiBVSW50NjQsIGk6IGFyYzQuVUludDgKICAgIC8vICkgLT4gYXJjNC5VSW50ODoKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjY2LTY3CiAgICAvLyAjIFJldHVybiBieXRlIHZhbHVlIGF0IGdyaWQgY2VsbCBpbmRleAogICAgLy8gcmV0dXJuIHNydC5nZXRfZ3JpZF9jZWxsX3ZhbHVlKGdhbWVfaWQsIHNlbGYuYm94X2dhbWVfZ3JpZCwgaSkKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZWNfMyAvLyAiZ18iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgZ2V0X2dyaWRfY2VsbF92YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLmNvbnRyYWN0LlNhbHZvLnJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3JkcyhnYW1lX2lkOiB1aW50NjQsIHg6IGJ5dGVzLCB5OiBieXRlcykgLT4gYnl0ZXM6CnJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3JkczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo2OS03MwogICAgLy8gIyBSRUFELU9OTFk6IFJlYWQgZ2FtZSBncmlkIGNlbGwgdmFsdWUgYXQgeCBhbmQgeSBjb29yZGluYXRlcyB1bmRlciB0aGUgZ2l2ZW4gZ2FtZSBpZCBrZXkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIHJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3JkcygKICAgIC8vICAgICBzZWxmLCBnYW1lX2lkOiBVSW50NjQsIHg6IGFyYzQuVUludDgsIHk6IGFyYzQuVUludDgKICAgIC8vICkgLT4gYXJjNC5VSW50ODoKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjE5MgogICAgLy8gcm93Lm5hdGl2ZSAqIGNzdC5HUklEX1NJWkUgKyBjb2wubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgICoKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjE5NS0xOTYKICAgIC8vICMgUmV0dXJuIGluZGV4IHZhbHVlIHdyYXBwZWQgaW4gYW4gVUludDggZGF0YSB0eXBlCiAgICAvLyByZXR1cm4gYXJjNC5VSW50OChpKQogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBleHRyYWN0IDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojc0LTc3CiAgICAvLyAjIENvbnZlcnQgeCAmIHkgY29vcmRzIHRvIGdyaWQgY2VsbCBpbmRleCwgdGhlbiByZXR1cm4gYnl0ZSB2YWx1ZSBhdCB0aGF0IGluZGV4CiAgICAvLyByZXR1cm4gc3J0LmdldF9ncmlkX2NlbGxfdmFsdWUoCiAgICAvLyAgICAgZ2FtZV9pZCwgc2VsZi5ib3hfZ2FtZV9ncmlkLCBzcnQuY29udmVydF9ncmlkX2Nvb3Jkc190b19pbmRleCh4LCB5KQogICAgLy8gKQogICAgZnJhbWVfZGlnIC0zCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NzYKICAgIC8vIGdhbWVfaWQsIHNlbGYuYm94X2dhbWVfZ3JpZCwgc3J0LmNvbnZlcnRfZ3JpZF9jb29yZHNfdG9faW5kZXgoeCwgeSkKICAgIGJ5dGVjXzMgLy8gImdfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojc0LTc3CiAgICAvLyAjIENvbnZlcnQgeCAmIHkgY29vcmRzIHRvIGdyaWQgY2VsbCBpbmRleCwgdGhlbiByZXR1cm4gYnl0ZSB2YWx1ZSBhdCB0aGF0IGluZGV4CiAgICAvLyByZXR1cm4gc3J0LmdldF9ncmlkX2NlbGxfdmFsdWUoCiAgICAvLyAgICAgZ2FtZV9pZCwgc2VsZi5ib3hfZ2FtZV9ncmlkLCBzcnQuY29udmVydF9ncmlkX2Nvb3Jkc190b19pbmRleCh4LCB5KQogICAgLy8gKQogICAgdW5jb3ZlciAyCiAgICBjYWxsc3ViIGdldF9ncmlkX2NlbGxfdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5kb2VzX2JveF91c2VyX3JlZ2lzdHJ5X2V4aXN0KGFjY291bnQ6IGJ5dGVzKSAtPiB1aW50NjQ6CmRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NzktODEKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiB1c2VyIHJlZ2lzdHJ5IGJveCB2YWx1ZSBleGlzdHMsIGVsc2UgRmFsc2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3Qoc2VsZiwgYWNjb3VudDogQWNjb3VudCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjgyCiAgICAvLyByZXR1cm4gc2VsZi5ib3hfdXNlcl9yZWdpc3RyeS5tYXliZShhY2NvdW50KVsxXQogICAgYnl0ZWMgNCAvLyAicl8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uZG9lc19ib3hfZ2FtZV9ncmlkX2V4aXN0KGdhbWVfaWQ6IHVpbnQ2NCkgLT4gdWludDY0Ogpkb2VzX2JveF9nYW1lX2dyaWRfZXhpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6ODQtODYKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiBnYW1lIGdyaWQgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZG9lc19ib3hfZ2FtZV9ncmlkX2V4aXN0KHNlbGYsIGdhbWVfaWQ6IFVJbnQ2NCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyByZXR1cm4gc2VsZi5ib3hfZ2FtZV9ncmlkLm1heWJlKGdhbWVfaWQpWzFdCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJ5dGVjXzMgLy8gImdfIgogICAgc3dhcAogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBidXJ5IDEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5kb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0KGdhbWVfaWQ6IHVpbnQ2NCkgLT4gdWludDY0Ogpkb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojg5LTkxCiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBzdGF0ZSBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBkb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0KHNlbGYsIGdhbWVfaWQ6IFVJbnQ2NCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjkyCiAgICAvLyByZXR1cm4gc2VsZi5ib3hfZ2FtZV9zdGF0ZS5tYXliZShnYW1lX2lkKVsxXQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBieXRlYyA1IC8vICJzXyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uZG9lc19ib3hfZ2FtZV9jaGFyYWN0ZXJfZXhpc3QoYWNjb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKZG9lc19ib3hfZ2FtZV9jaGFyYWN0ZXJfZXhpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6OTQtOTYKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiBnYW1lIGNoYXJhY3RlciBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBkb2VzX2JveF9nYW1lX2NoYXJhY3Rlcl9leGlzdChzZWxmLCBhY2NvdW50OiBBY2NvdW50KSAtPiBib29sOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6OTcKICAgIC8vIHJldHVybiBzZWxmLmJveF9nYW1lX2NoYXJhY3Rlci5tYXliZShhY2NvdW50KVsxXQogICAgYnl0ZWNfMiAvLyAiY18iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8ucmVhZF9ib3hfZ2FtZV9sb2JieShnYW1lX2lkOiB1aW50NjQpIC0+IGJ5dGVzOgpyZWFkX2JveF9nYW1lX2xvYmJ5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojk5LTEwMQogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBhbiBhcnJheSBvZiBhbGwgYWN0aXZlIHVzZXJzIGluIHRoZSBnYW1lIGxvYmJ5IGF0IHRpbWUgb2YgY2FsbAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgcmVhZF9ib3hfZ2FtZV9sb2JieShzZWxmLCBnYW1lX2lkOiBVSW50NjQpIC0+IHRhLkdhbWVMb2JieToKICAgIHByb3RvIDEgMQogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjEwMi0xMDMKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IGdhbWVfaWQgaW4gc2VsZi5ib3hfZ2FtZV9sb2JieSwgZXJyLkdBTUVfSURfTk9UX0ZPVU5ECiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJ5dGVjIDYgLy8gImxfIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEdhbWUgSUQgbm90IGZvdW5kLiBFbnN1cmUgdGhlIGdhbWUgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMDUtMTA2CiAgICAvLyAjIFJldHJpZXZlIGJ5dGUgYXJyYXkgb2YgY3VycmVudCB1c2VyIGFkZHJlc3NlcyBmcm9tIHRoZSBib3ggdXNpbmcgdGhlIGdhbWUgaWQgcGFyYW1ldGVyCiAgICAvLyBnYW1lX2xvYmJ5X2JfYXJyID0gc2VsZi5ib3hfZ2FtZV9sb2JieVtnYW1lX2lkXQogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX2xvYmJ5IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjEwOC0xMDkKICAgIC8vICMgRGVmaW5lIGEgZHluYW1pYyBhcnJheSB0byBhcHBlbmQgYWxsIHJlbWFpbmluZyBhY3RpdmUgdXNlcnMKICAgIC8vIHVzZXJzX2luX2xvYmJ5ID0gdGEuR2FtZUxvYmJ5KCkKICAgIHB1c2hieXRlcyAweDAwMDAKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMTEtMTEyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgdXNlcnMgYnl0ZSBhcnJheQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfbG9iYnlfYl9hcnIubGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGxlbgogICAgaW50Y18xIC8vIDAKCnJlYWRfYm94X2dhbWVfbG9iYnlfZm9yX2hlYWRlckAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjExMS0xMTIKICAgIC8vICMgSXRlcmF0ZSB0aHJvdWdoIHRoZSB1c2VycyBieXRlIGFycmF5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9sb2JieV9iX2Fyci5sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyA0CiAgICA8CiAgICBieiByZWFkX2JveF9nYW1lX2xvYmJ5X2FmdGVyX2ZvckA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTEzLTExNAogICAgLy8gIyBFeHRyYWN0IHRoZSBieXRlcyByZXByZXNlbnRpbmcgdGhlIHVzZXIgYWRkcmVzcwogICAgLy8gdXNlcl9hZGRyX2J5dGVzID0gb3AuZXh0cmFjdChnYW1lX2xvYmJ5X2JfYXJyLCBpLCBjc3QuQUREUkVTU19TSVpFKQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjExNS0xMTYKICAgIC8vICMgT25seSBhcHBlbmQgYWRkcmVzcyBpZiBpdHMgYnl0ZXMgZG8gTk9UIGVxdWFsIHRvIGEgemVyb2VkIGJ5dGUgYXJyYXkgb2Ygc2l6ZSAzMgogICAgLy8gaWYgdXNlcl9hZGRyX2J5dGVzICE9IEJ5dGVzKGNzdC5aRVJPRURfQUREUl9CWVRFUyk6CiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAhPQogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQogICAgYnogcmVhZF9ib3hfZ2FtZV9sb2JieV9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMTgKICAgIC8vIHVzZXJzX2luX2xvYmJ5LmFwcGVuZChhcmM0LkFkZHJlc3ModXNlcl9hY2NvdW50KSkKICAgIGZyYW1lX2RpZyAzCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxCgpyZWFkX2JveF9nYW1lX2xvYmJ5X2FmdGVyX2lmX2Vsc2VANDoKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMTEtMTEyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgdXNlcnMgYnl0ZSBhcnJheQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfbG9iYnlfYl9hcnIubGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMzIKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiByZWFkX2JveF9nYW1lX2xvYmJ5X2Zvcl9oZWFkZXJAMQoKcmVhZF9ib3hfZ2FtZV9sb2JieV9hZnRlcl9mb3JANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMjAtMTIxCiAgICAvLyAjIFJldHVybiB0aGUgYXJyYXkgY29udGFpbmluZyB0aGUgcmVtYWluaW5nIGFjdGl2ZSB1c2VycyBpbiB0aGUgZ2FtZSBsb2JieQogICAgLy8gcmV0dXJuIHVzZXJzX2luX2xvYmJ5CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uZ2VuZXJhdGUoKSAtPiB2b2lkOgpnZW5lcmF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMzItMTMzCiAgICAvLyAjIFNldCBHbG9iYWwgU3RhdGUgdmFyaWFibGVzIHRvIHRoZWlyIGRlZmF1bHQgc3RhcnRpbmcgdmFsdWVzCiAgICAvLyBzZWxmLmdhbWVfaWQgPSBVSW50NjQoMSkKICAgIGJ5dGVjIDcgLy8gImdhbWVfaWQiCiAgICBpbnRjXzAgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5nZXRfYm94X3VzZXJfcmVnaXN0cnkoYm94X3JfcGF5OiB1aW50NjQpIC0+IHZvaWQ6CmdldF9ib3hfdXNlcl9yZWdpc3RyeToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMzUtMTM5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBnZXRfYm94X3VzZXJfcmVnaXN0cnkoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBib3hfcl9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTQwLTE0MQogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gMiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18zIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiBncm91cCBpcyB3aXRoaW4gdmFsaWQgYm91bmRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE0MgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgbm90IGluIHNlbGYuYm94X3VzZXJfcmVnaXN0cnksIGVyci5CT1hfRk9VTkQKICAgIGJ5dGVjIDQgLy8gInJfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBCb3ggZm91bmQuIEVuc3VyZSB0aGUgYm94IGRvZXMgbm90IGV4aXN0LgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE0NS0xNDYKICAgIC8vICMgYXNzZXJ0IGJveF9yX3BheS5hbW91bnQgPT0gY3N0LkJPWF9SX0NPU1QsIGVyci5JTlNVRkZJQ0lFTlRfUEFZX0FNT1VOVAogICAgLy8gYXNzZXJ0IGJveF9yX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTQ4CiAgICAvLyBib3hfcl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTQ3LTE0OQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfcl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE1NgogICAgLy8gZXhwaXJ5X3JvdW5kPWFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCArIGNzdC5CT1hfUl9FWFBfUk9VTkRfREVMVEEpLAogICAgZ2xvYmFsIFJvdW5kCiAgICBwdXNoaW50IDMwIC8vIDMwCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTUxLTE1NwogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIHVzZXIgcmVnaXN0cnkgdy8gdGhlIHNlbmRlciBhZGRyZXNzIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfdXNlcl9yZWdpc3RyeVtUeG4uc2VuZGVyXSA9IHN0Yy5Vc2VyUmVnaXN0cnkoCiAgICAvLyAgICAgaG9zdGluZ19nYW1lPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gICAgIGdhbWVfaWQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgY29tbWl0X3JhbmRfcm91bmQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgZXhwaXJ5X3JvdW5kPWFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCArIGNzdC5CT1hfUl9FWFBfUk9VTkRfREVMVEEpLAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTUxLTE1MgogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIHVzZXIgcmVnaXN0cnkgdy8gdGhlIHNlbmRlciBhZGRyZXNzIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfdXNlcl9yZWdpc3RyeVtUeG4uc2VuZGVyXSA9IHN0Yy5Vc2VyUmVnaXN0cnkoCiAgICBieXRlYyA0IC8vICJyXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE1MS0xNTcKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSB1c2VyIHJlZ2lzdHJ5IHcvIHRoZSBzZW5kZXIgYWRkcmVzcyB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X3VzZXJfcmVnaXN0cnlbVHhuLnNlbmRlcl0gPSBzdGMuVXNlclJlZ2lzdHJ5KAogICAgLy8gICAgIGhvc3RpbmdfZ2FtZT1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICAgICBnYW1lX2lkPWFyYzQuVUludDY0KDApLAogICAgLy8gICAgIGNvbW1pdF9yYW5kX3JvdW5kPWFyYzQuVUludDY0KDApLAogICAgLy8gICAgIGV4cGlyeV9yb3VuZD1hcmM0LlVJbnQ2NChHbG9iYWwucm91bmQgKyBjc3QuQk9YX1JfRVhQX1JPVU5EX0RFTFRBKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5uZXdfZ2FtZShib3hfZ19wYXk6IHVpbnQ2NCwgYm94X3NfcGF5OiB1aW50NjQsIGJveF9jX3BheTogdWludDY0LCBib3hfbF9wYXk6IHVpbnQ2NCwgc3Rha2VfcGF5OiB1aW50NjQsIGxvYmJ5X3NpemU6IGJ5dGVzKSAtPiB2b2lkOgpuZXdfZ2FtZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxNTktMTY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBuZXdfZ2FtZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGJveF9nX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyAgICAgYm94X3NfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBib3hfY19wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gICAgIGJveF9sX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyAgICAgc3Rha2VfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBsb2JieV9zaXplOiBhcmM0LlVJbnQ4LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gNiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTY5LTE3MAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gNiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiBncm91cCBpcyB3aXRoaW4gdmFsaWQgYm91bmRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE3MgogICAgLy8gYXNzZXJ0IGJveF9nX3BheS5hbW91bnQgPj0gY3N0LkJPWF9HX0NPU1QsIGVyci5JTlNVRkZJQ0lFTlRfUEFZX0FNT1VOVAogICAgZnJhbWVfZGlnIC02CiAgICBndHhucyBBbW91bnQKICAgIHB1c2hpbnQgNTQ5MDAgLy8gNTQ5MDAKICAgID49CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IHBheW1lbnQgYW1vdW50LiBWYWx1ZSBpcyBub3QgZW5vdWdoIHRvIGNvdmVyIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxNzMKICAgIC8vIGFzc2VydCBib3hfc19wYXkuYW1vdW50ID49IGNzdC5CT1hfU19DT1NULCBlcnIuSU5TVUZGSUNJRU5UX1BBWV9BTU9VTlQKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgQW1vdW50CiAgICBwdXNoaW50IDI3NzAwIC8vIDI3NzAwCiAgICA+PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBwYXltZW50IGFtb3VudC4gVmFsdWUgaXMgbm90IGVub3VnaCB0byBjb3ZlciB0aGUgbWluaW11bSByZXF1aXJlbWVudHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTc0LTE3NQogICAgLy8gIyBhc3NlcnQgYm94X2NfcGF5LmFtb3VudCA+PSBjc3QuQk9YX0NfQ09TVCwgZXJyLklOU1VGRklDSUVOVF9QQVlfQU1PVU5UCiAgICAvLyBhc3NlcnQgYm94X2xfcGF5LmFtb3VudCA+PSBzZWxmLmNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxNzcKICAgIC8vIHZhbHVlX3NpemU9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlKSwKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzIgLy8gMzIKICAgICoKICAgIGR1cAogICAgY292ZXIgMgogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTc2CiAgICAvLyBrZXlfc2l6ZT1hcmM0LlVJbnQ4KDEwKSwKICAgIHB1c2hieXRlcyAweDBhCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTc0LTE3OAogICAgLy8gIyBhc3NlcnQgYm94X2NfcGF5LmFtb3VudCA+PSBjc3QuQk9YX0NfQ09TVCwgZXJyLklOU1VGRklDSUVOVF9QQVlfQU1PVU5UCiAgICAvLyBhc3NlcnQgYm94X2xfcGF5LmFtb3VudCA+PSBzZWxmLmNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgLy8gICAgIGtleV9zaXplPWFyYzQuVUludDgoMTApLAogICAgLy8gICAgIHZhbHVlX3NpemU9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlKSwKICAgIC8vICksIGVyci5JTlNVRkZJQ0lFTlRfUEFZX0FNT1VOVAogICAgc3dhcAogICAgY2FsbHN1YiBjYWxjX3NpbmdsZV9ib3hfY29zdAogICAgPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgcGF5bWVudCBhbW91bnQuIFZhbHVlIGlzIG5vdCBlbm91Z2ggdG8gY292ZXIgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE4NgogICAgLy8gYXNzZXJ0IGJveF9nX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtNgogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTg3CiAgICAvLyBhc3NlcnQgYm94X3NfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyLCBlcnIuSU5WQUxJRF9CT1hfUEFZX1NFTkRFUgogICAgZnJhbWVfZGlnIC01CiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gQm94IHBheW1lbnQgc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCB0cmFuc2FjdGlvbiBzZW5kZXIgYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxODgKICAgIC8vIGFzc2VydCBib3hfY19wYXkuc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5JTlZBTElEX0JPWF9QQVlfU0VOREVSCiAgICBmcmFtZV9kaWcgLTQKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCBzZW5kZXIgYWRkcmVzcyBtdXN0IG1hdGNoIHRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gYXNzZXJ0IGJveF9sX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTkwCiAgICAvLyBhc3NlcnQgc3Rha2VfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyLCBlcnIuSU5WQUxJRF9TVEFLRV9QQVlfU0VOREVSCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBTdGFrZSBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTkzCiAgICAvLyBib3hfZ19wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC02CiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTkyLTE5NAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfZ19wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE5NgogICAgLy8gYm94X3NfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE5NS0xOTcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgYm94X3NfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksIGVyci5JTlZBTElEX0JPWF9QQVlfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCByZWNlaXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxOTkKICAgIC8vIGJveF9jX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTQKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxOTgtMjAwCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGJveF9jX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCBlcnIuSU5WQUxJRF9CT1hfUEFZX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gQm94IHBheW1lbnQgcmVjZWl2ZXIgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjAyCiAgICAvLyBib3hfbF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjAxLTIwMwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfbF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gc3Rha2VfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIwNC0yMDYKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc3Rha2VfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksIGVyci5JTlZBTElEX0JPWF9QQVlfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCByZWNlaXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDkKICAgIC8vIGxvYmJ5X3NpemUgPj0gY3N0Lk1JTl9MT0JCWV9TSVpFCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hieXRlcyAweDAyCiAgICBiPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICAvLyBhbmQgbG9iYnlfc2l6ZS5uYXRpdmUgJSAyID09IDAKICAgIGJ6IG5ld19nYW1lX2Jvb2xfZmFsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIxMAogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hieXRlcyAweDA0CiAgICBiPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICAvLyBhbmQgbG9iYnlfc2l6ZS5uYXRpdmUgJSAyID09IDAKICAgIGJ6IG5ld19nYW1lX2Jvb2xfZmFsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIxMQogICAgLy8gYW5kIGxvYmJ5X3NpemUubmF0aXZlICUgMiA9PSAwCiAgICBmcmFtZV9kaWcgMAogICAgaW50Y18zIC8vIDIKICAgICUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICAvLyBhbmQgbG9iYnlfc2l6ZS5uYXRpdmUgJSAyID09IDAKICAgIGJueiBuZXdfZ2FtZV9ib29sX2ZhbHNlQDQKICAgIGludGNfMCAvLyAxCgpuZXdfZ2FtZV9ib29sX21lcmdlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjA4LTIxMgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gICAgIGFuZCBsb2JieV9zaXplIDw9IGNzdC5NQVhfTE9CQllfU0laRQogICAgLy8gICAgIGFuZCBsb2JieV9zaXplLm5hdGl2ZSAlIDIgPT0gMAogICAgLy8gKSwgZXJyLklOVkFMSURfTE9CQllfU0laRQogICAgYXNzZXJ0IC8vIEludmFsaWQgTG9iYnkgc2l6ZS4gVmFsdWUgbXVzdCBiZSBhbiBldmVuIG51bWJlciBhbmQgd2l0aGluIHBlcm1pdHRlZCBib3VuZHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE0LTIxNQogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgZ3JpZCB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfZ3JpZFtzZWxmLmdhbWVfaWRdID0gdGEuR2FtZUdyaWQuZnJvbV9ieXRlcyhjc3QuR1JJRF9aRVJPRURfQllURVMpCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNyAvLyAiZ2FtZV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lX2lkIGV4aXN0cwogICAgZHVwCiAgICBpdG9iCiAgICBieXRlY18zIC8vICJnXyIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjI0CiAgICAvLyBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuUEhBU0VfRVhQSVJZX0lOVEVSVkFMKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIHB1c2hpbnQgMTIwMCAvLyAxMjAwCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjI1CiAgICAvLyBwcml6ZV9wb3Q9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFtb3VudAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIyNgogICAgLy8gYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE5CiAgICAvLyBzdGFraW5nX2Nsb3NlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIxNy0yMjcKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSBnYW1lIHN0YXRlIHcvIHRoZSBjdXJyZW50IGdsb2JhbCBnYW1lX2lkIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtzZWxmLmdhbWVfaWRdID0gc3RjLkdhbWVTdGF0ZSgKICAgIC8vICAgICBzdGFraW5nX2Nsb3NlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICAgICAjIHF1aWNrX3BsYXlfZW5hYmxlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBxdWlja19wbGF5X2VuYWJsZWQsCiAgICAvLyAgICAgbG9iYnlfc2l6ZT1sb2JieV9zaXplLAogICAgLy8gICAgIGFjdGl2ZV9wbGF5ZXJzPWFyYzQuVUludDgoMSksCiAgICAvLyAgICAgYm94X2xfc3RhcnRfcG9zPWFyYzQuVUludDE2KGNzdC5BRERSRVNTX1NJWkUpLAogICAgLy8gICAgIGV4cGlyeV90cz1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGNzdC5QSEFTRV9FWFBJUllfSU5URVJWQUwpLAogICAgLy8gICAgIHByaXplX3BvdD1hcmM0LlVJbnQ2NChzdGFrZV9wYXkuYW1vdW50KSwKICAgIC8vICAgICBhZG1pbl9hZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjIyCiAgICAvLyBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgcHVzaGJ5dGVzIDB4MDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMTctMjI3CiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBzdGF0ZSB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19jbG9zZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgIyBxdWlja19wbGF5X2VuYWJsZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgcXVpY2tfcGxheV9lbmFibGVkLAogICAgLy8gICAgIGxvYmJ5X3NpemU9bG9iYnlfc2l6ZSwKICAgIC8vICAgICBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIGJveF9sX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIC8vICAgICBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuUEhBU0VfRVhQSVJZX0lOVEVSVkFMKSwKICAgIC8vICAgICBwcml6ZV9wb3Q9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyApCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMjMKICAgIC8vIGJveF9sX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIHB1c2hieXRlcyAweDAwMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMTctMjI3CiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBzdGF0ZSB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19jbG9zZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgIyBxdWlja19wbGF5X2VuYWJsZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgcXVpY2tfcGxheV9lbmFibGVkLAogICAgLy8gICAgIGxvYmJ5X3NpemU9bG9iYnlfc2l6ZSwKICAgIC8vICAgICBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIGJveF9sX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIC8vICAgICBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuUEhBU0VfRVhQSVJZX0lOVEVSVkFMKSwKICAgIC8vICAgICBwcml6ZV9wb3Q9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyApCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE3LTIxOAogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgc3RhdGUgdy8gdGhlIGN1cnJlbnQgZ2xvYmFsIGdhbWVfaWQgdmFsdWUgYXMga2V5CiAgICAvLyBzZWxmLmJveF9nYW1lX3N0YXRlW3NlbGYuZ2FtZV9pZF0gPSBzdGMuR2FtZVN0YXRlKAogICAgYnl0ZWMgNSAvLyAic18iCiAgICBkaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE3LTIyNwogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgc3RhdGUgdy8gdGhlIGN1cnJlbnQgZ2xvYmFsIGdhbWVfaWQgdmFsdWUgYXMga2V5CiAgICAvLyBzZWxmLmJveF9nYW1lX3N0YXRlW3NlbGYuZ2FtZV9pZF0gPSBzdGMuR2FtZVN0YXRlKAogICAgLy8gICAgIHN0YWtpbmdfY2xvc2VkPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gICAgICMgcXVpY2tfcGxheV9lbmFibGVkPWFyYzQuQm9vbChGYWxzZSksICAjIHF1aWNrX3BsYXlfZW5hYmxlZCwKICAgIC8vICAgICBsb2JieV9zaXplPWxvYmJ5X3NpemUsCiAgICAvLyAgICAgYWN0aXZlX3BsYXllcnM9YXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBib3hfbF9zdGFydF9wb3M9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSksCiAgICAvLyAgICAgZXhwaXJ5X3RzPWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgY3N0LlBIQVNFX0VYUElSWV9JTlRFUlZBTCksCiAgICAvLyAgICAgcHJpemVfcG90PWFyYzQuVUludDY0KHN0YWtlX3BheS5hbW91bnQpLAogICAgLy8gICAgIGFkbWluX2FkZHJlc3M9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gKQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIzMS0yMzQKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSBnYW1lIGxvYmJ5IHcvIHRoZSBjdXJyZW50IGdsb2JhbCBnYW1lX2lkIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9sb2JieVtzZWxmLmdhbWVfaWRdID0gb3AuYnplcm8oCiAgICAvLyAgICAgY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlCiAgICAvLyApICAjIEFzc2lnbiB6ZXJvZWQgYnl0ZXMgdG8gc3RvcmUgYWxsIHBsYXllciBhZGRyZXNzZXMgaW4gbG9iYnkgKDMyIGJ5dGVzIHBlciBwbGF5ZXIpCiAgICBmcmFtZV9kaWcgMQogICAgYnplcm8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMzEtMjMyCiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBsb2JieSB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfbG9iYnlbc2VsZi5nYW1lX2lkXSA9IG9wLmJ6ZXJvKAogICAgYnl0ZWMgNiAvLyAibF8iCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIzMS0yMzQKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSBnYW1lIGxvYmJ5IHcvIHRoZSBjdXJyZW50IGdsb2JhbCBnYW1lX2lkIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9sb2JieVtzZWxmLmdhbWVfaWRdID0gb3AuYnplcm8oCiAgICAvLyAgICAgY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlCiAgICAvLyApICAjIEFzc2lnbiB6ZXJvZWQgYnl0ZXMgdG8gc3RvcmUgYWxsIHBsYXllciBhZGRyZXNzZXMgaW4gbG9iYnkgKDMyIGJ5dGVzIHBlciBwbGF5ZXIpCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMzYtMjM3CiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBjaGFyYWN0ZXIgdy8gdGhlIHNlbmRlciBhZGRyZXNzIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9jaGFyYWN0ZXJbVHhuLnNlbmRlcl0gPSBzdGMuR2FtZUNoYXJhY3RlcigKICAgIGJ5dGVjXzIgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjM2LTI0NAogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgY2hhcmFjdGVyIHcvIHRoZSBzZW5kZXIgYWRkcmVzcyB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyW1R4bi5zZW5kZXJdID0gc3RjLkdhbWVDaGFyYWN0ZXIoCiAgICAvLyAgICAgYXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgYXJjNC5VSW50OCg2KSwKICAgIC8vICAgICBhcmM0LlVJbnQ4KDUpLAogICAgLy8gICAgIGFyYzQuVUludDgoMCksCiAgICAvLyAgICAgYXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBhcmM0LlVJbnQyNTYoMCksCiAgICAvLyApCiAgICBwdXNoYnl0ZXMgMHgwMDA2MDUwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI1MAogICAgLy8gZ2FtZV9sb2JieV9icmVmLnJlcGxhY2UoMCwgVHhuLnNlbmRlci5ieXRlcykKICAgIGludGNfMSAvLyAwCiAgICB0eG4gU2VuZGVyCiAgICBib3hfcmVwbGFjZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI1Mi0yNTMKICAgIC8vICMgSW5jcmVtZW50IGdhbWUgaWQgYnkgMSBmb3IgbmV4dCBuZXcgZ2FtZSBpbnN0YW5jZQogICAgLy8gc2VsZi5nYW1lX2lkICs9IDEKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBieXRlYyA3IC8vICJnYW1lX2lkIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKbmV3X2dhbWVfYm9vbF9mYWxzZUA0OgogICAgaW50Y18xIC8vIDAKICAgIGIgbmV3X2dhbWVfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLmNvbnRyYWN0LlNhbHZvLmNvbW1pdF90dXJuKGdhbWVfaWQ6IHVpbnQ2NCwgdHVybl9oYXNoOiBieXRlcykgLT4gdm9pZDoKY29tbWl0X3R1cm46CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjU1LTI2MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY29tbWl0X3R1cm4oCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsCiAgICAvLyAgICAgdHVybl9oYXNoOiBhcmM0LlVJbnQyNTYsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIHB1c2hieXRlcyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2MS0yNjMKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gIyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gMiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgLy8gYXNzZXJ0IGdhbWVfaWQgaW4gc2VsZi5ib3hfZ2FtZV9zdGF0ZSwgZXJyLkdBTUVfSURfTk9UX0ZPVU5ECiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGR1cAogICAgYnl0ZWMgNSAvLyAic18iCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gR2FtZSBJRCBub3QgZm91bmQuIEVuc3VyZSB0aGUgZ2FtZSB3YXMgY3JlYXRlZCBhbmQgc3RpbGwgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2NwogICAgLy8gYWNjb3VudD1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uYWN0aXZlX3BsYXllcnMubmF0aXZlLAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfc3RhdGUgZW50cnkgZXhpc3RzCiAgICBpbnRjXzMgLy8gMgogICAgZ2V0Ynl0ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjI1MS0yNTIKICAgIC8vICMgQ2FsY3VsYXRlIHRvdGFsIGJ5dGUgbGVuZ3RoIHRvIGl0ZXJhdGUgb3ZlciBiYXNlZCBvbiBwbGF5ZXIgY291bnQgYW5kIGFkZHJlc3Mgc2l6ZQogICAgLy8gZ2FtZV9sb2JieV9sZW5ndGggPSBwbGF5ZXJfY291bnQgKiBjc3QuQUREUkVTU19TSVpFCiAgICBpbnRjXzIgLy8gMzIKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9zdWJyb3V0aW5lcy5weToyNTQtMjU1CiAgICAvLyAjIEluaXRpYWxpemUgZmxhZyB0byB0cmFjayBpZiBhY2NvdW50IGlzIGZvdW5kIGluIGdhbWUKICAgIC8vIGFjY19pbl9nYW1lID0gRmFsc2UKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjU3LTI1OAogICAgLy8gIyBJdGVyYXRlIHRocm91Z2ggdGhlIGxvYmJ5IGJ5dGUgYXJyYXkgbGVuZ3RoIGluIDMyLWJ5dGUgY2h1bmtzIChvbmUgYWRkcmVzcyBwZXIgY2h1bmspCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9sb2JieV9sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZHVwCgpjb21taXRfdHVybl9mb3JfaGVhZGVyQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjU3LTI1OAogICAgLy8gIyBJdGVyYXRlIHRocm91Z2ggdGhlIGxvYmJ5IGJ5dGUgYXJyYXkgbGVuZ3RoIGluIDMyLWJ5dGUgY2h1bmtzIChvbmUgYWRkcmVzcyBwZXIgY2h1bmspCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9sb2JieV9sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyAzCiAgICA8CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfYnVyeSAwCiAgICBieiBjb21taXRfdHVybl9hZnRlcl9mb3JAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2OAogICAgLy8gYm94X2dhbWVfbG9iYnk9c2VsZi5ib3hfZ2FtZV9sb2JieSwKICAgIGJ5dGVjIDYgLy8gImxfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjI1OS0yNjAKICAgIC8vICMgRXh0cmFjdCB0aGUgMzItYnl0ZSBwbGF5ZXIgYWRkcmVzcyBhdCBzdGFydCBpbmRleCBpCiAgICAvLyBwbGF5ZXJfYWRkcl9ieXRlcyA9IG9wLmV4dHJhY3QoYm94X2dhbWVfbG9iYnlbZ2FtZV9pZF0sIGksIGNzdC5BRERSRVNTX1NJWkUpCiAgICBmcmFtZV9kaWcgMQogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgQm94TWFwIGVudHJ5IGV4aXN0cwogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMiAvLyAzMgogICAgZXh0cmFjdDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9zdWJyb3V0aW5lcy5weToyNjItMjYzCiAgICAvLyAjIENoZWNrIGlmIHRoZSBleHRyYWN0ZWQgcGxheWVyIGFkZHJlc3MgYnl0ZXMgbWF0Y2ggdXAgd2l0aCB0aGUgYWNjb3VudCBieXRlcwogICAgLy8gaWYgYWNjb3VudC5ieXRlcyA9PSBwbGF5ZXJfYWRkcl9ieXRlczoKICAgIGZyYW1lX2RpZyAyCiAgICA9PQogICAgYnogY29tbWl0X3R1cm5fYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjY0CiAgICAvLyBhY2NfaW5fZ2FtZSA9IFRydWUKICAgIGludGNfMCAvLyAxCiAgICBmcmFtZV9idXJ5IDAKCmNvbW1pdF90dXJuX2FmdGVyX2ZvckA4OgogICAgZnJhbWVfZGlnIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyNjUtMjcxCiAgICAvLyBhc3NlcnQgc3J0LmNoZWNrX2FjY19pbl9nYW1lKAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYm94X2dhbWVfbG9iYnk9c2VsZi5ib3hfZ2FtZV9sb2JieSwKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hY3RpdmVfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKSwgZXJyLlBMQVlFUl9OT1RfRk9VTkQKICAgIGFzc2VydCAvLyBQbGF5ZXIgbm90IGZvdW5kLiBFbnN1cmUgcGxheWVyIGFkZHJlc3MgaXMgaW5zaWRlIHRoZSBnYW1lIGxvYmJ5LgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI3NAogICAgLy8gc2VsZi5ib3hfZ2FtZV9jaGFyYWN0ZXJbVHhuLnNlbmRlcl0uaGFzX2NvbW1pdHRlZF90dXJuLm5hdGl2ZSAgIyBub3FhOiBFNzEyCiAgICBieXRlY18yIC8vICJjXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyIGVudHJ5IGV4aXN0cwogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyNzQtMjc1CiAgICAvLyBzZWxmLmJveF9nYW1lX2NoYXJhY3RlcltUeG4uc2VuZGVyXS5oYXNfY29tbWl0dGVkX3R1cm4ubmF0aXZlICAjIG5vcWE6IEU3MTIKICAgIC8vID09IEZhbHNlCiAgICAhCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjczLTI3NgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLmJveF9nYW1lX2NoYXJhY3RlcltUeG4uc2VuZGVyXS5oYXNfY29tbWl0dGVkX3R1cm4ubmF0aXZlICAjIG5vcWE6IEU3MTIKICAgIC8vICAgICA9PSBGYWxzZQogICAgLy8gKQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6Mjc4CiAgICAvLyBzZWxmLmJveF9nYW1lX2NoYXJhY3RlcltUeG4uc2VuZGVyXS50dXJuX2hhc2ggPSB0dXJuX2hhc2gKICAgIGJ5dGVjXzIgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX2NoYXJhY3RlciBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgcmVwbGFjZTIgNQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gc2VsZi5ib3hfZ2FtZV9jaGFyYWN0ZXJbVHhuLnNlbmRlcl0uaGFzX2NvbW1pdHRlZF90dXJuID0gYXJjNC5Cb29sKAogICAgYnl0ZWNfMiAvLyAiY18iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI3OS0yODEKICAgIC8vIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyW1R4bi5zZW5kZXJdLmhhc19jb21taXR0ZWRfdHVybiA9IGFyYzQuQm9vbCgKICAgIC8vICAgICBUcnVlICAjIG5vcWE6IEZCVDAwMwogICAgLy8gKQogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyAxCiAgICBzZXRiaXQKICAgIGJveF9wdXQKICAgIHJldHN1YgoKY29tbWl0X3R1cm5fYWZ0ZXJfaWZfZWxzZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjI1Ny0yNTgKICAgIC8vICMgSXRlcmF0ZSB0aHJvdWdoIHRoZSBsb2JieSBieXRlIGFycmF5IGxlbmd0aCBpbiAzMi1ieXRlIGNodW5rcyAob25lIGFkZHJlc3MgcGVyIGNodW5rKQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfbG9iYnlfbGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMzIKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiBjb21taXRfdHVybl9mb3JfaGVhZGVyQDIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8udXBkYXRlKCkgLT4gdm9pZDoKdXBkYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjQxNwogICAgLy8gYXNzZXJ0IFRlbXBsYXRlVmFyW2Jvb2xdKCJVUERBVEFCTEUiKSwgZXJyLlVQREFUQUJMRV9OT1RfVFJVRQogICAgaW50YyA1IC8vIFRNUExfVVBEQVRBQkxFCiAgICBhc3NlcnQgLy8gVGVtcGxhdGUgdmFyaWFibGUgJ1VQREFUQUJMRScgbmVlZHMgdG8gYmUgJ1RydWUnIGF0IGRlcGxveS10aW1lLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjQxOAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgZXJyLlNFTkRFUl9OT1RfQ1JFQVRPUgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgYXBwIGNyZWF0b3IgY2FuIGFjdCBhcyB0aGUgc2VuZGVyIGFkZHJlc3MuCiAgICByZXRzdWIK", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [752], "errorMessage": "Box found. Ensure the box does not exist."}, {"pc": [768, 914, 922, 930, 938, 946], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [760, 874, 882, 890, 898], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [474, 619, 1242], "errorMessage": "Game ID not found. Ensure the game was created and still exists."}, {"pc": [488], "errorMessage": "Index access is out of bounds"}, {"pc": [822, 832, 866], "errorMessage": "Insufficient payment amount. Value is not enough to cover the minimum requirements."}, {"pc": [973], "errorMessage": "Invalid Lobby size. Value must be an even number and within permitted bounds."}, {"pc": [742, 812], "errorMessage": "Invalid group size. Ensure number of transactions in group is within valid bounds."}, {"pc": [482], "errorMessage": "Invalid position index. Ensure index value is within valid range."}, {"pc": [129, 148, 216, 238, 251, 271, 298, 323, 348, 375, 401, 424, 440], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [117], "errorMessage": "OnCompletion is not UpdateApplication"}, {"pc": [1347], "errorMessage": "Only app creator can act as the sender address."}, {"pc": [1288], "errorMessage": "Player not found. Ensure player address is inside the game lobby."}, {"pc": [906], "errorMessage": "Stake payment sender address must match sender address."}, {"pc": [1341], "errorMessage": "Template variable 'UPDATABLE' needs to be 'True' at deploy-time."}, {"pc": [242], "errorMessage": "can only call when creating"}, {"pc": [120, 132, 151, 219, 254, 274, 301, 326, 351, 378, 404, 427, 443], "errorMessage": "can only call when not creating"}, {"pc": [485, 1272], "errorMessage": "check BoxMap entry exists"}, {"pc": [1294, 1312, 1324], "errorMessage": "check self.box_game_character entry exists"}, {"pc": [625], "errorMessage": "check self.box_game_lobby entry exists"}, {"pc": [1247], "errorMessage": "check self.box_game_state entry exists"}, {"pc": [978], "errorMessage": "check self.game_id exists"}, {"pc": [540, 854], "errorMessage": "overflow"}, {"pc": [162, 173, 184, 194, 204, 229], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "UPDATABLE": {"type": "AVMUint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class GameCharacter:
    """Struct for GameCharacter"""
    has_committed_turn: bool
    id: int
    position: int
    move_points: int
    direction: int
    turn_hash: int

@dataclasses.dataclass(frozen=True)
class GameState:
    """Struct for GameState"""
    staking_closed: bool
    lobby_size: int
    active_players: int
    box_l_start_pos: int
    expiry_ts: int
    prize_pot: int
    admin_address: str

@dataclasses.dataclass(frozen=True)
class UserRegistry:
    """Struct for UserRegistry"""
    hosting_game: bool
    game_id: int
    commit_rand_round: int
    expiry_round: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class CalcSingleBoxCostArgs:
    """Dataclass for calc_single_box_cost arguments"""
    key_size: int
    value_size: int

    @property
    def abi_method_signature(self) -> str:
        return "calc_single_box_cost(uint8,uint16)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGridCellValueByIndexArgs:
    """Dataclass for read_grid_cell_value_by_index arguments"""
    game_id: int
    i: int

    @property
    def abi_method_signature(self) -> str:
        return "read_grid_cell_value_by_index(uint64,uint8)uint8"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGridCellValueAtCoordsArgs:
    """Dataclass for read_grid_cell_value_at_coords arguments"""
    game_id: int
    x: int
    y: int

    @property
    def abi_method_signature(self) -> str:
        return "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxUserRegistryExistArgs:
    """Dataclass for does_box_user_registry_exist arguments"""
    account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "does_box_user_registry_exist(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameGridExistArgs:
    """Dataclass for does_box_game_grid_exist arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_grid_exist(uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameStateExistArgs:
    """Dataclass for does_box_game_state_exist arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_state_exist(uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameCharacterExistArgs:
    """Dataclass for does_box_game_character_exist arguments"""
    account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_character_exist(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadBoxGameLobbyArgs:
    """Dataclass for read_box_game_lobby arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_box_game_lobby(uint64)address[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetBoxUserRegistryArgs:
    """Dataclass for get_box_user_registry arguments"""
    box_r_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "get_box_user_registry(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class NewGameArgs:
    """Dataclass for new_game arguments"""
    box_g_pay: algokit_utils.AppMethodCallTransactionArgument
    box_s_pay: algokit_utils.AppMethodCallTransactionArgument
    box_c_pay: algokit_utils.AppMethodCallTransactionArgument
    box_l_pay: algokit_utils.AppMethodCallTransactionArgument
    stake_pay: algokit_utils.AppMethodCallTransactionArgument
    lobby_size: int

    @property
    def abi_method_signature(self) -> str:
        return "new_game(pay,pay,pay,pay,pay,uint8)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CommitTurnArgs:
    """Dataclass for commit_turn arguments"""
    game_id: int
    turn_hash: int

    @property
    def abi_method_signature(self) -> str:
        return "commit_turn(uint64,uint256)void"


class _SalvoUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update()void",
        }))


class SalvoParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SalvoUpdate":
        return _SalvoUpdate(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
            "args": method_args,
        }))

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
            "args": method_args,
        }))

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_user_registry_exist(account)bool",
            "args": method_args,
        }))

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_grid_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_character_exist(account)bool",
            "args": method_args,
        }))

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_lobby(uint64)address[]",
            "args": method_args,
        }))

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_user_registry(pay)void",
            "args": method_args,
        }))

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
            "args": method_args,
        }))

    def commit_turn(
        self,
        args: tuple[int, int] | CommitTurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "commit_turn(uint64,uint256)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _SalvoUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update()void",
        }))


class SalvoCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SalvoUpdateTransaction":
        return _SalvoUpdateTransaction(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
            "args": method_args,
        }))

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
            "args": method_args,
        }))

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_user_registry_exist(account)bool",
            "args": method_args,
        }))

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_grid_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_character_exist(account)bool",
            "args": method_args,
        }))

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_lobby(uint64)address[]",
            "args": method_args,
        }))

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_user_registry(pay)void",
            "args": method_args,
        }))

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
            "args": method_args,
        }))

    def commit_turn(
        self,
        args: tuple[int, int] | CommitTurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "commit_turn(uint64,uint256)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _SalvoUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update()void",
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class SalvoSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SalvoUpdateSend":
        return _SalvoUpdateSend(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_user_registry_exist(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_grid_exist(uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_character_exist(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_lobby(uint64)address[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[str]], parsed_response)

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_user_registry(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def commit_turn(
        self,
        args: tuple[int, int] | CommitTurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "commit_turn(uint64,uint256)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    game_id: int

class SalvoState:
    """Methods to access state for the current Salvo app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def game_id(self) -> int:
        """Get the current value of the game_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "UserRegistry": UserRegistry,
            "GameState": GameState,
            "GameCharacter": GameCharacter
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def box_user_registry(self) -> "_MapState[str, UserRegistry]":
        """Get values from the box_user_registry map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_user_registry",
            self._struct_classes.get("UserRegistry")
        )

    @property
    def box_game_grid(self) -> "_MapState[int, tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]":
        """Get values from the box_game_grid map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_grid",
            None
        )

    @property
    def box_game_state(self) -> "_MapState[int, GameState]":
        """Get values from the box_game_state map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_state",
            self._struct_classes.get("GameState")
        )

    @property
    def box_game_lobby(self) -> "_MapState[int, bytes]":
        """Get values from the box_game_lobby map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_lobby",
            None
        )

    @property
    def box_game_character(self) -> "_MapState[str, GameCharacter]":
        """Get values from the box_game_character map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_character",
            self._struct_classes.get("GameCharacter")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class SalvoClient:
    """Client for interacting with Salvo smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SalvoParams(self.app_client)
        self.create_transaction = SalvoCreateTransactionParams(self.app_client)
        self.send = SalvoSend(self.app_client)
        self.state = SalvoState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SalvoClient":
        return SalvoClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SalvoClient":
        return SalvoClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SalvoClient":
        return SalvoClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SalvoComposer":
        return SalvoComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calc_single_box_cost(uint8,uint16)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_gen_unix()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_grid_cell_value_by_index(uint64,uint8)uint8"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_user_registry_exist(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_grid_exist(uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_state_exist(uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_character_exist(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_box_game_lobby(uint64)address[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_box_user_registry(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["new_game(pay,pay,pay,pay,pay,uint8)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["commit_turn(uint64,uint256)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["generate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int | list[str]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SalvoMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating Salvo contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class SalvoMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Salvo contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class SalvoFactory(algokit_utils.TypedAppFactoryProtocol[SalvoMethodCallCreateParams, SalvoMethodCallUpdateParams, None]):
    """Factory for deploying and managing SalvoClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SalvoFactoryParams(self.app_factory)
        self.create_transaction = SalvoFactoryCreateTransaction(self.app_factory)
        self.send = SalvoFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SalvoMethodCallCreateParams | None = None,
        update_params: SalvoMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SalvoClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SalvoClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SalvoClient:
        """Get an app client by creator address and name"""
        return SalvoClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SalvoClient:
        """Get an app client by app ID"""
        return SalvoClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SalvoFactoryParams:
    """Parameters for creating transactions for Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SalvoFactoryCreateParams(app_factory)
        self.update = SalvoFactoryUpdateParams(app_factory)
        self.delete = SalvoFactoryDeleteParams(app_factory)

class SalvoFactoryCreateParams:
    """Parameters for 'create' operations of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calc_single_box_cost(uint8,uint16)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calc_single_box_cost(uint8,uint16)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_gen_unix(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_gen_unix()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_gen_unix()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_grid_cell_value_by_index(uint64,uint8)uint8 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_user_registry_exist(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_user_registry_exist(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_grid_exist(uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_grid_exist(uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_state_exist(uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_state_exist(uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_character_exist(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_character_exist(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_box_game_lobby(uint64)address[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_box_game_lobby(uint64)address[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_box_user_registry(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_box_user_registry(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the new_game(pay,pay,pay,pay,pay,uint8)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def commit_turn(
        self,
        args: tuple[int, int] | CommitTurnArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the commit_turn(uint64,uint256)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "commit_turn(uint64,uint256)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the generate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "generate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def update(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class SalvoFactoryUpdateParams:
    """Parameters for 'update' operations of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SalvoFactoryDeleteParams:
    """Parameters for 'delete' operations of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SalvoFactoryCreateTransaction:
    """Create transactions for Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SalvoFactoryCreateTransactionCreate(app_factory)


class SalvoFactoryCreateTransactionCreate:
    """Create new instances of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SalvoFactorySend:
    """Send calls to Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SalvoFactorySendCreate(app_factory)


class SalvoFactorySendCreate:
    """Send create calls to Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SalvoClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SalvoClient(result[0]), result[1]

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[SalvoClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the generate()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "generate()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return SalvoClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _SalvoUpdateComposer:
    def __init__(self, composer: "SalvoComposer"):
        self.composer = composer
    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.update(
                
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "update()void", v
            )
        )
        return self.composer


class SalvoComposer:
    """Composer for creating transaction groups for Salvo contract calls"""

    def __init__(self, client: "SalvoClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_SalvoUpdateComposer":
        return _SalvoUpdateComposer(self)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calc_single_box_cost(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calc_single_box_cost(uint8,uint16)uint64", v
            )
        )
        return self

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_gen_unix(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_gen_unix()uint64", v
            )
        )
        return self

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_grid_cell_value_by_index(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_grid_cell_value_by_index(uint64,uint8)uint8", v
            )
        )
        return self

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_grid_cell_value_at_coords(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8", v
            )
        )
        return self

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_user_registry_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_user_registry_exist(account)bool", v
            )
        )
        return self

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_grid_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_grid_exist(uint64)bool", v
            )
        )
        return self

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_state_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_state_exist(uint64)bool", v
            )
        )
        return self

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_character_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_character_exist(account)bool", v
            )
        )
        return self

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_box_game_lobby(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_box_game_lobby(uint64)address[]", v
            )
        )
        return self

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_box_user_registry(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_box_user_registry(pay)void", v
            )
        )
        return self

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.new_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "new_game(pay,pay,pay,pay,pay,uint8)void", v
            )
        )
        return self

    def commit_turn(
        self,
        args: tuple[int, int] | CommitTurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.commit_turn(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "commit_turn(uint64,uint256)void", v
            )
        )
        return self

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.generate(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "generate()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SalvoComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SalvoComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
