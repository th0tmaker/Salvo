# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_cost", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "i"}], "name": "read_grid_cell_value_by_index", "returns": {"type": "uint8"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "x"}, {"type": "uint8", "name": "y"}], "name": "read_grid_cell_value_at_coords", "returns": {"type": "uint8"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "account"}], "name": "does_box_user_registry_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "does_box_game_grid_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "does_box_game_state_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "account"}], "name": "does_box_game_character_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_lobby", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_r_pay"}], "name": "get_box_user_registry", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_g_pay"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_c_pay"}, {"type": "pay", "name": "box_l_pay"}, {"type": "pay", "name": "stake_pay"}, {"type": "uint8", "name": "lobby_size"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "direction"}, {"type": "uint8", "name": "action"}, {"type": "uint8", "name": "current_pos"}, {"type": "(uint8,uint8)[]", "name": "move_sequence"}, {"type": "uint64", "name": "salt"}], "name": "mimc_tester", "returns": {"type": "byte[]"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [], "name": "update", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Salvo", "state": {"keys": {"box": {}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"box_user_registry": {"keyType": "address", "valueType": "UserRegistry", "prefix": "cl8="}, "box_game_grid": {"keyType": "uint64", "valueType": "uint8[121]", "prefix": "Z18="}, "box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_lobby": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "bF8="}, "box_game_character": {"keyType": "address", "valueType": "GameCharacter", "prefix": "Y18="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"GameCharacter": [{"name": "id", "type": "uint8"}, {"name": "current_pos", "type": "uint8"}, {"name": "new_pos", "type": "uint8"}, {"name": "move_points", "type": "uint8"}, {"name": "direction", "type": "uint8"}], "GameState": [{"name": "staking_closed", "type": "bool"}, {"name": "lobby_size", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "box_l_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pot", "type": "uint64"}, {"name": "admin_address", "type": "address"}], "UserRegistry": [{"name": "hosting_game", "type": "bool"}, {"name": "game_id", "type": "uint64"}, {"name": "commit_rand_round", "type": "uint64"}, {"name": "expiry_round", "type": "uint64"}]}, "byteCode": {"approval": "CyAHAQACIMCEPQAAJgoEFR98dQEAAmdfAnJfAmNfB2dhbWVfaWQBCgJzXwJsXwMGgQExG0EAaYIOBGMzzZ0Etm0vVgSJlrs3BFOB1qgEeBX+QQQLQtEqBLv6jgEE+FBTrQQG8NEyBFviGfAEP/vKJASB6QVCBCbPnGYEoOgYcjYaAI4OAVsBSwE0ARoA/wDmAM0AsgCeAJEAewA3ABAAAiNDMRmBBBJEMRhEiAVAIkMxGRREMRhENhoBNhoCNhoDNhoENhoFiARqSRUWVwYCTFAoTFCwIkMxGRREMRhEMRaBBQlJOBAiEkQxFoEECUk4ECISRDEWgQMJSTgQIhJEMRYkCUk4ECISRDEWIglJOBAiEkQ2GgGIAmgiQzEZFEQxGEQxFiIJSTgQIhJEiAIPIkMxGRREMRgURIgB/SJDMRkURDEYRDYaAReIAW4oTFCwIkMxGRREMRhENhoBF8AciAFMKSNPAlQoTFCwIkMxGRREMRhENhoBF4gBJSkjTwJUKExQsCJDMRkURDEYRDYaAReIAP8pI08CVChMULAiQzEZFEQxGEQ2GgEXwByIANkpI08CVChMULAiQzEZFEQxGEQ2GgEXNhoCNhoDiACBKExQsCJDMRkURDEYRDYaARc2GgKIAF4oTFCwIkMxGRREMRhEIQUWKExQsCJDMRkURDEYRDYaATYaAogAJRYoTFCwIkOKAwGL/RaL/kxQSb1FAUSL/xdJgXkOREy+REwiWImKAgGL/heL/xcIgZADC4HEEwiJigIBi/4qi/+I/8SJigMBi/4XSYEKDEEAKIv/F4EKDEEAHyJEi/8XgQsLiwAIFkmTgQgORFcHAYv9Kk8CiP+QTIkjQv/eigEBK4v/UL5FAYmKAQGL/xYqTFC+RQGJigEBi/8WJwdMUL5FAYmKAQEnBIv/UL5FAYmKAQEjSYv/FicITFBJvUUBRL5MSU8CRIACAABMFSOLBYsEDEEAVIsCiwUlWEmMAIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATiwOMAUEAFIsDVwIAiwBQSRUlChZXBgJMUIwBiwGMA4sFJQiMBUL/pIsDjACJJwUiZ4mKAQAyBCQSRCsxAFC9RQEURIv/OAAxABJEi/84BzIKEkQyBoEeCBaAEQAAAAAAAAAAAAAAAAAAAAAATFArMQBQTL+JigYAMgSBBhJEi/o4CIH0rAMPRIv7OAiBtNgBD0SL/DgIgbSNAQ9Ei/04CIv/F0lOAiULSU4CFkmTgRAORFcGAicGTIj+aQ9Ei/44CEkhBA9BAVuLAoGAyrXuAQ5BAU+LAiEEGEABRyJEi/o4ADEAEkSL+zgAMQASRIv8OAAxABJEi/04ADEAEkSL/jgAMQASRIv6OAcyChJEi/s4BzIKEkSL/DgHMgoSRIv9OAcyChJEi/44BzIKEkSL/4ABAqdBAOiL/4ABBKZBAN+LACQYQADYIkQjJwVlREkWKksBUIB5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL8yB4GwCQgWiwIWMQApi/9QgAEBUIACACBQTwNQTwJQTFAnB0sCUEy/iwGvJwhPAlBJvEhJTwK/JwQxAFCABQEGFgoAvyMxALsiCCcFTGeJI0L/JSNC/raKBQEjSYAASYHqKzIMDUEAGLGBBrIQgQWyGScJsh4nCbIfI7IBs0L/34v7gAEDpkSL/IABAaZEJwQxAFC+RFcBAYv9qESL/YABeaZEgR+vSYwBSYv7UEsBi/xQUEyL/VBQjACL/iNZjAIjjAOLA4sCDEEAOIv+VwIAiwNJTgIkCyRYSVcAAUknBqZETFcBAUknBqZEiwFJTwNQiwBMUExPAlBQjAAiCIwDQv/AgRivi/9QiwBMUOYBjACJIQZEMQAyCRJEiQ==", "clear": "C4EBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [796], "errorMessage": "Box found. Ensure the does not exist already."}, {"pc": [812, 999, 1007, 1015, 1023, 1031], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [804, 959, 967, 975, 983], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [494, 664], "errorMessage": "Game ID not found. Ensure the game was created and still exists."}, {"pc": [564], "errorMessage": "Grid array coords you are trying to access are out of bounds."}, {"pc": [502], "errorMessage": "Grid array index you are trying to access is out of range."}, {"pc": [508, 1343, 1410, 1412, 1421], "errorMessage": "Index access is out of bounds"}, {"pc": [865, 875, 885, 918], "errorMessage": "Insufficient payment amount. Value is not enough to cover the minimum requirements."}, {"pc": [1058], "errorMessage": "Invalid Lobby size. Value must be an even number and within permitted bounds."}, {"pc": [787, 855], "errorMessage": "Invalid group size. Ensure number of transactions in group is within valid bounds."}, {"pc": [951], "errorMessage": "Invalid stake amount. Value must be a multiple of 1 and within permitted bounds."}, {"pc": [129, 168, 236, 258, 271, 291, 318, 343, 368, 395, 421, 444, 460], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [117], "errorMessage": "OnCompletion is not UpdateApplication"}, {"pc": [1476], "errorMessage": "Only app creator can act as the sender address."}, {"pc": [991], "errorMessage": "Stake payment sender address must match sender address."}, {"pc": [1470], "errorMessage": "Template variable 'UPDATABLE' needs to be 'True' at deploy-time."}, {"pc": [1335], "errorMessage": "action must be [0, 1]"}, {"pc": [262], "errorMessage": "can only call when creating"}, {"pc": [120, 132, 171, 239, 274, 294, 321, 346, 371, 398, 424, 447, 463], "errorMessage": "can only call when not creating"}, {"pc": [505], "errorMessage": "check BoxMap entry exists"}, {"pc": [1342], "errorMessage": "check self.box_game_character entry exists"}, {"pc": [670], "errorMessage": "check self.box_game_lobby entry exists"}, {"pc": [1063], "errorMessage": "check self.game_id exists"}, {"pc": [1349], "errorMessage": "cur pos mismatch"}, {"pc": [1356], "errorMessage": "cur pos must not exceed TOTAL_GRID_CELLS=121"}, {"pc": [1328], "errorMessage": "direction must be [0, 1, 2, 3]"}, {"pc": [580, 907], "errorMessage": "overflow"}, {"pc": [182, 193, 204, 214, 224, 249], "errorMessage": "transaction type is pay"}, {"pc": [1419], "errorMessage": "x out of range"}, {"pc": [1428], "errorMessage": "y out of range"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "UPDATABLE": {"type": "AVMUint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class GameCharacter:
    """Struct for GameCharacter"""
    id: int
    current_pos: int
    new_pos: int
    move_points: int
    direction: int

@dataclasses.dataclass(frozen=True)
class GameState:
    """Struct for GameState"""
    staking_closed: bool
    lobby_size: int
    active_players: int
    box_l_start_pos: int
    expiry_ts: int
    prize_pot: int
    admin_address: str

@dataclasses.dataclass(frozen=True)
class UserRegistry:
    """Struct for UserRegistry"""
    hosting_game: bool
    game_id: int
    commit_rand_round: int
    expiry_round: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class CalcSingleBoxCostArgs:
    """Dataclass for calc_single_box_cost arguments"""
    key_size: int
    value_size: int

    @property
    def abi_method_signature(self) -> str:
        return "calc_single_box_cost(uint8,uint16)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGridCellValueByIndexArgs:
    """Dataclass for read_grid_cell_value_by_index arguments"""
    game_id: int
    i: int

    @property
    def abi_method_signature(self) -> str:
        return "read_grid_cell_value_by_index(uint64,uint8)uint8"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGridCellValueAtCoordsArgs:
    """Dataclass for read_grid_cell_value_at_coords arguments"""
    game_id: int
    x: int
    y: int

    @property
    def abi_method_signature(self) -> str:
        return "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxUserRegistryExistArgs:
    """Dataclass for does_box_user_registry_exist arguments"""
    account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "does_box_user_registry_exist(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameGridExistArgs:
    """Dataclass for does_box_game_grid_exist arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_grid_exist(uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameStateExistArgs:
    """Dataclass for does_box_game_state_exist arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_state_exist(uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameCharacterExistArgs:
    """Dataclass for does_box_game_character_exist arguments"""
    account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_character_exist(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadBoxGameLobbyArgs:
    """Dataclass for read_box_game_lobby arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_box_game_lobby(uint64)address[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetBoxUserRegistryArgs:
    """Dataclass for get_box_user_registry arguments"""
    box_r_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "get_box_user_registry(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class NewGameArgs:
    """Dataclass for new_game arguments"""
    box_g_pay: algokit_utils.AppMethodCallTransactionArgument
    box_s_pay: algokit_utils.AppMethodCallTransactionArgument
    box_c_pay: algokit_utils.AppMethodCallTransactionArgument
    box_l_pay: algokit_utils.AppMethodCallTransactionArgument
    stake_pay: algokit_utils.AppMethodCallTransactionArgument
    lobby_size: int

    @property
    def abi_method_signature(self) -> str:
        return "new_game(pay,pay,pay,pay,pay,uint8)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MimcTesterArgs:
    """Dataclass for mimc_tester arguments"""
    direction: int
    action: int
    current_pos: int
    move_sequence: list[tuple[int, int]]
    salt: int

    @property
    def abi_method_signature(self) -> str:
        return "mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]"


class _SalvoUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update()void",
        }))


class SalvoParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SalvoUpdate":
        return _SalvoUpdate(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
            "args": method_args,
        }))

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
            "args": method_args,
        }))

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_user_registry_exist(account)bool",
            "args": method_args,
        }))

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_grid_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_character_exist(account)bool",
            "args": method_args,
        }))

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_lobby(uint64)address[]",
            "args": method_args,
        }))

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_user_registry(pay)void",
            "args": method_args,
        }))

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
            "args": method_args,
        }))

    def mimc_tester(
        self,
        args: tuple[int, int, int, list[tuple[int, int]], int] | MimcTesterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _SalvoUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update()void",
        }))


class SalvoCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SalvoUpdateTransaction":
        return _SalvoUpdateTransaction(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
            "args": method_args,
        }))

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
            "args": method_args,
        }))

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_user_registry_exist(account)bool",
            "args": method_args,
        }))

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_grid_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }))

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_character_exist(account)bool",
            "args": method_args,
        }))

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_lobby(uint64)address[]",
            "args": method_args,
        }))

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_user_registry(pay)void",
            "args": method_args,
        }))

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
            "args": method_args,
        }))

    def mimc_tester(
        self,
        args: tuple[int, int, int, list[tuple[int, int]], int] | MimcTesterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _SalvoUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update()void",
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class SalvoSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SalvoUpdateSend":
        return _SalvoUpdateSend(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_user_registry_exist(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_grid_exist(uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_character_exist(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_lobby(uint64)address[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[str]], parsed_response)

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_user_registry(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mimc_tester(
        self,
        args: tuple[int, int, int, list[tuple[int, int]], int] | MimcTesterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bytes]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bytes], parsed_response)

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    game_id: int

class SalvoState:
    """Methods to access state for the current Salvo app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def game_id(self) -> int:
        """Get the current value of the game_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "UserRegistry": UserRegistry,
            "GameState": GameState,
            "GameCharacter": GameCharacter
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def box_user_registry(self) -> "_MapState[str, UserRegistry]":
        """Get values from the box_user_registry map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_user_registry",
            self._struct_classes.get("UserRegistry")
        )

    @property
    def box_game_grid(self) -> "_MapState[int, tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]":
        """Get values from the box_game_grid map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_grid",
            None
        )

    @property
    def box_game_state(self) -> "_MapState[int, GameState]":
        """Get values from the box_game_state map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_state",
            self._struct_classes.get("GameState")
        )

    @property
    def box_game_lobby(self) -> "_MapState[int, bytes]":
        """Get values from the box_game_lobby map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_lobby",
            None
        )

    @property
    def box_game_character(self) -> "_MapState[str, GameCharacter]":
        """Get values from the box_game_character map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_character",
            self._struct_classes.get("GameCharacter")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class SalvoClient:
    """Client for interacting with Salvo smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SalvoParams(self.app_client)
        self.create_transaction = SalvoCreateTransactionParams(self.app_client)
        self.send = SalvoSend(self.app_client)
        self.state = SalvoState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SalvoClient":
        return SalvoClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SalvoClient":
        return SalvoClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SalvoClient":
        return SalvoClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SalvoComposer":
        return SalvoComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calc_single_box_cost(uint8,uint16)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_gen_unix()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_grid_cell_value_by_index(uint64,uint8)uint8"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_user_registry_exist(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_grid_exist(uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_state_exist(uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_character_exist(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_box_game_lobby(uint64)address[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_box_user_registry(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["new_game(pay,pay,pay,pay,pay,uint8)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bytes | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["generate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | bytes | int | list[str]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SalvoMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating Salvo contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class SalvoMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Salvo contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class SalvoFactory(algokit_utils.TypedAppFactoryProtocol[SalvoMethodCallCreateParams, SalvoMethodCallUpdateParams, None]):
    """Factory for deploying and managing SalvoClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SalvoFactoryParams(self.app_factory)
        self.create_transaction = SalvoFactoryCreateTransaction(self.app_factory)
        self.send = SalvoFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SalvoMethodCallCreateParams | None = None,
        update_params: SalvoMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SalvoClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SalvoClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SalvoClient:
        """Get an app client by creator address and name"""
        return SalvoClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SalvoClient:
        """Get an app client by app ID"""
        return SalvoClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SalvoFactoryParams:
    """Parameters for creating transactions for Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SalvoFactoryCreateParams(app_factory)
        self.update = SalvoFactoryUpdateParams(app_factory)
        self.delete = SalvoFactoryDeleteParams(app_factory)

class SalvoFactoryCreateParams:
    """Parameters for 'create' operations of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calc_single_box_cost(uint8,uint16)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calc_single_box_cost(uint8,uint16)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_gen_unix(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_gen_unix()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_gen_unix()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_grid_cell_value_by_index(uint64,uint8)uint8 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_grid_cell_value_by_index(uint64,uint8)uint8",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_user_registry_exist(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_user_registry_exist(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_grid_exist(uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_grid_exist(uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_state_exist(uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_state_exist(uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_character_exist(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_character_exist(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_box_game_lobby(uint64)address[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_box_game_lobby(uint64)address[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_box_user_registry(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_box_user_registry(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the new_game(pay,pay,pay,pay,pay,uint8)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "new_game(pay,pay,pay,pay,pay,uint8)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mimc_tester(
        self,
        args: tuple[int, int, int, list[tuple[int, int]], int] | MimcTesterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the generate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "generate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def update(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class SalvoFactoryUpdateParams:
    """Parameters for 'update' operations of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SalvoFactoryDeleteParams:
    """Parameters for 'delete' operations of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SalvoFactoryCreateTransaction:
    """Create transactions for Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SalvoFactoryCreateTransactionCreate(app_factory)


class SalvoFactoryCreateTransactionCreate:
    """Create new instances of Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SalvoFactorySend:
    """Send calls to Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SalvoFactorySendCreate(app_factory)


class SalvoFactorySendCreate:
    """Send create calls to Salvo contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SalvoClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SalvoClient(result[0]), result[1]

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[SalvoClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the generate()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "generate()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return SalvoClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _SalvoUpdateComposer:
    def __init__(self, composer: "SalvoComposer"):
        self.composer = composer
    def update(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.update(
                
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "update()void", v
            )
        )
        return self.composer


class SalvoComposer:
    """Composer for creating transaction groups for Salvo contract calls"""

    def __init__(self, client: "SalvoClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_SalvoUpdateComposer":
        return _SalvoUpdateComposer(self)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calc_single_box_cost(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calc_single_box_cost(uint8,uint16)uint64", v
            )
        )
        return self

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_gen_unix(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_gen_unix()uint64", v
            )
        )
        return self

    def read_grid_cell_value_by_index(
        self,
        args: tuple[int, int] | ReadGridCellValueByIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_grid_cell_value_by_index(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_grid_cell_value_by_index(uint64,uint8)uint8", v
            )
        )
        return self

    def read_grid_cell_value_at_coords(
        self,
        args: tuple[int, int, int] | ReadGridCellValueAtCoordsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_grid_cell_value_at_coords(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8", v
            )
        )
        return self

    def does_box_user_registry_exist(
        self,
        args: tuple[str | bytes] | DoesBoxUserRegistryExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_user_registry_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_user_registry_exist(account)bool", v
            )
        )
        return self

    def does_box_game_grid_exist(
        self,
        args: tuple[int] | DoesBoxGameGridExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_grid_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_grid_exist(uint64)bool", v
            )
        )
        return self

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_state_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_state_exist(uint64)bool", v
            )
        )
        return self

    def does_box_game_character_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameCharacterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_character_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_character_exist(account)bool", v
            )
        )
        return self

    def read_box_game_lobby(
        self,
        args: tuple[int] | ReadBoxGameLobbyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_box_game_lobby(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_box_game_lobby(uint64)address[]", v
            )
        )
        return self

    def get_box_user_registry(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxUserRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_box_user_registry(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_box_user_registry(pay)void", v
            )
        )
        return self

    def new_game(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, int] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.new_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "new_game(pay,pay,pay,pay,pay,uint8)void", v
            )
        )
        return self

    def mimc_tester(
        self,
        args: tuple[int, int, int, list[tuple[int, int]], int] | MimcTesterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mimc_tester(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mimc_tester(uint8,uint8,uint8,(uint8,uint8)[],uint64)byte[]", v
            )
        )
        return self

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "SalvoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.generate(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "generate()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SalvoComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SalvoComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
