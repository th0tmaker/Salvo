{
    "name": "Salvo",
    "structs": {
        "GameCharacter": [
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "position",
                "type": "uint8"
            },
            {
                "name": "move_points",
                "type": "uint8"
            },
            {
                "name": "new_pos",
                "type": "uint8"
            },
            {
                "name": "direction",
                "type": "uint8"
            }
        ],
        "GameState": [
            {
                "name": "staking_closed",
                "type": "bool"
            },
            {
                "name": "lobby_size",
                "type": "uint8"
            },
            {
                "name": "active_players",
                "type": "uint8"
            },
            {
                "name": "box_l_start_pos",
                "type": "uint16"
            },
            {
                "name": "expiry_ts",
                "type": "uint64"
            },
            {
                "name": "prize_pot",
                "type": "uint64"
            },
            {
                "name": "admin_address",
                "type": "address"
            }
        ],
        "UserRegistry": [
            {
                "name": "hosting_game",
                "type": "bool"
            },
            {
                "name": "game_id",
                "type": "uint64"
            },
            {
                "name": "commit_rand_round",
                "type": "uint64"
            },
            {
                "name": "expiry_round",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_cost",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_grid_cell_value_by_index",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_grid_cell_value_at_coords",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "x"
                },
                {
                    "type": "uint8",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_user_registry_exist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_grid_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_state_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_character_exist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_box_game_lobby",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_user_registry",
            "args": [
                {
                    "type": "pay",
                    "name": "box_r_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "new_game",
            "args": [
                {
                    "type": "pay",
                    "name": "box_g_pay"
                },
                {
                    "type": "pay",
                    "name": "box_s_pay"
                },
                {
                    "type": "pay",
                    "name": "box_c_pay"
                },
                {
                    "type": "pay",
                    "name": "box_l_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                },
                {
                    "type": "uint8",
                    "name": "lobby_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mimc_tester",
            "args": [
                {
                    "type": "(uint8,uint8)",
                    "name": "position"
                },
                {
                    "type": "(uint8,uint8)[]",
                    "name": "movement"
                },
                {
                    "type": "uint8",
                    "name": "action"
                },
                {
                    "type": "uint8",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "salt"
                }
            ],
            "returns": {
                "type": "(uint8,uint8)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "game_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2FtZV9pZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_user_registry": {
                    "keyType": "address",
                    "valueType": "UserRegistry",
                    "prefix": "cl8="
                },
                "box_game_grid": {
                    "keyType": "uint64",
                    "valueType": "uint8[121]",
                    "prefix": "Z18="
                },
                "box_game_state": {
                    "keyType": "uint64",
                    "valueType": "GameState",
                    "prefix": "c18="
                },
                "box_game_lobby": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "bF8="
                },
                "box_game_character": {
                    "keyType": "address",
                    "valueType": "GameCharacter",
                    "prefix": "Y18="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1827
                    ],
                    "errorMessage": "Action overflow. Ensure action index is within valid range."
                },
                {
                    "pc": [
                        1246
                    ],
                    "errorMessage": "Box found. Ensure the does not exist already."
                },
                {
                    "pc": [
                        1262,
                        1452,
                        1460,
                        1468,
                        1476,
                        1484
                    ],
                    "errorMessage": "Box payment receiver address must match application address."
                },
                {
                    "pc": [
                        1254,
                        1412,
                        1420,
                        1428,
                        1436
                    ],
                    "errorMessage": "Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        1834
                    ],
                    "errorMessage": "Direction overflow. Ensure direction index is within valid range."
                },
                {
                    "pc": [
                        980,
                        1112
                    ],
                    "errorMessage": "Game ID not found. Ensure the game was created and still exists."
                },
                {
                    "pc": [
                        513,
                        521,
                        686,
                        795,
                        908,
                        994,
                        1777,
                        1782,
                        1798,
                        1809,
                        1860,
                        1865,
                        1873,
                        1921,
                        2011
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        1316,
                        1326,
                        1336,
                        1371
                    ],
                    "errorMessage": "Insufficient payment amount. Value is not enough to cover the minimum requirements."
                },
                {
                    "pc": [
                        1511
                    ],
                    "errorMessage": "Invalid Lobby size. Value must be an even number and within permitted bounds."
                },
                {
                    "pc": [
                        1236,
                        1306
                    ],
                    "errorMessage": "Invalid group size. Ensure number of transactions in group is within valid bounds."
                },
                {
                    "pc": [
                        495
                    ],
                    "errorMessage": "Invalid position coordinates. Ensure boh row and column indices are within valid range."
                },
                {
                    "pc": [
                        988
                    ],
                    "errorMessage": "Invalid position index. Ensure index value is within valid range."
                },
                {
                    "pc": [
                        1404
                    ],
                    "errorMessage": "Invalid stake amount. Value must be a multiple of 1 and within permitted bounds."
                },
                {
                    "pc": [
                        1821
                    ],
                    "errorMessage": "Movement overflow. Ensure movement length (num of indicies) is within valid range."
                },
                {
                    "pc": [
                        129,
                        161,
                        229,
                        251,
                        264,
                        284,
                        311,
                        336,
                        361,
                        388,
                        414,
                        437,
                        453
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        117
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        2051
                    ],
                    "errorMessage": "Only app creator can act as the sender address."
                },
                {
                    "pc": [
                        1802
                    ],
                    "errorMessage": "Position mismatch. Position value must be equal to expected corresponding state value."
                },
                {
                    "pc": [
                        1444
                    ],
                    "errorMessage": "Stake payment sender address must match sender address."
                },
                {
                    "pc": [
                        2045
                    ],
                    "errorMessage": "Template variable 'UPDATABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        255
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        120,
                        132,
                        164,
                        232,
                        267,
                        287,
                        314,
                        339,
                        364,
                        391,
                        417,
                        440,
                        456
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        991
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        1797,
                        1808
                    ],
                    "errorMessage": "check self.box_game_character entry exists"
                },
                {
                    "pc": [
                        1118
                    ],
                    "errorMessage": "check self.box_game_lobby entry exists"
                },
                {
                    "pc": [
                        1516
                    ],
                    "errorMessage": "check self.game_id exists"
                },
                {
                    "pc": [
                        1933
                    ],
                    "errorMessage": "invalid move in move_sequence"
                },
                {
                    "pc": [
                        550,
                        640,
                        704,
                        748,
                        813,
                        861,
                        926,
                        961,
                        1359
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        175,
                        186,
                        197,
                        207,
                        217,
                        242
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "UPDATABLE": {
            "type": "AVMUint64"
        }
    }
}