{
    "name": "Salvo",
    "structs": {
        "GameCharacter": [
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "current_pos",
                "type": "uint8"
            },
            {
                "name": "new_pos",
                "type": "uint8"
            },
            {
                "name": "move_points",
                "type": "uint8"
            },
            {
                "name": "direction",
                "type": "uint8"
            }
        ],
        "GameState": [
            {
                "name": "staking_closed",
                "type": "bool"
            },
            {
                "name": "lobby_size",
                "type": "uint8"
            },
            {
                "name": "active_players",
                "type": "uint8"
            },
            {
                "name": "box_l_start_pos",
                "type": "uint16"
            },
            {
                "name": "expiry_ts",
                "type": "uint64"
            },
            {
                "name": "prize_pot",
                "type": "uint64"
            },
            {
                "name": "admin_address",
                "type": "address"
            }
        ],
        "UserRegistry": [
            {
                "name": "hosting_game",
                "type": "bool"
            },
            {
                "name": "game_id",
                "type": "uint64"
            },
            {
                "name": "commit_rand_round",
                "type": "uint64"
            },
            {
                "name": "expiry_round",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_cost",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_grid_cell_value_by_index",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_grid_cell_value_at_coords",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "x"
                },
                {
                    "type": "uint8",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_user_registry_exist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_grid_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_state_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_character_exist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_box_game_lobby",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_user_registry",
            "args": [
                {
                    "type": "pay",
                    "name": "box_r_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "new_game",
            "args": [
                {
                    "type": "pay",
                    "name": "box_g_pay"
                },
                {
                    "type": "pay",
                    "name": "box_s_pay"
                },
                {
                    "type": "pay",
                    "name": "box_c_pay"
                },
                {
                    "type": "pay",
                    "name": "box_l_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                },
                {
                    "type": "uint8",
                    "name": "lobby_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mimc_tester",
            "args": [
                {
                    "type": "uint8",
                    "name": "direction"
                },
                {
                    "type": "uint8",
                    "name": "action"
                },
                {
                    "type": "uint8",
                    "name": "current_pos"
                },
                {
                    "type": "(uint8,uint8)[]",
                    "name": "move_sequence"
                },
                {
                    "type": "uint64",
                    "name": "salt"
                }
            ],
            "returns": {
                "type": "(bool,bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "game_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2FtZV9pZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_user_registry": {
                    "keyType": "address",
                    "valueType": "UserRegistry",
                    "prefix": "cl8="
                },
                "box_game_grid": {
                    "keyType": "uint64",
                    "valueType": "uint8[121]",
                    "prefix": "Z18="
                },
                "box_game_state": {
                    "keyType": "uint64",
                    "valueType": "GameState",
                    "prefix": "c18="
                },
                "box_game_lobby": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "bF8="
                },
                "box_game_character": {
                    "keyType": "address",
                    "valueType": "GameCharacter",
                    "prefix": "Y18="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        845
                    ],
                    "errorMessage": "Box found. Ensure the does not exist already."
                },
                {
                    "pc": [
                        861,
                        1050,
                        1058,
                        1066,
                        1074,
                        1082
                    ],
                    "errorMessage": "Box payment receiver address must match application address."
                },
                {
                    "pc": [
                        853,
                        1010,
                        1018,
                        1026,
                        1034
                    ],
                    "errorMessage": "Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        578,
                        710
                    ],
                    "errorMessage": "Game ID not found. Ensure the game was created and still exists."
                },
                {
                    "pc": [
                        539
                    ],
                    "errorMessage": "Grid array coords you are trying to access are out of bounds."
                },
                {
                    "pc": [
                        586
                    ],
                    "errorMessage": "Grid array index you are trying to access is out of range."
                },
                {
                    "pc": [
                        592,
                        1395,
                        1462,
                        1464,
                        1468
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        914,
                        924,
                        934,
                        969
                    ],
                    "errorMessage": "Insufficient payment amount. Value is not enough to cover the minimum requirements."
                },
                {
                    "pc": [
                        1109
                    ],
                    "errorMessage": "Invalid Lobby size. Value must be an even number and within permitted bounds."
                },
                {
                    "pc": [
                        836,
                        904
                    ],
                    "errorMessage": "Invalid group size. Ensure number of transactions in group is within valid bounds."
                },
                {
                    "pc": [
                        1002
                    ],
                    "errorMessage": "Invalid stake amount. Value must be a multiple of 1 and within permitted bounds."
                },
                {
                    "pc": [
                        129,
                        204,
                        272,
                        294,
                        307,
                        327,
                        354,
                        379,
                        404,
                        431,
                        457,
                        480,
                        496
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        117
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        1764
                    ],
                    "errorMessage": "Only app creator can act as the sender address."
                },
                {
                    "pc": [
                        1042
                    ],
                    "errorMessage": "Stake payment sender address must match sender address."
                },
                {
                    "pc": [
                        1758
                    ],
                    "errorMessage": "Template variable 'UPDATABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        1387
                    ],
                    "errorMessage": "action must be [0, 1]"
                },
                {
                    "pc": [
                        298
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        120,
                        132,
                        207,
                        275,
                        310,
                        330,
                        357,
                        382,
                        407,
                        434,
                        460,
                        483,
                        499
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        589
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        1394
                    ],
                    "errorMessage": "check self.box_game_character entry exists"
                },
                {
                    "pc": [
                        716
                    ],
                    "errorMessage": "check self.box_game_lobby entry exists"
                },
                {
                    "pc": [
                        1114
                    ],
                    "errorMessage": "check self.game_id exists"
                },
                {
                    "pc": [
                        1401
                    ],
                    "errorMessage": "cur pos mismatch"
                },
                {
                    "pc": [
                        1408
                    ],
                    "errorMessage": "cur pos must not exceed TOTAL_GRID_CELLS=121"
                },
                {
                    "pc": [
                        1380
                    ],
                    "errorMessage": "direction must be [0, 1, 2, 3]"
                },
                {
                    "pc": [
                        554,
                        957,
                        1533,
                        1544,
                        1586,
                        1597,
                        1631,
                        1644,
                        1686,
                        1697
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        218,
                        229,
                        240,
                        250,
                        260,
                        285
                    ],
                    "errorMessage": "transaction type is pay"
                },
                {
                    "pc": [
                        1477
                    ],
                    "errorMessage": "x out of range"
                },
                {
                    "pc": [
                        1483
                    ],
                    "errorMessage": "y out of range"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "UPDATABLE": {
            "type": "AVMUint64"
        }
    }
}