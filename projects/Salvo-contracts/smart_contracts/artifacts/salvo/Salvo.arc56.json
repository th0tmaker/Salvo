{
    "name": "Salvo",
    "structs": {
        "GameCharacter": [
            {
                "name": "has_committed_turn",
                "type": "bool"
            },
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "position",
                "type": "uint8"
            },
            {
                "name": "move_points",
                "type": "uint8"
            },
            {
                "name": "direction",
                "type": "uint8"
            },
            {
                "name": "turn_hash",
                "type": "uint256"
            }
        ],
        "GameState": [
            {
                "name": "staking_closed",
                "type": "bool"
            },
            {
                "name": "lobby_size",
                "type": "uint8"
            },
            {
                "name": "active_players",
                "type": "uint8"
            },
            {
                "name": "box_l_start_pos",
                "type": "uint16"
            },
            {
                "name": "expiry_ts",
                "type": "uint64"
            },
            {
                "name": "prize_pot",
                "type": "uint64"
            },
            {
                "name": "admin_address",
                "type": "address"
            }
        ],
        "UserRegistry": [
            {
                "name": "hosting_game",
                "type": "bool"
            },
            {
                "name": "game_id",
                "type": "uint64"
            },
            {
                "name": "commit_rand_round",
                "type": "uint64"
            },
            {
                "name": "expiry_round",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_cost",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_grid_cell_value_by_index",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_grid_cell_value_at_coords",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "x"
                },
                {
                    "type": "uint8",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_user_registry_exist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_grid_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_state_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_character_exist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_box_game_lobby",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_user_registry",
            "args": [
                {
                    "type": "pay",
                    "name": "box_r_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "new_game",
            "args": [
                {
                    "type": "pay",
                    "name": "box_g_pay"
                },
                {
                    "type": "pay",
                    "name": "box_s_pay"
                },
                {
                    "type": "pay",
                    "name": "box_c_pay"
                },
                {
                    "type": "pay",
                    "name": "box_l_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                },
                {
                    "type": "uint8",
                    "name": "lobby_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "commit_turn",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint256",
                    "name": "turn_hash"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mimc_tester",
            "args": [
                {
                    "type": "(uint8,uint8)",
                    "name": "position"
                },
                {
                    "type": "(uint8,uint8)[]",
                    "name": "movement"
                },
                {
                    "type": "uint8",
                    "name": "direction"
                },
                {
                    "type": "uint8",
                    "name": "action"
                },
                {
                    "type": "uint64",
                    "name": "salt"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "game_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2FtZV9pZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_user_registry": {
                    "keyType": "address",
                    "valueType": "UserRegistry",
                    "prefix": "cl8="
                },
                "box_game_grid": {
                    "keyType": "uint64",
                    "valueType": "uint8[121]",
                    "prefix": "Z18="
                },
                "box_game_state": {
                    "keyType": "uint64",
                    "valueType": "GameState",
                    "prefix": "c18="
                },
                "box_game_lobby": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "bF8="
                },
                "box_game_character": {
                    "keyType": "address",
                    "valueType": "GameCharacter",
                    "prefix": "Y18="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1521
                    ],
                    "errorMessage": "Action overflow. Ensure action index is within valid range."
                },
                {
                    "pc": [
                        836
                    ],
                    "errorMessage": "Box found. Ensure the box does not exist."
                },
                {
                    "pc": [
                        852,
                        999,
                        1007,
                        1015,
                        1023,
                        1031
                    ],
                    "errorMessage": "Box payment receiver address must match application address."
                },
                {
                    "pc": [
                        844,
                        959,
                        967,
                        975,
                        983
                    ],
                    "errorMessage": "Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        1528
                    ],
                    "errorMessage": "Direction overflow. Ensure direction index is within valid range."
                },
                {
                    "pc": [
                        568,
                        700,
                        1326
                    ],
                    "errorMessage": "Game ID not found. Ensure the game was created and still exists."
                },
                {
                    "pc": [
                        582,
                        1471,
                        1476,
                        1492,
                        1503,
                        1550,
                        1555,
                        1559,
                        1572,
                        1580,
                        1744,
                        1851,
                        1962,
                        2016
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        906,
                        916,
                        951
                    ],
                    "errorMessage": "Insufficient payment amount. Value is not enough to cover the minimum requirements."
                },
                {
                    "pc": [
                        1058
                    ],
                    "errorMessage": "Invalid Lobby size. Value must be an even number and within permitted bounds."
                },
                {
                    "pc": [
                        826,
                        896
                    ],
                    "errorMessage": "Invalid group size. Ensure number of transactions in group is within valid bounds."
                },
                {
                    "pc": [
                        2028
                    ],
                    "errorMessage": "Invalid move sequence. Ensure coordinate entries within the movement array are valid path cells."
                },
                {
                    "pc": [
                        525
                    ],
                    "errorMessage": "Invalid position coordinates. Ensure boh row and column indices are within valid range."
                },
                {
                    "pc": [
                        576
                    ],
                    "errorMessage": "Invalid position index. Ensure index value is within valid range."
                },
                {
                    "pc": [
                        1515
                    ],
                    "errorMessage": "Movement overflow. Ensure movement length (num of indicies) is within valid range."
                },
                {
                    "pc": [
                        136,
                        172,
                        191,
                        259,
                        281,
                        294,
                        314,
                        341,
                        366,
                        391,
                        418,
                        444,
                        467,
                        483
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        124
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        2238
                    ],
                    "errorMessage": "Only app creator can act as the sender address."
                },
                {
                    "pc": [
                        1374
                    ],
                    "errorMessage": "Player not found. Ensure player address is inside the game lobby."
                },
                {
                    "pc": [
                        1496
                    ],
                    "errorMessage": "Position mismatch. Position value must be equal to expected corresponding state value."
                },
                {
                    "pc": [
                        991
                    ],
                    "errorMessage": "Stake payment sender address must match sender address."
                },
                {
                    "pc": [
                        2232
                    ],
                    "errorMessage": "Template variable 'UPDATABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        285
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        127,
                        139,
                        175,
                        194,
                        262,
                        297,
                        317,
                        344,
                        369,
                        394,
                        421,
                        447,
                        470,
                        486
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        579,
                        1357
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        1380,
                        1398,
                        1410,
                        1491,
                        1502
                    ],
                    "errorMessage": "check self.box_game_character entry exists"
                },
                {
                    "pc": [
                        706
                    ],
                    "errorMessage": "check self.box_game_lobby entry exists"
                },
                {
                    "pc": [
                        1331
                    ],
                    "errorMessage": "check self.box_game_state entry exists"
                },
                {
                    "pc": [
                        1063
                    ],
                    "errorMessage": "check self.game_id exists"
                },
                {
                    "pc": [
                        549,
                        939,
                        1612,
                        1700,
                        1762,
                        1806,
                        1869,
                        1917,
                        1980
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        205,
                        216,
                        227,
                        237,
                        247,
                        272
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "UPDATABLE": {
            "type": "AVMUint64"
        }
    }
}