#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 96 1 0 384 192 288 480 576 672 768 776 992
    bytecblock 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001 0x 0x01 0x068101 TMPL_VERIFICATION_KEY TMPL_ROOT_OF_UNITY
    // contracts/verifier.algo.ts:134
    // export class LagrangeWitnessCalculator extends Contract {
    txn NumAppArgs
    bz main_after_if_else@7
    pushbytes 0x87396824 // method "calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256)"
    txna ApplicationArgs 0
    match main_calculateLagrangeWitness_route@3

main_after_if_else@7:
    err

main_calculateLagrangeWitness_route@3:
    // contracts/verifier.algo.ts:135
    // @abimethod({ onCreate: "require", allowActions: "DeleteApplication" })
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    !
    assert // can only call when creating
    // contracts/verifier.algo.ts:134
    // export class LagrangeWitnessCalculator extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/verifier.algo.ts:135
    // @abimethod({ onCreate: "require", allowActions: "DeleteApplication" })
    callsub calculateLagrangeWitness
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return


// contracts/plonk_bls12381.algo.ts::frSub(a: bytes, b: bytes) -> bytes:
frSub:
    // contracts/plonk_bls12381.algo.ts:133
    // function frSub(a: biguint, b: biguint): biguint {
    proto 2 1
    // contracts/plonk_bls12381.algo.ts:135
    // const aN: biguint = a % r;
    frame_dig -2
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:136
    // const bN: biguint = b % r;
    frame_dig -1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:137
    // return (aN + r - bN) % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    swap
    b-
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    retsub


// contracts/plonk_bls12381.algo.ts::getChallenge(td: bytes) -> bytes:
getChallenge:
    // contracts/plonk_bls12381.algo.ts:517
    // export function getChallenge(td: bytes): Uint256 {
    proto 1 1
    // contracts/plonk_bls12381.algo.ts:518
    // let hash = op.keccak256(td);
    frame_dig -1
    keccak256
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:519
    // return new Uint256(frScalar(BigUint(hash)));
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    b|
    retsub


// contracts/verifier.algo.ts::LagrangeWitnessCalculator.calculateLagrangeWitness(signals: bytes, proof: bytes) -> bytes:
calculateLagrangeWitness:
    // contracts/verifier.algo.ts:135-139
    // @abimethod({ onCreate: "require", allowActions: "DeleteApplication" })
    // public calculateLagrangeWitness(
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): LagrangeWitness {
    proto 2 1
    intc_3 // 0
    dupn 15
    bytec_1 // ""
    dupn 6

calculateLagrangeWitness_while_top@2:
    pushint 175010 // 175010
    global OpcodeBudget
    >
    bz calculateLagrangeWitness_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_3 // 0x068101
    itxn_field ApprovalProgram
    bytec_3 // 0x068101
    itxn_field ClearStateProgram
    intc_3 // 0
    itxn_field Fee
    itxn_submit
    b calculateLagrangeWitness_while_top@2

calculateLagrangeWitness_after_while@7:
    // contracts/verifier.algo.ts:143
    // const vk = decodeVk(vkBytes);
    bytec 4 // TMPL_VERIFICATION_KEY
    // contracts/plonk_bls12381.algo.ts:301
    // Qm: vkBytes.slice(0, 96).toFixed({ length: 96 }),
    dup
    len
    intc_3 // 0
    dig 1
    >=
    intc_3 // 0
    dig 2
    uncover 2
    select
    intc_1 // 96
    dig 2
    >=
    intc_1 // 96
    dig 3
    uncover 2
    select
    dig 3
    uncover 2
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:302
    // Ql: vkBytes.slice(96, 192).toFixed({ length: 96 }),
    intc 5 // 192
    dig 3
    >=
    intc 5 // 192
    dig 4
    uncover 2
    select
    dig 4
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:303
    // Qr: vkBytes.slice(192, 288).toFixed({ length: 96 }),
    intc 6 // 288
    dig 4
    >=
    intc 6 // 288
    dig 5
    uncover 2
    select
    dig 5
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:304
    // Qo: vkBytes.slice(288, 384).toFixed({ length: 96 }),
    intc 4 // 384
    dig 5
    >=
    intc 4 // 384
    dig 6
    uncover 2
    select
    dig 6
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:305
    // Qc: vkBytes.slice(384, 480).toFixed({ length: 96 }),
    intc 7 // 480
    dig 6
    >=
    intc 7 // 480
    dig 7
    uncover 2
    select
    dig 7
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:306
    // S1: vkBytes.slice(480, 576).toFixed({ length: 96 }),
    intc 8 // 576
    dig 7
    >=
    intc 8 // 576
    dig 8
    uncover 2
    select
    dig 8
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:307
    // S2: vkBytes.slice(576, 672).toFixed({ length: 96 }),
    intc 9 // 672
    dig 8
    >=
    intc 9 // 672
    dig 9
    uncover 2
    select
    dig 9
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:308
    // S3: vkBytes.slice(672, 768).toFixed({ length: 96 }),
    intc 10 // 768
    dig 9
    >=
    intc 10 // 768
    dig 10
    uncover 2
    select
    dig 10
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_1 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:309
    // power: op.btoi(vkBytes.slice(768, 776)),
    intc 11 // 776
    dig 10
    >=
    intc 11 // 776
    dig 11
    uncover 2
    select
    dig 11
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:310
    // nPublic: op.btoi(vkBytes.slice(776, 784)),
    pushint 784 // 784
    dig 11
    >=
    pushint 784 // 784
    dig 12
    uncover 2
    select
    dig 12
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:311
    // k1: op.btoi(vkBytes.slice(784, 792)),
    pushint 792 // 792
    dig 12
    >=
    pushint 792 // 792
    dig 13
    uncover 2
    select
    dig 13
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:312
    // k2: op.btoi(vkBytes.slice(792, 800)),
    pushint 800 // 800
    dig 13
    >=
    pushint 800 // 800
    dig 14
    uncover 2
    select
    dig 14
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:313
    // X_2: vkBytes.slice(800, 992).toFixed({ length: 192 }),
    intc 12 // 992
    dig 14
    >=
    intc 12 // 992
    uncover 15
    uncover 2
    select
    uncover 14
    uncover 3
    uncover 2
    substring3
    dup
    len
    intc 5 // 192
    ==
    assert // Length must be 192
    // contracts/plonk_bls12381.algo.ts:300-314
    // return {
    //   Qm: vkBytes.slice(0, 96).toFixed({ length: 96 }),
    //   Ql: vkBytes.slice(96, 192).toFixed({ length: 96 }),
    //   Qr: vkBytes.slice(192, 288).toFixed({ length: 96 }),
    //   Qo: vkBytes.slice(288, 384).toFixed({ length: 96 }),
    //   Qc: vkBytes.slice(384, 480).toFixed({ length: 96 }),
    //   S1: vkBytes.slice(480, 576).toFixed({ length: 96 }),
    //   S2: vkBytes.slice(576, 672).toFixed({ length: 96 }),
    //   S3: vkBytes.slice(672, 768).toFixed({ length: 96 }),
    //   power: op.btoi(vkBytes.slice(768, 776)),
    //   nPublic: op.btoi(vkBytes.slice(776, 784)),
    //   k1: op.btoi(vkBytes.slice(784, 792)),
    //   k2: op.btoi(vkBytes.slice(792, 800)),
    //   X_2: vkBytes.slice(800, 992).toFixed({ length: 192 }),
    // };
    uncover 12
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    itob
    concat
    uncover 4
    itob
    concat
    uncover 3
    itob
    concat
    uncover 2
    itob
    concat
    swap
    concat
    dup
    frame_bury 12
    // contracts/plonk_bls12381.algo.ts:534
    // let td = op.concat(vk.Qm, vk.Ql);
    dup
    extract 0 96
    dig 1
    extract 96 96
    concat
    // contracts/plonk_bls12381.algo.ts:535
    // td = op.concat(td, vk.Qr);
    dig 1
    extract 192 96
    concat
    // contracts/plonk_bls12381.algo.ts:536
    // td = op.concat(td, vk.Qo);
    dig 1
    intc 6 // 288
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:537
    // td = op.concat(td, vk.Qc);
    dig 1
    intc 4 // 384
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:538
    // td = op.concat(td, vk.S1);
    dig 1
    intc 7 // 480
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:539
    // td = op.concat(td, vk.S2);
    dig 1
    intc 8 // 576
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:540
    // td = op.concat(td, vk.S3);
    swap
    intc 9 // 672
    intc_1 // 96
    extract3
    concat
    frame_bury 10
    // contracts/plonk_bls12381.algo.ts:542
    // for (const signal of signals) {
    frame_dig -2
    intc_3 // 0
    extract_uint16
    frame_bury 16
    intc_3 // 0
    frame_bury 19

calculateLagrangeWitness_for_header@12:
    // contracts/plonk_bls12381.algo.ts:542
    // for (const signal of signals) {
    frame_dig 19
    frame_dig 16
    <
    bz calculateLagrangeWitness_after_for@14
    frame_dig -2
    extract 2 0
    frame_dig 19
    dup
    cover 2
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:166
    // return new Uint256(a).bytes.toFixed({ length: 32 });
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    b|
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/plonk_bls12381.algo.ts:543
    // td = op.concat(td, b32(frScalar(signal.native)));
    frame_dig 10
    swap
    concat
    frame_bury 10
    intc_2 // 1
    +
    frame_bury 19
    b calculateLagrangeWitness_for_header@12

calculateLagrangeWitness_after_for@14:
    // contracts/plonk_bls12381.algo.ts:547
    // td = op.concat(td, proof.A);
    frame_dig -1
    extract 0 96
    frame_dig 10
    swap
    concat
    // contracts/plonk_bls12381.algo.ts:548
    // td = op.concat(td, proof.B);
    frame_dig -1
    extract 96 96
    concat
    // contracts/plonk_bls12381.algo.ts:549
    // td = op.concat(td, proof.C);
    frame_dig -1
    extract 192 96
    concat
    // contracts/plonk_bls12381.algo.ts:551
    // const beta = getChallenge(td);
    callsub getChallenge
    // contracts/plonk_bls12381.algo.ts:556
    // const gamma = getChallenge(td);
    dup
    callsub getChallenge
    // contracts/plonk_bls12381.algo.ts:563
    // td = op.concat(td, gamma.bytes);
    concat
    dup
    frame_bury 10
    // contracts/plonk_bls12381.algo.ts:564
    // td = op.concat(td, proof.Z);
    frame_dig -1
    intc 6 // 288
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:565
    // const alpha = getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 3
    // contracts/plonk_bls12381.algo.ts:572
    // td = op.concat(td, proof.T1);
    frame_dig -1
    intc 4 // 384
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:573
    // td = op.concat(td, proof.T2);
    frame_dig -1
    intc 7 // 480
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:574
    // td = op.concat(td, proof.T3);
    frame_dig -1
    intc 8 // 576
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:575
    // const xi = getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 14
    // contracts/plonk_bls12381.algo.ts:582
    // td = op.concat(td, proof.eval_a.bytes);
    frame_dig -1
    pushint 864 // 864
    intc_0 // 32
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:583
    // td = op.concat(td, proof.eval_b.bytes);
    frame_dig -1
    pushint 896 // 896
    intc_0 // 32
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:584
    // td = op.concat(td, proof.eval_c.bytes);
    frame_dig -1
    pushint 928 // 928
    intc_0 // 32
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:585
    // td = op.concat(td, proof.eval_s1.bytes);
    frame_dig -1
    pushint 960 // 960
    intc_0 // 32
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:586
    // td = op.concat(td, proof.eval_s2.bytes);
    frame_dig -1
    intc 12 // 992
    intc_0 // 32
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:587
    // td = op.concat(td, proof.eval_zw.bytes);
    frame_dig -1
    pushint 1024 // 1024
    intc_0 // 32
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:589
    // const v = new FixedArray<Uint256, 6>();
    intc 5 // 192
    bzero
    // contracts/plonk_bls12381.algo.ts:590
    // v[1] = getChallenge(td); // v1
    swap
    callsub getChallenge
    replace2 32 // on error: index access is out of bounds
    frame_bury 11
    // contracts/plonk_bls12381.algo.ts:591
    // for (let i: uint64 = 2; i < 6; i++) {
    pushint 2 // 2
    frame_bury 18

calculateLagrangeWitness_while_top@15:
    // contracts/plonk_bls12381.algo.ts:591
    // for (let i: uint64 = 2; i < 6; i++) {
    frame_dig 18
    pushint 6 // 6
    <
    bz calculateLagrangeWitness_after_while@17
    // contracts/plonk_bls12381.algo.ts:592
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native)); // v[i] = v1^i
    frame_dig 18
    dup
    intc_2 // 1
    -
    intc_0 // 32
    *
    frame_dig 11
    dup
    uncover 2
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    dig 1
    extract 32 32 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:592
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native)); // v[i] = v1^i
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    b|
    dig 2
    intc_0 // 32
    *
    swap
    replace3 // on error: index access is out of bounds
    frame_bury 11
    // contracts/plonk_bls12381.algo.ts:591
    // for (let i: uint64 = 2; i < 6; i++) {
    intc_2 // 1
    +
    frame_bury 18
    b calculateLagrangeWitness_while_top@15

calculateLagrangeWitness_after_while@17:
    // contracts/plonk_bls12381.algo.ts:599
    // td = op.concat(td, proof.Wxi);
    frame_dig -1
    intc 9 // 672
    intc_1 // 96
    extract3
    // contracts/plonk_bls12381.algo.ts:600
    // td = op.concat(td, proof.Wxiw);
    frame_dig -1
    intc 10 // 768
    intc_1 // 96
    extract3
    concat
    // contracts/plonk_bls12381.algo.ts:601
    // const u = getChallenge(td);
    callsub getChallenge
    // contracts/plonk_bls12381.algo.ts:603-612
    // return {
    //   beta,
    //   gamma,
    //   alpha,
    //   xi,
    //   v,
    //   u,
    //   xin: new Uint256(),
    //   zh: new Uint256(),
    // };
    frame_dig 10
    frame_dig 3
    concat
    frame_dig 14
    concat
    frame_dig 11
    concat
    swap
    concat
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    concat
    dup
    frame_bury 5
    // contracts/plonk_bls12381.algo.ts:623
    // let xin = challenges.xi.native;
    extract 96 32
    frame_bury 15
    // contracts/plonk_bls12381.algo.ts:626
    // let domainSize: uint64 = 1;
    intc_2 // 1
    frame_bury 17
    // contracts/plonk_bls12381.algo.ts:627
    // for (let i: uint64 = 0; i < vk.power; i++) {
    intc_3 // 0
    frame_bury 18

calculateLagrangeWitness_while_top@20:
    // contracts/plonk_bls12381.algo.ts:627
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig 12
    intc 10 // 768
    extract_uint64
    frame_dig 18
    >
    bz calculateLagrangeWitness_after_while@22
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 15
    dup
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 15
    // contracts/plonk_bls12381.algo.ts:629
    // domainSize *= 2;
    frame_dig 17
    pushint 2 // 2
    *
    frame_bury 17
    // contracts/plonk_bls12381.algo.ts:627
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig 18
    intc_2 // 1
    +
    frame_bury 18
    b calculateLagrangeWitness_while_top@20

calculateLagrangeWitness_after_while@22:
    // contracts/plonk_bls12381.algo.ts:632
    // challenges.xin = new Uint256(xin);
    frame_dig 15
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    dup
    frame_bury 2
    dup2
    b|
    frame_dig 5
    pushint 352 // 352
    uncover 2
    replace3
    // contracts/plonk_bls12381.algo.ts:633
    // challenges.zh = new Uint256(frSub(xin, BigUint(1))); // Vanishing polynomial Z_H(ξ) = ξ^n - 1
    uncover 2
    bytec_2 // 0x01
    callsub frSub
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    uncover 2
    b|
    intc 4 // 384
    swap
    replace3
    frame_bury 5
    // contracts/plonk_bls12381.algo.ts:635
    // const n = frScalar(BigUint(domainSize));
    frame_dig 17
    itob
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 7
    // contracts/plonk_bls12381.algo.ts:641
    // let w = BigUint(1);
    bytec_2 // 0x01
    frame_bury 13
    // contracts/plonk_bls12381.algo.ts:650
    // const L: Uint256[] = [new Uint256()];
    pushbytes 0x00010000000000000000000000000000000000000000000000000000000000000000
    frame_bury 0
    // contracts/plonk_bls12381.algo.ts:653
    // const iterations: uint64 = vk.nPublic === 0 ? 1 : vk.nPublic;
    frame_dig 12
    intc 11 // 776
    extract_uint64
    dup
    frame_bury 22
    bnz calculateLagrangeWitness_ternary_false@24
    intc_2 // 1
    frame_bury 20

calculateLagrangeWitness_ternary_merge@25:
    // contracts/plonk_bls12381.algo.ts:654
    // for (let i: uint64 = 1; i <= iterations; i++) {
    intc_2 // 1
    frame_bury 21

calculateLagrangeWitness_while_top@26:
    // contracts/plonk_bls12381.algo.ts:654
    // for (let i: uint64 = 1; i <= iterations; i++) {
    frame_dig 21
    frame_dig 20
    <=
    bz calculateLagrangeWitness_after_while@33
    // contracts/plonk_bls12381.algo.ts:658
    // frMul(w, challenges.zh.native),
    frame_dig 5
    dup
    intc 4 // 384
    intc_0 // 32
    extract3
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 13
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:659
    // frMul(n, frSub(challenges.xi.native, w)),
    uncover 2
    extract 96 32
    uncover 2
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 7
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:111
    // assert(x !== (0n as biguint), "Fr inverse of zero");
    dup
    bytec_1 // 0x
    b!=
    assert // Fr inverse of zero
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfefffffffeffffffff
    // contracts/plonk_bls12381.algo.ts:90
    // let result = 1n as biguint;
    bytec_2 // 0x01
    frame_bury 8
    // contracts/plonk_bls12381.algo.ts:91
    // let b: biguint = base % mod;
    swap
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/plonk_bls12381.algo.ts:91
    // let b: biguint = base % mod;
    b%
    frame_bury 4
    frame_bury 6

calculateLagrangeWitness_while_top@28:
    // contracts/plonk_bls12381.algo.ts:93
    // while (e > (0n as biguint)) {
    frame_dig 6
    bytec_1 // 0x
    b>
    // contracts/plonk_bls12381.algo.ts:93-99
    // while (e > (0n as biguint)) {
    //   if ((e & (1n as biguint)) !== (0n as biguint)) {
    //     result = (result * b) % mod;
    //   }
    //   b = (b * b) % mod;
    //   e = e / BigUint(2);
    // }
    bz calculateLagrangeWitness_after_while@32
    // contracts/plonk_bls12381.algo.ts:94
    // if ((e & (1n as biguint)) !== (0n as biguint)) {
    frame_dig 6
    bytec_2 // 0x01
    b&
    bytec_1 // 0x
    b!=
    frame_dig 8
    frame_bury 9
    bz calculateLagrangeWitness_after_if_else@31
    // contracts/plonk_bls12381.algo.ts:95
    // result = (result * b) % mod;
    frame_dig 8
    frame_dig 4
    b*
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/plonk_bls12381.algo.ts:95
    // result = (result * b) % mod;
    b%
    frame_bury 9

calculateLagrangeWitness_after_if_else@31:
    frame_dig 9
    frame_bury 8
    // contracts/plonk_bls12381.algo.ts:97
    // b = (b * b) % mod;
    frame_dig 4
    dup
    b*
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/plonk_bls12381.algo.ts:97
    // b = (b * b) % mod;
    b%
    frame_bury 4
    // contracts/plonk_bls12381.algo.ts:98
    // e = e / BigUint(2);
    frame_dig 6
    pushbytes 0x02
    b/
    frame_bury 6
    b calculateLagrangeWitness_while_top@28

calculateLagrangeWitness_after_while@32:
    // contracts/plonk_bls12381.algo.ts:125
    // return (aN * bInv) % r;
    frame_dig 1
    frame_dig 8
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:656-661
    // new Uint256(
    //   frDiv(
    //     frMul(w, challenges.zh.native),
    //     frMul(n, frSub(challenges.xi.native, w)),
    //   ),
    // ),
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    frame_dig 2
    b|
    // contracts/plonk_bls12381.algo.ts:655-662
    // L.push(
    //   new Uint256(
    //     frDiv(
    //       frMul(w, challenges.zh.native),
    //       frMul(n, frSub(challenges.xi.native, w)),
    //     ),
    //   ),
    // );
    frame_dig 0
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_3 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    replace2 0
    frame_bury 0
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 13
    // contracts/plonk_bls12381.algo.ts:663
    // w = frMul(w, ROOT_OF_UNITY); // Next root of unity step (ω^i)
    bytec 5 // TMPL_ROOT_OF_UNITY
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 13
    // contracts/plonk_bls12381.algo.ts:654
    // for (let i: uint64 = 1; i <= iterations; i++) {
    frame_dig 21
    intc_2 // 1
    +
    frame_bury 21
    b calculateLagrangeWitness_while_top@26

calculateLagrangeWitness_after_while@33:
    // contracts/plonk_bls12381.algo.ts:665
    // return { L, challenges };
    pushbytes 0x01a2
    frame_dig 5
    concat
    frame_dig 0
    concat
    // contracts/verifier.algo.ts:150
    // L: calc.L,
    dup
    intc_3 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    // contracts/verifier.algo.ts:151
    // xin: calc.challenges.xin,
    swap
    pushints 2 416 // 2, 416
    extract3
    dup
    pushint 352 // 352
    intc_0 // 32
    extract3
    // contracts/verifier.algo.ts:151-152
    // xin: calc.challenges.xin,
    // zh: calc.challenges.zh,
    swap
    intc 4 // 384
    intc_0 // 32
    extract3
    // contracts/verifier.algo.ts:149-153
    // return {
    //   L: calc.L,
    //   xin: calc.challenges.xin,
    //   zh: calc.challenges.zh,
    // };
    pushbytes 0x0042
    uncover 2
    concat
    swap
    concat
    swap
    concat
    frame_bury 0
    retsub

calculateLagrangeWitness_ternary_false@24:
    frame_dig 22
    frame_bury 20
    b calculateLagrangeWitness_ternary_merge@25
