# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["DeleteApplication"]}, "args": [{"type": "uint256[]", "name": "signals"}, {"type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)", "name": "proof", "struct": "Proof"}], "name": "calculateLagrangeWitness", "returns": {"type": "(uint256[],uint256,uint256)", "struct": "LagrangeWitness"}, "events": [], "readonly": false, "recommendations": {}}], "name": "LagrangeWitnessCalculator", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"LagrangeWitness": [{"name": "L", "type": "uint256[]"}, {"name": "xin", "type": "uint256"}, {"name": "zh", "type": "uint256"}], "Proof": [{"name": "A", "type": "byte[96]"}, {"name": "B", "type": "byte[96]"}, {"name": "C", "type": "byte[96]"}, {"name": "Z", "type": "byte[96]"}, {"name": "T1", "type": "byte[96]"}, {"name": "T2", "type": "byte[96]"}, {"name": "T3", "type": "byte[96]"}, {"name": "Wxi", "type": "byte[96]"}, {"name": "Wxiw", "type": "byte[96]"}, {"name": "eval_a", "type": "uint256"}, {"name": "eval_b", "type": "uint256"}, {"name": "eval_c", "type": "uint256"}, {"name": "eval_s1", "type": "uint256"}, {"name": "eval_s2", "type": "uint256"}, {"name": "eval_zw", "type": "uint256"}]}, "byteCode": {"approval": "CiANIGABAIADwAGgAuADwASgBYAGiAbgByYGIHPtp1MpnX1IMznYCAmh2AVTvaQC//5b/v////8AAAABAAEBAwaBAQAAMRtBAA2ABIc5aCQ2GgCOAQABADEZgQUSRDEYFEQ2GgE2GgKIAC+ABBUffHVMULAkQ4oCAYv+KKqL/yiqTCigTKEoqomKAQGL/wIoqkkVIg5EIq+riYoCASVHDylHBoGi1woyDA1BABaxgQayEIEFshkrsh4rsh8lsgGzQv/gJwRJFSVLAQ8lSwJPAk0jSwIPI0sDTwJNSwNPAksCUkkVIxJEIQVLAw8hBUsETwJNSwRPA0sCUkkVIxJEIQZLBA8hBksFTwJNSwVPA0sCUkkVIxJEIQRLBQ8hBEsGTwJNSwZPA0sCUkkVIxJEIQdLBg8hB0sHTwJNSwdPA0sCUkkVIxJEIQhLBw8hCEsITwJNSwhPA0sCUkkVIxJEIQlLCA8hCUsJTwJNSwlPA0sCUkkVIxJEIQpLCQ8hCksKTwJNSwpPA0sCUkkVIxJEIQtLCg8hC0sLTwJNSwtPA0sCUheBkAZLCw+BkAZLDE8CTUsMTwNLAlIXgZgGSwwPgZgGSw1PAk1LDU8DSwJSF4GgBksND4GgBksOTwJNSw5PA0sCUhchDEsODyEMTw9PAk1PDk8DTwJSSRUhBRJETwxPDFBPC1BPClBPCVBPCFBPB1BPBlBPBRZQTwQWUE8DFlBPAhZQTFBJjAxJVwBgSwFXYGBQSwFXwGBQSwEhBiNYUEsBIQQjWFBLASEHI1hQSwEhCCNYUEwhCSNYUIwKi/4lWYwQJYwTixOLEAxBACqL/lcCAIsTSU4CIgsiWCiqSRUiDkQir6tJFSISRIsKTFCMCiQIjBNC/86L/1cAYIsKTFCL/1dgYFCL/1fAYFCI/dhJiP3UUEmMCov/IQYjWFCI/cZJjAOL/yEEI1hQi/8hByNYUIv/IQgjWFCI/atJjA6L/4HgBiJYUIv/gYAHIlhQi/+BoAciWFCL/4HAByJYUIv/IQwiWFCL/4GACCJYUCEFr0yI/XJcIIwLgQKMEosSgQYMQQAtixJJJAkiC4sLSU8CIlhLAVcgIKMoqkkVIg5EIq+rSwIiC0xdjAskCIwSQv/Li/8hCSNYi/8hCiNYUIj9JYsKiwNQiw5QiwtQTFCAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQSYwFV2AgjA8kjBEljBKLDCEKW4sSDUEAGIsPSaMoqowPixGBAguMEYsSJAiMEkL/3YsPSRUiDkQir0mMAkqriwWB4AJPAl1PAiqI/HVJFSIORE8CqyEETF2MBYsRFiiqjAcqjA2AIgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAIsMIQtbSYwWQAEAJIwUJIwVixWLFA5BAL2LBUkhBCJYiw1JTwKjKKpPAldgIE8CiPwFiwejKKpMKKqMASiqSSmpRIAgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////v////8qjAhMKKqMBIwGiwYppUEALYsGKqwpqYsIjAlBAAmLCIsEoyiqjAmLCYwIiwRJoyiqjASLBoABAqKMBkL/zIsBiwijKKpJFSIORIsCq4sASU8CUEwlWSQIFlcGAlwAjACLDScFoyiqjA2LFSQIjBVC/zuAAgGiiwVQiwBQSSVZSwEVSwJOAlJMgwICoANYSYHgAiJYTCEEIliAAgBCTwJQTFBMUIwAiYsWjBRC/vw=", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [1083], "errorMessage": "Fr inverse of zero"}, {"pc": [440], "errorMessage": "Length must be 192"}, {"pc": [582], "errorMessage": "Length must be 32"}, {"pc": [161, 185, 209, 233, 257, 281, 305, 329], "errorMessage": "Length must be 96"}, {"pc": [24], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [28], "errorMessage": "can only call when creating"}, {"pc": [567, 722, 751, 754, 773], "errorMessage": "index access is out of bounds"}, {"pc": [1200], "errorMessage": "max array length exceeded"}, {"pc": [80, 574, 764, 934, 960, 1191], "errorMessage": "overflow"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"VERIFICATION_KEY": {"type": "AVMBytes"}, "ROOT_OF_UNITY": {"type": "AVMBytes"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class LagrangeWitness:
    """Struct for LagrangeWitness"""
    L: list[int]
    xin: int
    zh: int

@dataclasses.dataclass(frozen=True)
class Proof:
    """Struct for Proof"""
    A: bytes
    B: bytes
    C: bytes
    Z: bytes
    T1: bytes
    T2: bytes
    T3: bytes
    Wxi: bytes
    Wxiw: bytes
    eval_a: int
    eval_b: int
    eval_c: int
    eval_s1: int
    eval_s2: int
    eval_zw: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class CalculateLagrangeWitnessArgs:
    """Dataclass for calculate_lagrange_witness arguments"""
    signals: list[int]
    proof: Proof

    @property
    def abi_method_signature(self) -> str:
        return "calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256)"


class LagrangeWitnessCalculatorParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class LagrangeWitnessCalculatorCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class LagrangeWitnessCalculatorSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class LagrangeWitnessCalculatorState:
    """Methods to access state for the current LagrangeWitnessCalculator app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class LagrangeWitnessCalculatorClient:
    """Client for interacting with LagrangeWitnessCalculator smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LagrangeWitnessCalculatorParams(self.app_client)
        self.create_transaction = LagrangeWitnessCalculatorCreateTransactionParams(self.app_client)
        self.send = LagrangeWitnessCalculatorSend(self.app_client)
        self.state = LagrangeWitnessCalculatorState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LagrangeWitnessCalculatorClient":
        return LagrangeWitnessCalculatorClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LagrangeWitnessCalculatorClient":
        return LagrangeWitnessCalculatorClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LagrangeWitnessCalculatorClient":
        return LagrangeWitnessCalculatorClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LagrangeWitnessCalculatorComposer":
        return LagrangeWitnessCalculatorComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> LagrangeWitness | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | LagrangeWitness:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LagrangeWitnessCalculatorMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CalculateLagrangeWitnessArgs,
        str | None,
    ]
):
    """Parameters for creating LagrangeWitnessCalculator contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class LagrangeWitnessCalculatorFactory(algokit_utils.TypedAppFactoryProtocol[LagrangeWitnessCalculatorMethodCallCreateParams, None, None]):
    """Factory for deploying and managing LagrangeWitnessCalculatorClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LagrangeWitnessCalculatorFactoryParams(self.app_factory)
        self.create_transaction = LagrangeWitnessCalculatorFactoryCreateTransaction(self.app_factory)
        self.send = LagrangeWitnessCalculatorFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LagrangeWitnessCalculatorMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LagrangeWitnessCalculatorClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LagrangeWitnessCalculatorClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LagrangeWitnessCalculatorClient:
        """Get an app client by creator address and name"""
        return LagrangeWitnessCalculatorClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LagrangeWitnessCalculatorClient:
        """Get an app client by app ID"""
        return LagrangeWitnessCalculatorClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LagrangeWitnessCalculatorFactoryParams:
    """Parameters for creating transactions for LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LagrangeWitnessCalculatorFactoryCreateParams(app_factory)
        self.update = LagrangeWitnessCalculatorFactoryUpdateParams(app_factory)
        self.delete = LagrangeWitnessCalculatorFactoryDeleteParams(app_factory)

class LagrangeWitnessCalculatorFactoryCreateParams:
    """Parameters for 'create' operations of LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def calculate_lagrange_witness(
        self,
        args: tuple[list[int], Proof] | CalculateLagrangeWitnessArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class LagrangeWitnessCalculatorFactoryUpdateParams:
    """Parameters for 'update' operations of LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LagrangeWitnessCalculatorFactoryDeleteParams:
    """Parameters for 'delete' operations of LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LagrangeWitnessCalculatorFactoryCreateTransaction:
    """Create transactions for LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LagrangeWitnessCalculatorFactoryCreateTransactionCreate(app_factory)


class LagrangeWitnessCalculatorFactoryCreateTransactionCreate:
    """Create new instances of LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LagrangeWitnessCalculatorFactorySend:
    """Send calls to LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LagrangeWitnessCalculatorFactorySendCreate(app_factory)


class LagrangeWitnessCalculatorFactorySendCreate:
    """Send create calls to LagrangeWitnessCalculator contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LagrangeWitnessCalculatorClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LagrangeWitnessCalculatorClient(result[0]), result[1]

    def calculate_lagrange_witness(
        self,
        args: tuple[list[int], Proof] | CalculateLagrangeWitnessArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[LagrangeWitnessCalculatorClient, algokit_utils.AppFactoryCreateMethodCallResult[LagrangeWitness]]:
            """Creates and sends a transaction using the calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256) ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "calculateLagrangeWitness(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))(uint256[],uint256,uint256)",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(LagrangeWitness, result.abi_return)
    
            return LagrangeWitnessCalculatorClient(client), algokit_utils.AppFactoryCreateMethodCallResult[LagrangeWitness](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class LagrangeWitnessCalculatorComposer:
    """Composer for creating transaction groups for LagrangeWitnessCalculator contract calls"""

    def __init__(self, client: "LagrangeWitnessCalculatorClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LagrangeWitnessCalculatorComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LagrangeWitnessCalculatorComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
