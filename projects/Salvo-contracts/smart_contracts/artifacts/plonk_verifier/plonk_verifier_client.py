# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["CloseOut"], "create": []}, "args": [{"type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192])", "name": "_vk", "struct": "VerificationKey"}], "name": "_dummy", "returns": {"type": "void"}, "desc": "Dummy function that only exists so we can have the VerificationKey type in the generated client", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint256[]", "name": "signals"}, {"type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)", "name": "proof", "struct": "Proof"}, {"type": "(uint256[],uint256,uint256)", "name": "lw", "struct": "LagrangeWitness"}], "name": "verify", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "PlonkVerifier", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"LagrangeWitness": [{"name": "L", "type": "uint256[]"}, {"name": "xin", "type": "uint256"}, {"name": "zh", "type": "uint256"}], "Proof": [{"name": "A", "type": "byte[96]"}, {"name": "B", "type": "byte[96]"}, {"name": "C", "type": "byte[96]"}, {"name": "Z", "type": "byte[96]"}, {"name": "T1", "type": "byte[96]"}, {"name": "T2", "type": "byte[96]"}, {"name": "T3", "type": "byte[96]"}, {"name": "Wxi", "type": "byte[96]"}, {"name": "Wxiw", "type": "byte[96]"}, {"name": "eval_a", "type": "uint256"}, {"name": "eval_b", "type": "uint256"}, {"name": "eval_c", "type": "uint256"}, {"name": "eval_s1", "type": "uint256"}, {"name": "eval_s2", "type": "uint256"}, {"name": "eval_zw", "type": "uint256"}], "VerificationKey": [{"name": "Qm", "type": "byte[96]"}, {"name": "Ql", "type": "byte[96]"}, {"name": "Qr", "type": "byte[96]"}, {"name": "Qo", "type": "byte[96]"}, {"name": "Qc", "type": "byte[96]"}, {"name": "S1", "type": "byte[96]"}, {"name": "S2", "type": "byte[96]"}, {"name": "S3", "type": "byte[96]"}, {"name": "power", "type": "uint64"}, {"name": "nPublic", "type": "uint64"}, {"name": "k1", "type": "uint64"}, {"name": "k2", "type": "uint64"}, {"name": "X_2", "type": "byte[192]"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [496], "errorMessage": "A not in G1"}, {"pc": [507], "errorMessage": "B not in G1"}, {"pc": [518], "errorMessage": "C not in G1"}, {"pc": [682], "errorMessage": "Invalid number of public inputs"}, {"pc": [443], "errorMessage": "Length must be 192"}, {"pc": [107], "errorMessage": "Length must be 32"}, {"pc": [170, 194, 218, 242, 266, 290, 314, 338, 1830, 2028, 2039, 2049, 2078, 2087, 2097, 2104, 2113], "errorMessage": "Length must be 96"}, {"pc": [53], "errorMessage": "OnCompletion is not CloseOut"}, {"pc": [30], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [542], "errorMessage": "T1 not in G1"}, {"pc": [554], "errorMessage": "T2 not in G1"}, {"pc": [566], "errorMessage": "T3 not in G1"}, {"pc": [2320], "errorMessage": "Verification failed"}, {"pc": [578], "errorMessage": "Wxi not in G1"}, {"pc": [590], "errorMessage": "Wxiw not in G1"}, {"pc": [530], "errorMessage": "Z not in G1"}, {"pc": [67], "errorMessage": "can only call when creating"}, {"pc": [33, 56], "errorMessage": "can only call when not creating"}, {"pc": [603], "errorMessage": "eval_a not in Fr"}, {"pc": [616], "errorMessage": "eval_b not in Fr"}, {"pc": [629], "errorMessage": "eval_c not in Fr"}, {"pc": [642], "errorMessage": "eval_s1 not in Fr"}, {"pc": [654], "errorMessage": "eval_s2 not in Fr"}, {"pc": [667], "errorMessage": "eval_zw not in Fr"}, {"pc": [705, 809, 899, 928, 931, 950, 1117, 1274, 1292, 1777, 1787, 1796, 1805, 1814], "errorMessage": "index access is out of bounds"}, {"pc": [1231], "errorMessage": "invalid xi (equals 1)"}, {"pc": [1226], "errorMessage": "lw.L length too short"}, {"pc": [1120], "errorMessage": "lw.L not in Fr"}, {"pc": [1200], "errorMessage": "lw.xin != xi^n"}, {"pc": [1063], "errorMessage": "lw.xin not in Fr"}, {"pc": [1214], "errorMessage": "lw.zh != xi^n - 1"}, {"pc": [1074], "errorMessage": "lw.zh not in Fr"}, {"pc": [97, 121, 941, 1185, 1209, 1313, 1476], "errorMessage": "overflow"}, {"pc": [708], "errorMessage": "public signal not in Fr"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"VERIFICATION_KEY": {"type": "AVMBytes"}, "ROOT_OF_UNITY": {"type": "AVMBytes"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class LagrangeWitness:
    """Struct for LagrangeWitness"""
    L: list[int]
    xin: int
    zh: int

@dataclasses.dataclass(frozen=True)
class Proof:
    """Struct for Proof"""
    A: bytes
    B: bytes
    C: bytes
    Z: bytes
    T1: bytes
    T2: bytes
    T3: bytes
    Wxi: bytes
    Wxiw: bytes
    eval_a: int
    eval_b: int
    eval_c: int
    eval_s1: int
    eval_s2: int
    eval_zw: int

@dataclasses.dataclass(frozen=True)
class VerificationKey:
    """Struct for VerificationKey"""
    Qm: bytes
    Ql: bytes
    Qr: bytes
    Qo: bytes
    Qc: bytes
    S1: bytes
    S2: bytes
    S3: bytes
    power: int
    nPublic: int
    k1: int
    k2: int
    X_2: bytes


@dataclasses.dataclass(frozen=True, kw_only=True)
class VerifyArgs:
    """Dataclass for verify arguments"""
    signals: list[int]
    proof: Proof
    lw: LagrangeWitness

    @property
    def abi_method_signature(self) -> str:
        return "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DummyArgs:
    """Dataclass for dummy arguments"""
    _vk: VerificationKey

    @property
    def abi_method_signature(self) -> str:
        return "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void"


class _PlonkVerifierCloseOut:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def dummy(
        self,
        args: tuple[VerificationKey] | DummyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.close_out(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void",
            "args": method_args,
        }))


class PlonkVerifierParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def close_out(self) -> "_PlonkVerifierCloseOut":
        return _PlonkVerifierCloseOut(self.app_client)

    def verify(
        self,
        args: tuple[list[int], Proof, LagrangeWitness] | VerifyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _PlonkVerifierCloseOutTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def dummy(
        self,
        args: tuple[VerificationKey] | DummyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.close_out(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void",
            "args": method_args,
        }))


class PlonkVerifierCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def close_out(self) -> "_PlonkVerifierCloseOutTransaction":
        return _PlonkVerifierCloseOutTransaction(self.app_client)

    def verify(
        self,
        args: tuple[list[int], Proof, LagrangeWitness] | VerifyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _PlonkVerifierCloseOutSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def dummy(
        self,
        args: tuple[VerificationKey] | DummyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.close_out(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class PlonkVerifierSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def close_out(self) -> "_PlonkVerifierCloseOutSend":
        return _PlonkVerifierCloseOutSend(self.app_client)

    def verify(
        self,
        args: tuple[list[int], Proof, LagrangeWitness] | VerifyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class PlonkVerifierState:
    """Methods to access state for the current PlonkVerifier app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class PlonkVerifierClient:
    """Client for interacting with PlonkVerifier smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PlonkVerifierParams(self.app_client)
        self.create_transaction = PlonkVerifierCreateTransactionParams(self.app_client)
        self.send = PlonkVerifierSend(self.app_client)
        self.state = PlonkVerifierState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PlonkVerifierClient":
        return PlonkVerifierClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PlonkVerifierClient":
        return PlonkVerifierClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PlonkVerifierClient":
        return PlonkVerifierClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PlonkVerifierComposer":
        return PlonkVerifierComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PlonkVerifierBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating PlonkVerifier contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class PlonkVerifierFactory(algokit_utils.TypedAppFactoryProtocol[PlonkVerifierBareCallCreateParams, None, None]):
    """Factory for deploying and managing PlonkVerifierClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PlonkVerifierFactoryParams(self.app_factory)
        self.create_transaction = PlonkVerifierFactoryCreateTransaction(self.app_factory)
        self.send = PlonkVerifierFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PlonkVerifierBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PlonkVerifierClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PlonkVerifierClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PlonkVerifierClient:
        """Get an app client by creator address and name"""
        return PlonkVerifierClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PlonkVerifierClient:
        """Get an app client by app ID"""
        return PlonkVerifierClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PlonkVerifierFactoryParams:
    """Parameters for creating transactions for PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PlonkVerifierFactoryCreateParams(app_factory)
        self.update = PlonkVerifierFactoryUpdateParams(app_factory)
        self.delete = PlonkVerifierFactoryDeleteParams(app_factory)

class PlonkVerifierFactoryCreateParams:
    """Parameters for 'create' operations of PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def verify(
        self,
        args: tuple[list[int], Proof, LagrangeWitness] | VerifyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def dummy(
        self,
        args: tuple[VerificationKey] | DummyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the _dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class PlonkVerifierFactoryUpdateParams:
    """Parameters for 'update' operations of PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PlonkVerifierFactoryDeleteParams:
    """Parameters for 'delete' operations of PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PlonkVerifierFactoryCreateTransaction:
    """Create transactions for PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PlonkVerifierFactoryCreateTransactionCreate(app_factory)


class PlonkVerifierFactoryCreateTransactionCreate:
    """Create new instances of PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PlonkVerifierFactorySend:
    """Send calls to PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PlonkVerifierFactorySendCreate(app_factory)


class PlonkVerifierFactorySendCreate:
    """Send create calls to PlonkVerifier contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PlonkVerifierClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PlonkVerifierClient(result[0]), result[1]


class _PlonkVerifierCloseOutComposer:
    def __init__(self, composer: "PlonkVerifierComposer"):
        self.composer = composer
    def dummy(
        self,
        args: tuple[VerificationKey] | DummyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PlonkVerifierComposer":
        self.composer._composer.add_app_call_method_call(
            self.composer.client.params.close_out.dummy(
                args=args,
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void", v
            )
        )
        return self.composer


class PlonkVerifierComposer:
    """Composer for creating transaction groups for PlonkVerifier contract calls"""

    def __init__(self, client: "PlonkVerifierClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def close_out(self) -> "_PlonkVerifierCloseOutComposer":
        return _PlonkVerifierCloseOutComposer(self)

    def verify(
        self,
        args: tuple[list[int], Proof, LagrangeWitness] | VerifyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PlonkVerifierComposer":
        self._composer.add_app_call_method_call(
            self.client.params.verify(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PlonkVerifierComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PlonkVerifierComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
