/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Salvo","structs":{"GameCharacter":[{"name":"hasCommittedTurn","type":"bool"},{"name":"id","type":"uint8"},{"name":"position","type":"uint8"},{"name":"movePoints","type":"uint8"},{"name":"direction","type":"uint8"},{"name":"turnHash","type":"uint256"}],"GameState":[{"name":"stakingClosed","type":"bool"},{"name":"lobbySize","type":"uint8"},{"name":"activePlayers","type":"uint8"},{"name":"boxLStartPos","type":"uint16"},{"name":"expiryTs","type":"uint64"},{"name":"prizePot","type":"uint64"},{"name":"adminAddress","type":"address"}],"UserRegistry":[{"name":"hostingGame","type":"bool"},{"name":"gameId","type":"uint64"},{"name":"commitRandRound","type":"uint64"},{"name":"expiryRound","type":"uint64"}]},"methods":[{"name":"calc_single_box_cost","args":[{"type":"uint8","name":"key_size"},{"type":"uint16","name":"value_size"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_gen_unix","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_grid_cell_value_by_index","args":[{"type":"uint64","name":"game_id"},{"type":"uint8","name":"i"}],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_grid_cell_value_at_coords","args":[{"type":"uint64","name":"game_id"},{"type":"uint8","name":"x"},{"type":"uint8","name":"y"}],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_user_registry_exist","args":[{"type":"account","name":"account"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_grid_exist","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_state_exist","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_character_exist","args":[{"type":"account","name":"account"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_box_game_lobby","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"generate","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_box_user_registry","args":[{"type":"pay","name":"box_r_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"new_game","args":[{"type":"pay","name":"box_g_pay"},{"type":"pay","name":"box_s_pay"},{"type":"pay","name":"box_c_pay"},{"type":"pay","name":"box_l_pay"},{"type":"pay","name":"stake_pay"},{"type":"uint8","name":"lobby_size"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"commit_turn","args":[{"type":"uint64","name":"game_id"},{"type":"uint256","name":"turn_hash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"update","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"game_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZV9pZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"box_user_registry":{"keyType":"address","valueType":"UserRegistry","prefix":"cl8="},"box_game_grid":{"keyType":"uint64","valueType":"uint8[121]","prefix":"Z18="},"box_game_state":{"keyType":"uint64","valueType":"GameState","prefix":"c18="},"box_game_lobby":{"keyType":"uint64","valueType":"AVMBytes","prefix":"bF8="},"box_game_character":{"keyType":"address","valueType":"GameCharacter","prefix":"Y18="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[752],"errorMessage":"Box found. Ensure the box does not exist."},{"pc":[768,914,922,930,938,946],"errorMessage":"Box payment receiver address must match application address."},{"pc":[760,874,882,890,898],"errorMessage":"Box payment sender address must match transaction sender address."},{"pc":[474,619,1242],"errorMessage":"Game ID not found. Ensure the game was created and still exists."},{"pc":[488],"errorMessage":"Index access is out of bounds"},{"pc":[822,832,866],"errorMessage":"Insufficient payment amount. Value is not enough to cover the minimum requirements."},{"pc":[973],"errorMessage":"Invalid Lobby size. Value must be an even number and within permitted bounds."},{"pc":[742,812],"errorMessage":"Invalid group size. Ensure number of transactions in group is within valid bounds."},{"pc":[482],"errorMessage":"Invalid position index. Ensure index value is within valid range."},{"pc":[129,148,216,238,251,271,298,323,348,375,401,424,440],"errorMessage":"OnCompletion is not NoOp"},{"pc":[117],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[1347],"errorMessage":"Only app creator can act as the sender address."},{"pc":[1288],"errorMessage":"Player not found. Ensure player address is inside the game lobby."},{"pc":[906],"errorMessage":"Stake payment sender address must match sender address."},{"pc":[1341],"errorMessage":"Template variable 'UPDATABLE' needs to be 'True' at deploy-time."},{"pc":[242],"errorMessage":"can only call when creating"},{"pc":[120,132,151,219,254,274,301,326,351,378,404,427,443],"errorMessage":"can only call when not creating"},{"pc":[485,1272],"errorMessage":"check BoxMap entry exists"},{"pc":[1294,1312,1324],"errorMessage":"check self.box_game_character entry exists"},{"pc":[625],"errorMessage":"check self.box_game_lobby entry exists"},{"pc":[1247],"errorMessage":"check self.box_game_state entry exists"},{"pc":[978],"errorMessage":"check self.game_id exists"},{"pc":[540,854],"errorMessage":"overflow"},{"pc":[162,173,184,194,204,229],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDMyIDIgVE1QTF9HRU5fVU5JWCBUTVBMX1VQREFUQUJMRQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDAgImNfIiAiZ18iICJyXyIgInNfIiAibF8iICJnYW1lX2lkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAMTkKICAgIHB1c2hieXRlc3MgMHg2MzMzY2Q5ZCAweGI2NmQyZjU2IDB4ODk5NmJiMzcgMHg1MzgxZDZhOCAweDc4MTVmZTQxIDB4MGI0MmQxMmEgMHhiYmZhOGUwMSAweGY4NTA1M2FkIDB4MDZmMGQxMzIgMHg1YmUyMTlmMCAweDNmZmJjYTI0IDB4ODFlOTA1NDIgMHhmZDFjZDc2YSAweGEwZTgxODcyIC8vIG1ldGhvZCAiY2FsY19zaW5nbGVfYm94X2Nvc3QodWludDgsdWludDE2KXVpbnQ2NCIsIG1ldGhvZCAicmVhZF9nZW5fdW5peCgpdWludDY0IiwgbWV0aG9kICJyZWFkX2dyaWRfY2VsbF92YWx1ZV9ieV9pbmRleCh1aW50NjQsdWludDgpdWludDgiLCBtZXRob2QgInJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3Jkcyh1aW50NjQsdWludDgsdWludDgpdWludDgiLCBtZXRob2QgImRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3QoYWNjb3VudClib29sIiwgbWV0aG9kICJkb2VzX2JveF9nYW1lX2dyaWRfZXhpc3QodWludDY0KWJvb2wiLCBtZXRob2QgImRvZXNfYm94X2dhbWVfc3RhdGVfZXhpc3QodWludDY0KWJvb2wiLCBtZXRob2QgImRvZXNfYm94X2dhbWVfY2hhcmFjdGVyX2V4aXN0KGFjY291bnQpYm9vbCIsIG1ldGhvZCAicmVhZF9ib3hfZ2FtZV9sb2JieSh1aW50NjQpYWRkcmVzc1tdIiwgbWV0aG9kICJnZW5lcmF0ZSgpdm9pZCIsIG1ldGhvZCAiZ2V0X2JveF91c2VyX3JlZ2lzdHJ5KHBheSl2b2lkIiwgbWV0aG9kICJuZXdfZ2FtZShwYXkscGF5LHBheSxwYXkscGF5LHVpbnQ4KXZvaWQiLCBtZXRob2QgImNvbW1pdF90dXJuKHVpbnQ2NCx1aW50MjU2KXZvaWQiLCBtZXRob2QgInVwZGF0ZSgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY2FsY19zaW5nbGVfYm94X2Nvc3Rfcm91dGVANSBtYWluX3JlYWRfZ2VuX3VuaXhfcm91dGVANiBtYWluX3JlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4X3JvdXRlQDcgbWFpbl9yZWFkX2dyaWRfY2VsbF92YWx1ZV9hdF9jb29yZHNfcm91dGVAOCBtYWluX2RvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3Rfcm91dGVAOSBtYWluX2RvZXNfYm94X2dhbWVfZ3JpZF9leGlzdF9yb3V0ZUAxMCBtYWluX2RvZXNfYm94X2dhbWVfc3RhdGVfZXhpc3Rfcm91dGVAMTEgbWFpbl9kb2VzX2JveF9nYW1lX2NoYXJhY3Rlcl9leGlzdF9yb3V0ZUAxMiBtYWluX3JlYWRfYm94X2dhbWVfbG9iYnlfcm91dGVAMTMgbWFpbl9nZW5lcmF0ZV9yb3V0ZUAxNCBtYWluX2dldF9ib3hfdXNlcl9yZWdpc3RyeV9yb3V0ZUAxNSBtYWluX25ld19nYW1lX3JvdXRlQDE2IG1haW5fY29tbWl0X3R1cm5fcm91dGVAMTcgbWFpbl91cGRhdGVfcm91dGVAMTgKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9yb3V0ZUAxODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo0MTUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IFVwZGF0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdXBkYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NvbW1pdF90dXJuX3JvdXRlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI1NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgY29tbWl0X3R1cm4KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fbmV3X2dhbWVfcm91dGVAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTU5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4biBHcm91cEluZGV4CiAgICBwdXNoaW50IDUgLy8gNQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuIEdyb3VwSW5kZXgKICAgIHB1c2hpbnQgNCAvLyA0CiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG4gR3JvdXBJbmRleAogICAgcHVzaGludCAzIC8vIDMKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzMgLy8gMgogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTU5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgbmV3X2dhbWUKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2JveF91c2VyX3JlZ2lzdHJ5X3JvdXRlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjEzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBnZXRfYm94X3VzZXJfcmVnaXN0cnkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2VuZXJhdGVfcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTIzLTEyNAogICAgLy8gIyBHZW5lcmF0ZSB0aGUgc21hcnQgY29udHJhY3QgYXBwbGljYXRpb24gY2xpZW50CiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIGdlbmVyYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfYm94X2dhbWVfbG9iYnlfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6OTktMTAwCiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIGFuIGFycmF5IG9mIGFsbCBhY3RpdmUgdXNlcnMgaW4gdGhlIGdhbWUgbG9iYnkgYXQgdGltZSBvZiBjYWxsCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo5OS0xMDAKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gYW4gYXJyYXkgb2YgYWxsIGFjdGl2ZSB1c2VycyBpbiB0aGUgZ2FtZSBsb2JieSBhdCB0aW1lIG9mIGNhbGwKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgY2FsbHN1YiByZWFkX2JveF9nYW1lX2xvYmJ5CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2RvZXNfYm94X2dhbWVfY2hhcmFjdGVyX2V4aXN0X3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojk0LTk1CiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBjaGFyYWN0ZXIgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojk0LTk1CiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBjaGFyYWN0ZXIgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGRvZXNfYm94X2dhbWVfY2hhcmFjdGVyX2V4aXN0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0X3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojg5LTkwCiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBzdGF0ZSBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo4OS05MAogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIGdhbWUgc3RhdGUgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGRvZXNfYm94X2dhbWVfc3RhdGVfZXhpc3QKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2RvZXNfYm94X2dhbWVfZ3JpZF9leGlzdF9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo4NC04NQogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIGdhbWUgZ3JpZCBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI4LTI5CiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBTYWx2byhBUkM0Q29udHJhY3QsIGF2bV92ZXJzaW9uPTExKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo4NC04NQogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIGdhbWUgZ3JpZCBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZG9lc19ib3hfZ2FtZV9ncmlkX2V4aXN0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kb2VzX2JveF91c2VyX3JlZ2lzdHJ5X2V4aXN0X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NzktODAKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiB1c2VyIHJlZ2lzdHJ5IGJveCB2YWx1ZSBleGlzdHMsIGVsc2UgRmFsc2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjgtMjkKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFNhbHZvKEFSQzRDb250cmFjdCwgYXZtX3ZlcnNpb249MTEpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo3OS04MAogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBUcnVlIGlmIHVzZXIgcmVnaXN0cnkgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3QKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3Jkc19yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjY5LTcwCiAgICAvLyAjIFJFQUQtT05MWTogUmVhZCBnYW1lIGdyaWQgY2VsbCB2YWx1ZSBhdCB4IGFuZCB5IGNvb3JkaW5hdGVzIHVuZGVyIHRoZSBnaXZlbiBnYW1lIGlkIGtleQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NjktNzAKICAgIC8vICMgUkVBRC1PTkxZOiBSZWFkIGdhbWUgZ3JpZCBjZWxsIHZhbHVlIGF0IHggYW5kIHkgY29vcmRpbmF0ZXMgdW5kZXIgdGhlIGdpdmVuIGdhbWUgaWQga2V5CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgcmVhZF9ncmlkX2NlbGxfdmFsdWVfYXRfY29vcmRzCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NjEtNjIKICAgIC8vICMgUkVBRC1PTkxZOiBSZWFkIGdhbWUgZ3JpZCBjZWxsIHZhbHVlIGF0IGFycmF5IGluZGV4IHVuZGVyIHRoZSBnaXZlbiBnYW1lIGlkIGtleQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgU2Fsdm8oQVJDNENvbnRyYWN0LCBhdm1fdmVyc2lvbj0xMSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NjEtNjIKICAgIC8vICMgUkVBRC1PTkxZOiBSZWFkIGdhbWUgZ3JpZCBjZWxsIHZhbHVlIGF0IGFycmF5IGluZGV4IHVuZGVyIHRoZSBnaXZlbiBnYW1lIGlkIGtleQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIHJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ2VuX3VuaXhfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo1Ni01NwogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiB0aGUgYXBwIGdlbmVzaXMgdGltZXN0YW1wIGluIFVuaXggZm9ybWF0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjU5CiAgICAvLyByZXR1cm4gVGVtcGxhdGVWYXJbVUludDY0XSgiR0VOX1VOSVgiKQogICAgaW50YyA0IC8vIFRNUExfR0VOX1VOSVgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo1Ni01NwogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiB0aGUgYXBwIGdlbmVzaXMgdGltZXN0YW1wIGluIFVuaXggZm9ybWF0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FsY19zaW5nbGVfYm94X2Nvc3Rfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo0Mi00MwogICAgLy8gIyBSRUFELU9OTFk6IENhbGN1bGF0ZSB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IChNQlIpIGNvc3QgZm9yIHN0b3JpbmcgYSBzaW5nbGUgYm94IHVuaXQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjgtMjkKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFNhbHZvKEFSQzRDb250cmFjdCwgYXZtX3ZlcnNpb249MTEpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjQyLTQzCiAgICAvLyAjIFJFQUQtT05MWTogQ2FsY3VsYXRlIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgKE1CUikgY29zdCBmb3Igc3RvcmluZyBhIHNpbmdsZSBib3ggdW5pdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGNhbGNfc2luZ2xlX2JveF9jb3N0CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLnN1YnJvdXRpbmVzLmdldF9ncmlkX2NlbGxfdmFsdWUoZ2FtZV9pZDogdWludDY0LCBib3hfZ2FtZV9ncmlkOiBieXRlcywgaTogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfZ3JpZF9jZWxsX3ZhbHVlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjE5OS0yMDMKICAgIC8vICMgR2V0IHRoZSB2YWx1ZSBvZiBhIGdyaWQgY2VsbCBhdCB0aGUgZXF1aXZhbGVudCBmbGF0dGVuZWQgMUQgYXJyYXkgaW5kZXgKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X2dyaWRfY2VsbF92YWx1ZSgKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsIGJveF9nYW1lX2dyaWQ6IEJveE1hcFtVSW50NjQsIHRhLkdhbWVHcmlkXSwgaTogYXJjNC5VSW50OAogICAgLy8gKSAtPiBhcmM0LlVJbnQ4OgogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjA0LTIwNQogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgZ2FtZV9pZCBpbiBib3hfZ2FtZV9ncmlkLCBlcnIuR0FNRV9JRF9OT1RfRk9VTkQKICAgIGZyYW1lX2RpZyAtMwogICAgaXRvYgogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gR2FtZSBJRCBub3QgZm91bmQuIEVuc3VyZSB0aGUgZ2FtZSB3YXMgY3JlYXRlZCBhbmQgc3RpbGwgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjIwNgogICAgLy8gYXNzZXJ0IGkubmF0aXZlIDwgY3N0LkdSSURfQ0VMTF9UT1RBTCwgZXJyLklOVkFMSURfUE9TX0lOREVYCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgcHVzaGludCAxMjEgLy8gMTIxCiAgICA8CiAgICBhc3NlcnQgLy8gSW52YWxpZCBwb3NpdGlvbiBpbmRleC4gRW5zdXJlIGluZGV4IHZhbHVlIGlzIHdpdGhpbiB2YWxpZCByYW5nZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9zdWJyb3V0aW5lcy5weToyMDgtMjA5CiAgICAvLyAjIEFjY2VzcyB0aGUgZ2FtZSBncmlkIGJveCBjb250ZW50cywgYXQgdGhlIGdpdmVuIGluZGV4LCBhbmQgcmV0dXJuIHRoZSBieXRlIHZhbHVlCiAgICAvLyByZXR1cm4gYm94X2dhbWVfZ3JpZFtnYW1lX2lkXVtpLm5hdGl2ZV0KICAgIHN3YXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBCb3hNYXAgZW50cnkgZXhpc3RzCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMQogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uY2FsY19zaW5nbGVfYm94X2Nvc3Qoa2V5X3NpemU6IGJ5dGVzLCB2YWx1ZV9zaXplOiBieXRlcykgLT4gdWludDY0OgpjYWxjX3NpbmdsZV9ib3hfY29zdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo0Mi00NgogICAgLy8gIyBSRUFELU9OTFk6IENhbGN1bGF0ZSB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IChNQlIpIGNvc3QgZm9yIHN0b3JpbmcgYSBzaW5nbGUgYm94IHVuaXQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgLy8gICAgIHNlbGYsIGtleV9zaXplOiBhcmM0LlVJbnQ4LCB2YWx1ZV9zaXplOiBhcmM0LlVJbnQxNgogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo1MAogICAgLy8ga2V5X3NpemUubmF0aXZlICsgdmFsdWVfc2l6ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NDkKICAgIC8vIHNpemVfY29zdCA9IGFyYzQuVUludDE2KDQwMCkubmF0aXZlICogKAogICAgcHVzaGludCA0MDAgLy8gNDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NDktNTEKICAgIC8vIHNpemVfY29zdCA9IGFyYzQuVUludDE2KDQwMCkubmF0aXZlICogKAogICAgLy8gICAgIGtleV9zaXplLm5hdGl2ZSArIHZhbHVlX3NpemUubmF0aXZlCiAgICAvLyApICAjIFNpemUgZmVlICg0MDAgcGVyIGJ5dGUgKiAobGVuKGtleSkrbGVuKHZhbHVlKSkpCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NTMtNTQKICAgIC8vICMgUmV0dXJuIHNpbmdsZSBib3ggdG90YWwgY29zdCBhbW91bnQKICAgIC8vIHJldHVybiBiYXNlX2Nvc3QubmF0aXZlICsgc2l6ZV9jb3N0CiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgKwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLmNvbnRyYWN0LlNhbHZvLnJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2J5X2luZGV4KGdhbWVfaWQ6IHVpbnQ2NCwgaTogYnl0ZXMpIC0+IGJ5dGVzOgpyZWFkX2dyaWRfY2VsbF92YWx1ZV9ieV9pbmRleDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo2MS02NQogICAgLy8gIyBSRUFELU9OTFk6IFJlYWQgZ2FtZSBncmlkIGNlbGwgdmFsdWUgYXQgYXJyYXkgaW5kZXggdW5kZXIgdGhlIGdpdmVuIGdhbWUgaWQga2V5CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiByZWFkX2dyaWRfY2VsbF92YWx1ZV9ieV9pbmRleCgKICAgIC8vICAgICBzZWxmLCBnYW1lX2lkOiBVSW50NjQsIGk6IGFyYzQuVUludDgKICAgIC8vICkgLT4gYXJjNC5VSW50ODoKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjY2LTY3CiAgICAvLyAjIFJldHVybiBieXRlIHZhbHVlIGF0IGdyaWQgY2VsbCBpbmRleAogICAgLy8gcmV0dXJuIHNydC5nZXRfZ3JpZF9jZWxsX3ZhbHVlKGdhbWVfaWQsIHNlbGYuYm94X2dhbWVfZ3JpZCwgaSkKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZWNfMyAvLyAiZ18iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgZ2V0X2dyaWRfY2VsbF92YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLmNvbnRyYWN0LlNhbHZvLnJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3JkcyhnYW1lX2lkOiB1aW50NjQsIHg6IGJ5dGVzLCB5OiBieXRlcykgLT4gYnl0ZXM6CnJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3JkczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weTo2OS03MwogICAgLy8gIyBSRUFELU9OTFk6IFJlYWQgZ2FtZSBncmlkIGNlbGwgdmFsdWUgYXQgeCBhbmQgeSBjb29yZGluYXRlcyB1bmRlciB0aGUgZ2l2ZW4gZ2FtZSBpZCBrZXkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIHJlYWRfZ3JpZF9jZWxsX3ZhbHVlX2F0X2Nvb3JkcygKICAgIC8vICAgICBzZWxmLCBnYW1lX2lkOiBVSW50NjQsIHg6IGFyYzQuVUludDgsIHk6IGFyYzQuVUludDgKICAgIC8vICkgLT4gYXJjNC5VSW50ODoKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjE5MgogICAgLy8gcm93Lm5hdGl2ZSAqIGNzdC5HUklEX1NJWkUgKyBjb2wubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgICoKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjE5NS0xOTYKICAgIC8vICMgUmV0dXJuIGluZGV4IHZhbHVlIHdyYXBwZWQgaW4gYW4gVUludDggZGF0YSB0eXBlCiAgICAvLyByZXR1cm4gYXJjNC5VSW50OChpKQogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBleHRyYWN0IDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojc0LTc3CiAgICAvLyAjIENvbnZlcnQgeCAmIHkgY29vcmRzIHRvIGdyaWQgY2VsbCBpbmRleCwgdGhlbiByZXR1cm4gYnl0ZSB2YWx1ZSBhdCB0aGF0IGluZGV4CiAgICAvLyByZXR1cm4gc3J0LmdldF9ncmlkX2NlbGxfdmFsdWUoCiAgICAvLyAgICAgZ2FtZV9pZCwgc2VsZi5ib3hfZ2FtZV9ncmlkLCBzcnQuY29udmVydF9ncmlkX2Nvb3Jkc190b19pbmRleCh4LCB5KQogICAgLy8gKQogICAgZnJhbWVfZGlnIC0zCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NzYKICAgIC8vIGdhbWVfaWQsIHNlbGYuYm94X2dhbWVfZ3JpZCwgc3J0LmNvbnZlcnRfZ3JpZF9jb29yZHNfdG9faW5kZXgoeCwgeSkKICAgIGJ5dGVjXzMgLy8gImdfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojc0LTc3CiAgICAvLyAjIENvbnZlcnQgeCAmIHkgY29vcmRzIHRvIGdyaWQgY2VsbCBpbmRleCwgdGhlbiByZXR1cm4gYnl0ZSB2YWx1ZSBhdCB0aGF0IGluZGV4CiAgICAvLyByZXR1cm4gc3J0LmdldF9ncmlkX2NlbGxfdmFsdWUoCiAgICAvLyAgICAgZ2FtZV9pZCwgc2VsZi5ib3hfZ2FtZV9ncmlkLCBzcnQuY29udmVydF9ncmlkX2Nvb3Jkc190b19pbmRleCh4LCB5KQogICAgLy8gKQogICAgdW5jb3ZlciAyCiAgICBjYWxsc3ViIGdldF9ncmlkX2NlbGxfdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5kb2VzX2JveF91c2VyX3JlZ2lzdHJ5X2V4aXN0KGFjY291bnQ6IGJ5dGVzKSAtPiB1aW50NjQ6CmRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6NzktODEKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiB1c2VyIHJlZ2lzdHJ5IGJveCB2YWx1ZSBleGlzdHMsIGVsc2UgRmFsc2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGRvZXNfYm94X3VzZXJfcmVnaXN0cnlfZXhpc3Qoc2VsZiwgYWNjb3VudDogQWNjb3VudCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjgyCiAgICAvLyByZXR1cm4gc2VsZi5ib3hfdXNlcl9yZWdpc3RyeS5tYXliZShhY2NvdW50KVsxXQogICAgYnl0ZWMgNCAvLyAicl8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uZG9lc19ib3hfZ2FtZV9ncmlkX2V4aXN0KGdhbWVfaWQ6IHVpbnQ2NCkgLT4gdWludDY0Ogpkb2VzX2JveF9nYW1lX2dyaWRfZXhpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6ODQtODYKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiBnYW1lIGdyaWQgYm94IHZhbHVlIGV4aXN0cywgZWxzZSBGYWxzZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZG9lc19ib3hfZ2FtZV9ncmlkX2V4aXN0KHNlbGYsIGdhbWVfaWQ6IFVJbnQ2NCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyByZXR1cm4gc2VsZi5ib3hfZ2FtZV9ncmlkLm1heWJlKGdhbWVfaWQpWzFdCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJ5dGVjXzMgLy8gImdfIgogICAgc3dhcAogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBidXJ5IDEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5kb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0KGdhbWVfaWQ6IHVpbnQ2NCkgLT4gdWludDY0Ogpkb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojg5LTkxCiAgICAvLyAjIFJFQUQtT05MWTogUmV0dXJuIFRydWUgaWYgZ2FtZSBzdGF0ZSBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBkb2VzX2JveF9nYW1lX3N0YXRlX2V4aXN0KHNlbGYsIGdhbWVfaWQ6IFVJbnQ2NCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjkyCiAgICAvLyByZXR1cm4gc2VsZi5ib3hfZ2FtZV9zdGF0ZS5tYXliZShnYW1lX2lkKVsxXQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBieXRlYyA1IC8vICJzXyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uZG9lc19ib3hfZ2FtZV9jaGFyYWN0ZXJfZXhpc3QoYWNjb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKZG9lc19ib3hfZ2FtZV9jaGFyYWN0ZXJfZXhpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6OTQtOTYKICAgIC8vICMgUkVBRC1PTkxZOiBSZXR1cm4gVHJ1ZSBpZiBnYW1lIGNoYXJhY3RlciBib3ggdmFsdWUgZXhpc3RzLCBlbHNlIEZhbHNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBkb2VzX2JveF9nYW1lX2NoYXJhY3Rlcl9leGlzdChzZWxmLCBhY2NvdW50OiBBY2NvdW50KSAtPiBib29sOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6OTcKICAgIC8vIHJldHVybiBzZWxmLmJveF9nYW1lX2NoYXJhY3Rlci5tYXliZShhY2NvdW50KVsxXQogICAgYnl0ZWNfMiAvLyAiY18iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8ucmVhZF9ib3hfZ2FtZV9sb2JieShnYW1lX2lkOiB1aW50NjQpIC0+IGJ5dGVzOgpyZWFkX2JveF9nYW1lX2xvYmJ5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5Ojk5LTEwMQogICAgLy8gIyBSRUFELU9OTFk6IFJldHVybiBhbiBhcnJheSBvZiBhbGwgYWN0aXZlIHVzZXJzIGluIHRoZSBnYW1lIGxvYmJ5IGF0IHRpbWUgb2YgY2FsbAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgcmVhZF9ib3hfZ2FtZV9sb2JieShzZWxmLCBnYW1lX2lkOiBVSW50NjQpIC0+IHRhLkdhbWVMb2JieToKICAgIHByb3RvIDEgMQogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjEwMi0xMDMKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IGdhbWVfaWQgaW4gc2VsZi5ib3hfZ2FtZV9sb2JieSwgZXJyLkdBTUVfSURfTk9UX0ZPVU5ECiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJ5dGVjIDYgLy8gImxfIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEdhbWUgSUQgbm90IGZvdW5kLiBFbnN1cmUgdGhlIGdhbWUgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMDUtMTA2CiAgICAvLyAjIFJldHJpZXZlIGJ5dGUgYXJyYXkgb2YgY3VycmVudCB1c2VyIGFkZHJlc3NlcyBmcm9tIHRoZSBib3ggdXNpbmcgdGhlIGdhbWUgaWQgcGFyYW1ldGVyCiAgICAvLyBnYW1lX2xvYmJ5X2JfYXJyID0gc2VsZi5ib3hfZ2FtZV9sb2JieVtnYW1lX2lkXQogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX2xvYmJ5IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjEwOC0xMDkKICAgIC8vICMgRGVmaW5lIGEgZHluYW1pYyBhcnJheSB0byBhcHBlbmQgYWxsIHJlbWFpbmluZyBhY3RpdmUgdXNlcnMKICAgIC8vIHVzZXJzX2luX2xvYmJ5ID0gdGEuR2FtZUxvYmJ5KCkKICAgIHB1c2hieXRlcyAweDAwMDAKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMTEtMTEyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgdXNlcnMgYnl0ZSBhcnJheQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfbG9iYnlfYl9hcnIubGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGxlbgogICAgaW50Y18xIC8vIDAKCnJlYWRfYm94X2dhbWVfbG9iYnlfZm9yX2hlYWRlckAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjExMS0xMTIKICAgIC8vICMgSXRlcmF0ZSB0aHJvdWdoIHRoZSB1c2VycyBieXRlIGFycmF5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9sb2JieV9iX2Fyci5sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyA0CiAgICA8CiAgICBieiByZWFkX2JveF9nYW1lX2xvYmJ5X2FmdGVyX2ZvckA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTEzLTExNAogICAgLy8gIyBFeHRyYWN0IHRoZSBieXRlcyByZXByZXNlbnRpbmcgdGhlIHVzZXIgYWRkcmVzcwogICAgLy8gdXNlcl9hZGRyX2J5dGVzID0gb3AuZXh0cmFjdChnYW1lX2xvYmJ5X2JfYXJyLCBpLCBjc3QuQUREUkVTU19TSVpFKQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjExNS0xMTYKICAgIC8vICMgT25seSBhcHBlbmQgYWRkcmVzcyBpZiBpdHMgYnl0ZXMgZG8gTk9UIGVxdWFsIHRvIGEgemVyb2VkIGJ5dGUgYXJyYXkgb2Ygc2l6ZSAzMgogICAgLy8gaWYgdXNlcl9hZGRyX2J5dGVzICE9IEJ5dGVzKGNzdC5aRVJPRURfQUREUl9CWVRFUyk6CiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAhPQogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQogICAgYnogcmVhZF9ib3hfZ2FtZV9sb2JieV9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMTgKICAgIC8vIHVzZXJzX2luX2xvYmJ5LmFwcGVuZChhcmM0LkFkZHJlc3ModXNlcl9hY2NvdW50KSkKICAgIGZyYW1lX2RpZyAzCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxCgpyZWFkX2JveF9nYW1lX2xvYmJ5X2FmdGVyX2lmX2Vsc2VANDoKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMTEtMTEyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgdXNlcnMgYnl0ZSBhcnJheQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfbG9iYnlfYl9hcnIubGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMzIKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiByZWFkX2JveF9nYW1lX2xvYmJ5X2Zvcl9oZWFkZXJAMQoKcmVhZF9ib3hfZ2FtZV9sb2JieV9hZnRlcl9mb3JANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMjAtMTIxCiAgICAvLyAjIFJldHVybiB0aGUgYXJyYXkgY29udGFpbmluZyB0aGUgcmVtYWluaW5nIGFjdGl2ZSB1c2VycyBpbiB0aGUgZ2FtZSBsb2JieQogICAgLy8gcmV0dXJuIHVzZXJzX2luX2xvYmJ5CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8uZ2VuZXJhdGUoKSAtPiB2b2lkOgpnZW5lcmF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMzItMTMzCiAgICAvLyAjIFNldCBHbG9iYWwgU3RhdGUgdmFyaWFibGVzIHRvIHRoZWlyIGRlZmF1bHQgc3RhcnRpbmcgdmFsdWVzCiAgICAvLyBzZWxmLmdhbWVfaWQgPSBVSW50NjQoMSkKICAgIGJ5dGVjIDcgLy8gImdhbWVfaWQiCiAgICBpbnRjXzAgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5nZXRfYm94X3VzZXJfcmVnaXN0cnkoYm94X3JfcGF5OiB1aW50NjQpIC0+IHZvaWQ6CmdldF9ib3hfdXNlcl9yZWdpc3RyeToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxMzUtMTM5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBnZXRfYm94X3VzZXJfcmVnaXN0cnkoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBib3hfcl9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTQwLTE0MQogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gMiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18zIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiBncm91cCBpcyB3aXRoaW4gdmFsaWQgYm91bmRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE0MgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgbm90IGluIHNlbGYuYm94X3VzZXJfcmVnaXN0cnksIGVyci5CT1hfRk9VTkQKICAgIGJ5dGVjIDQgLy8gInJfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBCb3ggZm91bmQuIEVuc3VyZSB0aGUgYm94IGRvZXMgbm90IGV4aXN0LgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE0NS0xNDYKICAgIC8vICMgYXNzZXJ0IGJveF9yX3BheS5hbW91bnQgPT0gY3N0LkJPWF9SX0NPU1QsIGVyci5JTlNVRkZJQ0lFTlRfUEFZX0FNT1VOVAogICAgLy8gYXNzZXJ0IGJveF9yX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTQ4CiAgICAvLyBib3hfcl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTQ3LTE0OQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfcl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE1NgogICAgLy8gZXhwaXJ5X3JvdW5kPWFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCArIGNzdC5CT1hfUl9FWFBfUk9VTkRfREVMVEEpLAogICAgZ2xvYmFsIFJvdW5kCiAgICBwdXNoaW50IDMwIC8vIDMwCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTUxLTE1NwogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIHVzZXIgcmVnaXN0cnkgdy8gdGhlIHNlbmRlciBhZGRyZXNzIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfdXNlcl9yZWdpc3RyeVtUeG4uc2VuZGVyXSA9IHN0Yy5Vc2VyUmVnaXN0cnkoCiAgICAvLyAgICAgaG9zdGluZ19nYW1lPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gICAgIGdhbWVfaWQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgY29tbWl0X3JhbmRfcm91bmQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgZXhwaXJ5X3JvdW5kPWFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCArIGNzdC5CT1hfUl9FWFBfUk9VTkRfREVMVEEpLAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTUxLTE1MgogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIHVzZXIgcmVnaXN0cnkgdy8gdGhlIHNlbmRlciBhZGRyZXNzIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfdXNlcl9yZWdpc3RyeVtUeG4uc2VuZGVyXSA9IHN0Yy5Vc2VyUmVnaXN0cnkoCiAgICBieXRlYyA0IC8vICJyXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE1MS0xNTcKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSB1c2VyIHJlZ2lzdHJ5IHcvIHRoZSBzZW5kZXIgYWRkcmVzcyB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X3VzZXJfcmVnaXN0cnlbVHhuLnNlbmRlcl0gPSBzdGMuVXNlclJlZ2lzdHJ5KAogICAgLy8gICAgIGhvc3RpbmdfZ2FtZT1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICAgICBnYW1lX2lkPWFyYzQuVUludDY0KDApLAogICAgLy8gICAgIGNvbW1pdF9yYW5kX3JvdW5kPWFyYzQuVUludDY0KDApLAogICAgLy8gICAgIGV4cGlyeV9yb3VuZD1hcmM0LlVJbnQ2NChHbG9iYWwucm91bmQgKyBjc3QuQk9YX1JfRVhQX1JPVU5EX0RFTFRBKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5zYWx2by5jb250cmFjdC5TYWx2by5uZXdfZ2FtZShib3hfZ19wYXk6IHVpbnQ2NCwgYm94X3NfcGF5OiB1aW50NjQsIGJveF9jX3BheTogdWludDY0LCBib3hfbF9wYXk6IHVpbnQ2NCwgc3Rha2VfcGF5OiB1aW50NjQsIGxvYmJ5X3NpemU6IGJ5dGVzKSAtPiB2b2lkOgpuZXdfZ2FtZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxNTktMTY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBuZXdfZ2FtZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGJveF9nX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyAgICAgYm94X3NfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBib3hfY19wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gICAgIGJveF9sX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyAgICAgc3Rha2VfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBsb2JieV9zaXplOiBhcmM0LlVJbnQ4LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gNiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTY5LTE3MAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gNiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiBncm91cCBpcyB3aXRoaW4gdmFsaWQgYm91bmRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE3MgogICAgLy8gYXNzZXJ0IGJveF9nX3BheS5hbW91bnQgPj0gY3N0LkJPWF9HX0NPU1QsIGVyci5JTlNVRkZJQ0lFTlRfUEFZX0FNT1VOVAogICAgZnJhbWVfZGlnIC02CiAgICBndHhucyBBbW91bnQKICAgIHB1c2hpbnQgNTQ5MDAgLy8gNTQ5MDAKICAgID49CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IHBheW1lbnQgYW1vdW50LiBWYWx1ZSBpcyBub3QgZW5vdWdoIHRvIGNvdmVyIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxNzMKICAgIC8vIGFzc2VydCBib3hfc19wYXkuYW1vdW50ID49IGNzdC5CT1hfU19DT1NULCBlcnIuSU5TVUZGSUNJRU5UX1BBWV9BTU9VTlQKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgQW1vdW50CiAgICBwdXNoaW50IDI3NzAwIC8vIDI3NzAwCiAgICA+PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBwYXltZW50IGFtb3VudC4gVmFsdWUgaXMgbm90IGVub3VnaCB0byBjb3ZlciB0aGUgbWluaW11bSByZXF1aXJlbWVudHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTc0LTE3NQogICAgLy8gIyBhc3NlcnQgYm94X2NfcGF5LmFtb3VudCA+PSBjc3QuQk9YX0NfQ09TVCwgZXJyLklOU1VGRklDSUVOVF9QQVlfQU1PVU5UCiAgICAvLyBhc3NlcnQgYm94X2xfcGF5LmFtb3VudCA+PSBzZWxmLmNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxNzcKICAgIC8vIHZhbHVlX3NpemU9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlKSwKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzIgLy8gMzIKICAgICoKICAgIGR1cAogICAgY292ZXIgMgogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTc2CiAgICAvLyBrZXlfc2l6ZT1hcmM0LlVJbnQ4KDEwKSwKICAgIHB1c2hieXRlcyAweDBhCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTc0LTE3OAogICAgLy8gIyBhc3NlcnQgYm94X2NfcGF5LmFtb3VudCA+PSBjc3QuQk9YX0NfQ09TVCwgZXJyLklOU1VGRklDSUVOVF9QQVlfQU1PVU5UCiAgICAvLyBhc3NlcnQgYm94X2xfcGF5LmFtb3VudCA+PSBzZWxmLmNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgLy8gICAgIGtleV9zaXplPWFyYzQuVUludDgoMTApLAogICAgLy8gICAgIHZhbHVlX3NpemU9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlKSwKICAgIC8vICksIGVyci5JTlNVRkZJQ0lFTlRfUEFZX0FNT1VOVAogICAgc3dhcAogICAgY2FsbHN1YiBjYWxjX3NpbmdsZV9ib3hfY29zdAogICAgPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgcGF5bWVudCBhbW91bnQuIFZhbHVlIGlzIG5vdCBlbm91Z2ggdG8gY292ZXIgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE4NgogICAgLy8gYXNzZXJ0IGJveF9nX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtNgogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTg3CiAgICAvLyBhc3NlcnQgYm94X3NfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyLCBlcnIuSU5WQUxJRF9CT1hfUEFZX1NFTkRFUgogICAgZnJhbWVfZGlnIC01CiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gQm94IHBheW1lbnQgc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCB0cmFuc2FjdGlvbiBzZW5kZXIgYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxODgKICAgIC8vIGFzc2VydCBib3hfY19wYXkuc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5JTlZBTElEX0JPWF9QQVlfU0VOREVSCiAgICBmcmFtZV9kaWcgLTQKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCBzZW5kZXIgYWRkcmVzcyBtdXN0IG1hdGNoIHRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gYXNzZXJ0IGJveF9sX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTkwCiAgICAvLyBhc3NlcnQgc3Rha2VfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyLCBlcnIuSU5WQUxJRF9TVEFLRV9QQVlfU0VOREVSCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBTdGFrZSBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTkzCiAgICAvLyBib3hfZ19wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC02CiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MTkyLTE5NAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfZ19wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE5NgogICAgLy8gYm94X3NfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjE5NS0xOTcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgYm94X3NfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksIGVyci5JTlZBTElEX0JPWF9QQVlfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCByZWNlaXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxOTkKICAgIC8vIGJveF9jX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTQKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToxOTgtMjAwCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGJveF9jX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCBlcnIuSU5WQUxJRF9CT1hfUEFZX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gQm94IHBheW1lbnQgcmVjZWl2ZXIgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjAyCiAgICAvLyBib3hfbF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjAxLTIwMwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfbF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gc3Rha2VfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIwNC0yMDYKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc3Rha2VfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksIGVyci5JTlZBTElEX0JPWF9QQVlfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCByZWNlaXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDkKICAgIC8vIGxvYmJ5X3NpemUgPj0gY3N0Lk1JTl9MT0JCWV9TSVpFCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hieXRlcyAweDAyCiAgICBiPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICAvLyBhbmQgbG9iYnlfc2l6ZS5uYXRpdmUgJSAyID09IDAKICAgIGJ6IG5ld19nYW1lX2Jvb2xfZmFsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIxMAogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hieXRlcyAweDA0CiAgICBiPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICAvLyBhbmQgbG9iYnlfc2l6ZS5uYXRpdmUgJSAyID09IDAKICAgIGJ6IG5ld19nYW1lX2Jvb2xfZmFsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIxMQogICAgLy8gYW5kIGxvYmJ5X3NpemUubmF0aXZlICUgMiA9PSAwCiAgICBmcmFtZV9kaWcgMAogICAgaW50Y18zIC8vIDIKICAgICUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gYW5kIGxvYmJ5X3NpemUgPD0gY3N0Lk1BWF9MT0JCWV9TSVpFCiAgICAvLyBhbmQgbG9iYnlfc2l6ZS5uYXRpdmUgJSAyID09IDAKICAgIGJueiBuZXdfZ2FtZV9ib29sX2ZhbHNlQDQKICAgIGludGNfMCAvLyAxCgpuZXdfZ2FtZV9ib29sX21lcmdlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjA4LTIxMgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBsb2JieV9zaXplID49IGNzdC5NSU5fTE9CQllfU0laRQogICAgLy8gICAgIGFuZCBsb2JieV9zaXplIDw9IGNzdC5NQVhfTE9CQllfU0laRQogICAgLy8gICAgIGFuZCBsb2JieV9zaXplLm5hdGl2ZSAlIDIgPT0gMAogICAgLy8gKSwgZXJyLklOVkFMSURfTE9CQllfU0laRQogICAgYXNzZXJ0IC8vIEludmFsaWQgTG9iYnkgc2l6ZS4gVmFsdWUgbXVzdCBiZSBhbiBldmVuIG51bWJlciBhbmQgd2l0aGluIHBlcm1pdHRlZCBib3VuZHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE0LTIxNQogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgZ3JpZCB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfZ3JpZFtzZWxmLmdhbWVfaWRdID0gdGEuR2FtZUdyaWQuZnJvbV9ieXRlcyhjc3QuR1JJRF9aRVJPRURfQllURVMpCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNyAvLyAiZ2FtZV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lX2lkIGV4aXN0cwogICAgZHVwCiAgICBpdG9iCiAgICBieXRlY18zIC8vICJnXyIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjI0CiAgICAvLyBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuUEhBU0VfRVhQSVJZX0lOVEVSVkFMKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIHB1c2hpbnQgMTIwMCAvLyAxMjAwCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjI1CiAgICAvLyBwcml6ZV9wb3Q9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFtb3VudAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIyNgogICAgLy8gYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE5CiAgICAvLyBzdGFraW5nX2Nsb3NlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIxNy0yMjcKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSBnYW1lIHN0YXRlIHcvIHRoZSBjdXJyZW50IGdsb2JhbCBnYW1lX2lkIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtzZWxmLmdhbWVfaWRdID0gc3RjLkdhbWVTdGF0ZSgKICAgIC8vICAgICBzdGFraW5nX2Nsb3NlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICAgICAjIHF1aWNrX3BsYXlfZW5hYmxlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBxdWlja19wbGF5X2VuYWJsZWQsCiAgICAvLyAgICAgbG9iYnlfc2l6ZT1sb2JieV9zaXplLAogICAgLy8gICAgIGFjdGl2ZV9wbGF5ZXJzPWFyYzQuVUludDgoMSksCiAgICAvLyAgICAgYm94X2xfc3RhcnRfcG9zPWFyYzQuVUludDE2KGNzdC5BRERSRVNTX1NJWkUpLAogICAgLy8gICAgIGV4cGlyeV90cz1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGNzdC5QSEFTRV9FWFBJUllfSU5URVJWQUwpLAogICAgLy8gICAgIHByaXplX3BvdD1hcmM0LlVJbnQ2NChzdGFrZV9wYXkuYW1vdW50KSwKICAgIC8vICAgICBhZG1pbl9hZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjIyCiAgICAvLyBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgcHVzaGJ5dGVzIDB4MDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMTctMjI3CiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBzdGF0ZSB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19jbG9zZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgIyBxdWlja19wbGF5X2VuYWJsZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgcXVpY2tfcGxheV9lbmFibGVkLAogICAgLy8gICAgIGxvYmJ5X3NpemU9bG9iYnlfc2l6ZSwKICAgIC8vICAgICBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIGJveF9sX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIC8vICAgICBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuUEhBU0VfRVhQSVJZX0lOVEVSVkFMKSwKICAgIC8vICAgICBwcml6ZV9wb3Q9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyApCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMjMKICAgIC8vIGJveF9sX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIHB1c2hieXRlcyAweDAwMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMTctMjI3CiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBzdGF0ZSB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19jbG9zZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgIyBxdWlja19wbGF5X2VuYWJsZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgcXVpY2tfcGxheV9lbmFibGVkLAogICAgLy8gICAgIGxvYmJ5X3NpemU9bG9iYnlfc2l6ZSwKICAgIC8vICAgICBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIGJveF9sX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIC8vICAgICBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuUEhBU0VfRVhQSVJZX0lOVEVSVkFMKSwKICAgIC8vICAgICBwcml6ZV9wb3Q9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyApCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE3LTIxOAogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgc3RhdGUgdy8gdGhlIGN1cnJlbnQgZ2xvYmFsIGdhbWVfaWQgdmFsdWUgYXMga2V5CiAgICAvLyBzZWxmLmJveF9nYW1lX3N0YXRlW3NlbGYuZ2FtZV9pZF0gPSBzdGMuR2FtZVN0YXRlKAogICAgYnl0ZWMgNSAvLyAic18iCiAgICBkaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjE3LTIyNwogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgc3RhdGUgdy8gdGhlIGN1cnJlbnQgZ2xvYmFsIGdhbWVfaWQgdmFsdWUgYXMga2V5CiAgICAvLyBzZWxmLmJveF9nYW1lX3N0YXRlW3NlbGYuZ2FtZV9pZF0gPSBzdGMuR2FtZVN0YXRlKAogICAgLy8gICAgIHN0YWtpbmdfY2xvc2VkPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gICAgICMgcXVpY2tfcGxheV9lbmFibGVkPWFyYzQuQm9vbChGYWxzZSksICAjIHF1aWNrX3BsYXlfZW5hYmxlZCwKICAgIC8vICAgICBsb2JieV9zaXplPWxvYmJ5X3NpemUsCiAgICAvLyAgICAgYWN0aXZlX3BsYXllcnM9YXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBib3hfbF9zdGFydF9wb3M9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSksCiAgICAvLyAgICAgZXhwaXJ5X3RzPWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgY3N0LlBIQVNFX0VYUElSWV9JTlRFUlZBTCksCiAgICAvLyAgICAgcHJpemVfcG90PWFyYzQuVUludDY0KHN0YWtlX3BheS5hbW91bnQpLAogICAgLy8gICAgIGFkbWluX2FkZHJlc3M9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gKQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIzMS0yMzQKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSBnYW1lIGxvYmJ5IHcvIHRoZSBjdXJyZW50IGdsb2JhbCBnYW1lX2lkIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9sb2JieVtzZWxmLmdhbWVfaWRdID0gb3AuYnplcm8oCiAgICAvLyAgICAgY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlCiAgICAvLyApICAjIEFzc2lnbiB6ZXJvZWQgYnl0ZXMgdG8gc3RvcmUgYWxsIHBsYXllciBhZGRyZXNzZXMgaW4gbG9iYnkgKDMyIGJ5dGVzIHBlciBwbGF5ZXIpCiAgICBmcmFtZV9kaWcgMQogICAgYnplcm8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMzEtMjMyCiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBsb2JieSB3LyB0aGUgY3VycmVudCBnbG9iYWwgZ2FtZV9pZCB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfbG9iYnlbc2VsZi5nYW1lX2lkXSA9IG9wLmJ6ZXJvKAogICAgYnl0ZWMgNiAvLyAibF8iCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjIzMS0yMzQKICAgIC8vICMgQ3JlYXRlIGEgbmV3IGJveCBzdG9yYWdlIHVuaXQgZm9yIHRoZSBnYW1lIGxvYmJ5IHcvIHRoZSBjdXJyZW50IGdsb2JhbCBnYW1lX2lkIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9sb2JieVtzZWxmLmdhbWVfaWRdID0gb3AuYnplcm8oCiAgICAvLyAgICAgY3N0LkFERFJFU1NfU0laRSAqIGxvYmJ5X3NpemUubmF0aXZlCiAgICAvLyApICAjIEFzc2lnbiB6ZXJvZWQgYnl0ZXMgdG8gc3RvcmUgYWxsIHBsYXllciBhZGRyZXNzZXMgaW4gbG9iYnkgKDMyIGJ5dGVzIHBlciBwbGF5ZXIpCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyMzYtMjM3CiAgICAvLyAjIENyZWF0ZSBhIG5ldyBib3ggc3RvcmFnZSB1bml0IGZvciB0aGUgZ2FtZSBjaGFyYWN0ZXIgdy8gdGhlIHNlbmRlciBhZGRyZXNzIHZhbHVlIGFzIGtleQogICAgLy8gc2VsZi5ib3hfZ2FtZV9jaGFyYWN0ZXJbVHhuLnNlbmRlcl0gPSBzdGMuR2FtZUNoYXJhY3RlcigKICAgIGJ5dGVjXzIgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjM2LTI0NAogICAgLy8gIyBDcmVhdGUgYSBuZXcgYm94IHN0b3JhZ2UgdW5pdCBmb3IgdGhlIGdhbWUgY2hhcmFjdGVyIHcvIHRoZSBzZW5kZXIgYWRkcmVzcyB2YWx1ZSBhcyBrZXkKICAgIC8vIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyW1R4bi5zZW5kZXJdID0gc3RjLkdhbWVDaGFyYWN0ZXIoCiAgICAvLyAgICAgYXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgYXJjNC5VSW50OCg2KSwKICAgIC8vICAgICBhcmM0LlVJbnQ4KDUpLAogICAgLy8gICAgIGFyYzQuVUludDgoMCksCiAgICAvLyAgICAgYXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBhcmM0LlVJbnQyNTYoMCksCiAgICAvLyApCiAgICBwdXNoYnl0ZXMgMHgwMDA2MDUwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI1MAogICAgLy8gZ2FtZV9sb2JieV9icmVmLnJlcGxhY2UoMCwgVHhuLnNlbmRlci5ieXRlcykKICAgIGludGNfMSAvLyAwCiAgICB0eG4gU2VuZGVyCiAgICBib3hfcmVwbGFjZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI1Mi0yNTMKICAgIC8vICMgSW5jcmVtZW50IGdhbWUgaWQgYnkgMSBmb3IgbmV4dCBuZXcgZ2FtZSBpbnN0YW5jZQogICAgLy8gc2VsZi5nYW1lX2lkICs9IDEKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBieXRlYyA3IC8vICJnYW1lX2lkIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKbmV3X2dhbWVfYm9vbF9mYWxzZUA0OgogICAgaW50Y18xIC8vIDAKICAgIGIgbmV3X2dhbWVfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzLnNhbHZvLmNvbnRyYWN0LlNhbHZvLmNvbW1pdF90dXJuKGdhbWVfaWQ6IHVpbnQ2NCwgdHVybl9oYXNoOiBieXRlcykgLT4gdm9pZDoKY29tbWl0X3R1cm46CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjU1LTI2MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY29tbWl0X3R1cm4oCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsCiAgICAvLyAgICAgdHVybl9oYXNoOiBhcmM0LlVJbnQyNTYsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIHB1c2hieXRlcyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2MS0yNjMKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gIyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gMiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgLy8gYXNzZXJ0IGdhbWVfaWQgaW4gc2VsZi5ib3hfZ2FtZV9zdGF0ZSwgZXJyLkdBTUVfSURfTk9UX0ZPVU5ECiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGR1cAogICAgYnl0ZWMgNSAvLyAic18iCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gR2FtZSBJRCBub3QgZm91bmQuIEVuc3VyZSB0aGUgZ2FtZSB3YXMgY3JlYXRlZCBhbmQgc3RpbGwgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2NwogICAgLy8gYWNjb3VudD1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uYWN0aXZlX3BsYXllcnMubmF0aXZlLAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfc3RhdGUgZW50cnkgZXhpc3RzCiAgICBpbnRjXzMgLy8gMgogICAgZ2V0Ynl0ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjI1MS0yNTIKICAgIC8vICMgQ2FsY3VsYXRlIHRvdGFsIGJ5dGUgbGVuZ3RoIHRvIGl0ZXJhdGUgb3ZlciBiYXNlZCBvbiBwbGF5ZXIgY291bnQgYW5kIGFkZHJlc3Mgc2l6ZQogICAgLy8gZ2FtZV9sb2JieV9sZW5ndGggPSBwbGF5ZXJfY291bnQgKiBjc3QuQUREUkVTU19TSVpFCiAgICBpbnRjXzIgLy8gMzIKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9zdWJyb3V0aW5lcy5weToyNTQtMjU1CiAgICAvLyAjIEluaXRpYWxpemUgZmxhZyB0byB0cmFjayBpZiBhY2NvdW50IGlzIGZvdW5kIGluIGdhbWUKICAgIC8vIGFjY19pbl9nYW1lID0gRmFsc2UKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjU3LTI1OAogICAgLy8gIyBJdGVyYXRlIHRocm91Z2ggdGhlIGxvYmJ5IGJ5dGUgYXJyYXkgbGVuZ3RoIGluIDMyLWJ5dGUgY2h1bmtzIChvbmUgYWRkcmVzcyBwZXIgY2h1bmspCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9sb2JieV9sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZHVwCgpjb21taXRfdHVybl9mb3JfaGVhZGVyQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjU3LTI1OAogICAgLy8gIyBJdGVyYXRlIHRocm91Z2ggdGhlIGxvYmJ5IGJ5dGUgYXJyYXkgbGVuZ3RoIGluIDMyLWJ5dGUgY2h1bmtzIChvbmUgYWRkcmVzcyBwZXIgY2h1bmspCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9sb2JieV9sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyAzCiAgICA8CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfYnVyeSAwCiAgICBieiBjb21taXRfdHVybl9hZnRlcl9mb3JAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI2OAogICAgLy8gYm94X2dhbWVfbG9iYnk9c2VsZi5ib3hfZ2FtZV9sb2JieSwKICAgIGJ5dGVjIDYgLy8gImxfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjI1OS0yNjAKICAgIC8vICMgRXh0cmFjdCB0aGUgMzItYnl0ZSBwbGF5ZXIgYWRkcmVzcyBhdCBzdGFydCBpbmRleCBpCiAgICAvLyBwbGF5ZXJfYWRkcl9ieXRlcyA9IG9wLmV4dHJhY3QoYm94X2dhbWVfbG9iYnlbZ2FtZV9pZF0sIGksIGNzdC5BRERSRVNTX1NJWkUpCiAgICBmcmFtZV9kaWcgMQogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgQm94TWFwIGVudHJ5IGV4aXN0cwogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMiAvLyAzMgogICAgZXh0cmFjdDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9zdWJyb3V0aW5lcy5weToyNjItMjYzCiAgICAvLyAjIENoZWNrIGlmIHRoZSBleHRyYWN0ZWQgcGxheWVyIGFkZHJlc3MgYnl0ZXMgbWF0Y2ggdXAgd2l0aCB0aGUgYWNjb3VudCBieXRlcwogICAgLy8gaWYgYWNjb3VudC5ieXRlcyA9PSBwbGF5ZXJfYWRkcl9ieXRlczoKICAgIGZyYW1lX2RpZyAyCiAgICA9PQogICAgYnogY29tbWl0X3R1cm5fYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vc3Vicm91dGluZXMucHk6MjY0CiAgICAvLyBhY2NfaW5fZ2FtZSA9IFRydWUKICAgIGludGNfMCAvLyAxCiAgICBmcmFtZV9idXJ5IDAKCmNvbW1pdF90dXJuX2FmdGVyX2ZvckA4OgogICAgZnJhbWVfZGlnIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyNjUtMjcxCiAgICAvLyBhc3NlcnQgc3J0LmNoZWNrX2FjY19pbl9nYW1lKAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYm94X2dhbWVfbG9iYnk9c2VsZi5ib3hfZ2FtZV9sb2JieSwKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hY3RpdmVfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKSwgZXJyLlBMQVlFUl9OT1RfRk9VTkQKICAgIGFzc2VydCAvLyBQbGF5ZXIgbm90IGZvdW5kLiBFbnN1cmUgcGxheWVyIGFkZHJlc3MgaXMgaW5zaWRlIHRoZSBnYW1lIGxvYmJ5LgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI3NAogICAgLy8gc2VsZi5ib3hfZ2FtZV9jaGFyYWN0ZXJbVHhuLnNlbmRlcl0uaGFzX2NvbW1pdHRlZF90dXJuLm5hdGl2ZSAgIyBub3FhOiBFNzEyCiAgICBieXRlY18yIC8vICJjXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyIGVudHJ5IGV4aXN0cwogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zYWx2by9jb250cmFjdC5weToyNzQtMjc1CiAgICAvLyBzZWxmLmJveF9nYW1lX2NoYXJhY3RlcltUeG4uc2VuZGVyXS5oYXNfY29tbWl0dGVkX3R1cm4ubmF0aXZlICAjIG5vcWE6IEU3MTIKICAgIC8vID09IEZhbHNlCiAgICAhCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6MjczLTI3NgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLmJveF9nYW1lX2NoYXJhY3RlcltUeG4uc2VuZGVyXS5oYXNfY29tbWl0dGVkX3R1cm4ubmF0aXZlICAjIG5vcWE6IEU3MTIKICAgIC8vICAgICA9PSBGYWxzZQogICAgLy8gKQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2Fsdm8vY29udHJhY3QucHk6Mjc4CiAgICAvLyBzZWxmLmJveF9nYW1lX2NoYXJhY3RlcltUeG4uc2VuZGVyXS50dXJuX2hhc2ggPSB0dXJuX2hhc2gKICAgIGJ5dGVjXzIgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX2NoYXJhY3RlciBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgcmVwbGFjZTIgNQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gc2VsZi5ib3hfZ2FtZV9jaGFyYWN0ZXJbVHhuLnNlbmRlcl0uaGFzX2NvbW1pdHRlZF90dXJuID0gYXJjNC5Cb29sKAogICAgYnl0ZWNfMiAvLyAiY18iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjI3OS0yODEKICAgIC8vIHNlbGYuYm94X2dhbWVfY2hhcmFjdGVyW1R4bi5zZW5kZXJdLmhhc19jb21taXR0ZWRfdHVybiA9IGFyYzQuQm9vbCgKICAgIC8vICAgICBUcnVlICAjIG5vcWE6IEZCVDAwMwogICAgLy8gKQogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyAxCiAgICBzZXRiaXQKICAgIGJveF9wdXQKICAgIHJldHN1YgoKY29tbWl0X3R1cm5fYWZ0ZXJfaWZfZWxzZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL3N1YnJvdXRpbmVzLnB5OjI1Ny0yNTgKICAgIC8vICMgSXRlcmF0ZSB0aHJvdWdoIHRoZSBsb2JieSBieXRlIGFycmF5IGxlbmd0aCBpbiAzMi1ieXRlIGNodW5rcyAob25lIGFkZHJlc3MgcGVyIGNodW5rKQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfbG9iYnlfbGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMzIKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiBjb21taXRfdHVybl9mb3JfaGVhZGVyQDIKCgovLyBzbWFydF9jb250cmFjdHMuc2Fsdm8uY29udHJhY3QuU2Fsdm8udXBkYXRlKCkgLT4gdm9pZDoKdXBkYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjQxNwogICAgLy8gYXNzZXJ0IFRlbXBsYXRlVmFyW2Jvb2xdKCJVUERBVEFCTEUiKSwgZXJyLlVQREFUQUJMRV9OT1RfVFJVRQogICAgaW50YyA1IC8vIFRNUExfVVBEQVRBQkxFCiAgICBhc3NlcnQgLy8gVGVtcGxhdGUgdmFyaWFibGUgJ1VQREFUQUJMRScgbmVlZHMgdG8gYmUgJ1RydWUnIGF0IGRlcGxveS10aW1lLgogICAgLy8gc21hcnRfY29udHJhY3RzL3NhbHZvL2NvbnRyYWN0LnB5OjQxOAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgZXJyLlNFTkRFUl9OT1RfQ1JFQVRPUgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgYXBwIGNyZWF0b3IgY2FuIGFjdCBhcyB0aGUgc2VuZGVyIGFkZHJlc3MuCiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAGAQAgAgAAJggEFR98dQEAAmNfAmdfAnJfAnNfAmxfB2dhbWVfaWQxG0EAaYIOBGMzzZ0Etm0vVgSJlrs3BFOB1qgEeBX+QQQLQtEqBLv6jgEE+FBTrQQG8NEyBFviGfAEP/vKJASB6QVCBP0c12oEoOgYcjYaAI4OAUcBNwEgAQYA6wDSALkAngCKAH0AZwAjABAAAiNDMRmBBBJEMRhEiAS/IkMxGRREMRhENhoBFzYaAogEOiJDMRkURDEYRDEWgQUJSTgQIhJEMRaBBAlJOBAiEkQxFoEDCUk4ECISRDEWJQlJOBAiEkQxFiIJSTgQIhJENhoBiAJRIkMxGRREMRhEMRYiCUk4ECISRIgB9iJDMRkURDEYFESIAeQiQzEZFEQxGEQ2GgEXiAFVKExQsCJDMRkURDEYRDYaARfAHIgBNCkjTwJUKExQsCJDMRkURDEYRDYaAReIAQ0pI08CVChMULAiQzEZFEQxGEQ2GgEXiADnKSNPAlQoTFCwIkMxGRREMRhENhoBF8AciADAKSNPAlQoTFCwIkMxGRREMRhENhoBFzYaAjYaA4gAgShMULAiQzEZFEQxGEQ2GgEXNhoCiABeKExQsCJDMRkURDEYRCEEFihMULAiQzEZFEQxGEQ2GgE2GgKIACUWKExQsCJDigMBi/0Wi/5MUEm9RQFEi/8XSYF5DERMvkRMIliJigIBi/4Xi/8XCIGQAwuBxBMIiYoCAYv+K4v/iP/EiYoDAYv+F4ELC4v/FwgWSZOBCA5EVwcBi/0rTwKI/6SJigEBJwSL/1C+RQGJigEBi/8WK0xQvkUBiYoBAYv/FicFTFC+RQGJigEBKov/UL5FAYmKAQEjSYv/FicGTFBJvUUBRL5MSU8CRIACAABMFSOLBYsEDEEAVIsCiwUkWEmMAIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATiwOMAUEAFIsDVwIAiwBQSRUkChZXBgJMUIwBiwGMA4sFJAiMBUL/pIsDjACJJwciZ4mKAQAyBCUSRCcEMQBQvUUBFESL/zgAMQASRIv/OAcyChJEMgaBHggWgBEAAAAAAAAAAAAAAAAAAAAAAExQJwQxAFBMv4mKBgAyBIEGEkSL+jgIgfSsAw9Ei/s4CIG02AEPRIv9OAiL/xdJTgIkC0lOAhZJk4EQDkRXBgKAAQpMiP6JD0SL+jgAMQASRIv7OAAxABJEi/w4ADEAEkSL/TgAMQASRIv+OAAxABJEi/o4BzIKEkSL+zgHMgoSRIv8OAcyChJEi/04BzIKEkSL/jgHMgoSRIv/gAECp0EBCYv/gAEEpkEBAIsAJRhAAPkiRCMnB2VESRYrSwFQgHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvzIHgbAJCBaL/jgIFjEAKYv/UIABAVCAAgAgUE8DUE8CUExQJwVLAlBMv4sBrycGTwJQSbxISU8CvyoxAFCAJQAGBQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/IzEAuyIIJwdMZ4kjQv8EigIAgACL/hZJJwVMUEm9RQFEMQBMvkQlVSQLI0mLBYsDDIsEjABBABQnBosBUL5EiwUkWIsCEkEALyKMAIsARCoxAFC+RCNTKSNPAlQjUxREKjEAUEm+RIv/XAW/KjEAUEm+RCMiVL+JiwUkCIwFQv+rIQVEMQAyCRJEiQ==","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{"GEN_UNIX":{"type":"AVMUint64"},"UPDATABLE":{"type":"AVMUint64"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type GameCharacter = {
  hasCommittedTurn: boolean,
  id: number,
  position: number,
  movePoints: number,
  direction: number,
  turnHash: bigint
}


/**
 * Converts the ABI tuple representation of a GameCharacter to the struct representation
 */
export function GameCharacterFromTuple(abiTuple: [boolean, number, number, number, number, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameCharacter, APP_SPEC.structs) as GameCharacter
}

export type GameState = {
  stakingClosed: boolean,
  lobbySize: number,
  activePlayers: number,
  boxLStartPos: number,
  expiryTs: bigint,
  prizePot: bigint,
  adminAddress: string
}


/**
 * Converts the ABI tuple representation of a GameState to the struct representation
 */
export function GameStateFromTuple(abiTuple: [boolean, number, number, number, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameState, APP_SPEC.structs) as GameState
}

export type UserRegistry = {
  hostingGame: boolean,
  gameId: bigint,
  commitRandRound: bigint,
  expiryRound: bigint
}


/**
 * Converts the ABI tuple representation of a UserRegistry to the struct representation
 */
export function UserRegistryFromTuple(abiTuple: [boolean, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserRegistry, APP_SPEC.structs) as UserRegistry
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  GEN_UNIX: bigint,
  UPDATABLE: bigint,
}

/**
 * The argument types for the Salvo contract
 */
export type SalvoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'calc_single_box_cost(uint8,uint16)uint64': {
      keySize: bigint | number
      valueSize: bigint | number
    }
    'read_gen_unix()uint64': Record<string, never>
    'read_grid_cell_value_by_index(uint64,uint8)uint8': {
      gameId: bigint | number
      i: bigint | number
    }
    'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8': {
      gameId: bigint | number
      x: bigint | number
      y: bigint | number
    }
    'does_box_user_registry_exist(account)bool': {
      account: Uint8Array | string
    }
    'does_box_game_grid_exist(uint64)bool': {
      gameId: bigint | number
    }
    'does_box_game_state_exist(uint64)bool': {
      gameId: bigint | number
    }
    'does_box_game_character_exist(account)bool': {
      account: Uint8Array | string
    }
    'read_box_game_lobby(uint64)address[]': {
      gameId: bigint | number
    }
    'generate()void': Record<string, never>
    'get_box_user_registry(pay)void': {
      boxRPay: AppMethodCallTransactionArgument
    }
    'new_game(pay,pay,pay,pay,pay,uint8)void': {
      boxGPay: AppMethodCallTransactionArgument
      boxSPay: AppMethodCallTransactionArgument
      boxCPay: AppMethodCallTransactionArgument
      boxLPay: AppMethodCallTransactionArgument
      stakePay: AppMethodCallTransactionArgument
      lobbySize: bigint | number
    }
    'commit_turn(uint64,uint256)void': {
      gameId: bigint | number
      turnHash: bigint | number
    }
    'update()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'calc_single_box_cost(uint8,uint16)uint64': [keySize: bigint | number, valueSize: bigint | number]
    'read_gen_unix()uint64': []
    'read_grid_cell_value_by_index(uint64,uint8)uint8': [gameId: bigint | number, i: bigint | number]
    'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8': [gameId: bigint | number, x: bigint | number, y: bigint | number]
    'does_box_user_registry_exist(account)bool': [account: Uint8Array | string]
    'does_box_game_grid_exist(uint64)bool': [gameId: bigint | number]
    'does_box_game_state_exist(uint64)bool': [gameId: bigint | number]
    'does_box_game_character_exist(account)bool': [account: Uint8Array | string]
    'read_box_game_lobby(uint64)address[]': [gameId: bigint | number]
    'generate()void': []
    'get_box_user_registry(pay)void': [boxRPay: AppMethodCallTransactionArgument]
    'new_game(pay,pay,pay,pay,pay,uint8)void': [boxGPay: AppMethodCallTransactionArgument, boxSPay: AppMethodCallTransactionArgument, boxCPay: AppMethodCallTransactionArgument, boxLPay: AppMethodCallTransactionArgument, stakePay: AppMethodCallTransactionArgument, lobbySize: bigint | number]
    'commit_turn(uint64,uint256)void': [gameId: bigint | number, turnHash: bigint | number]
    'update()void': []
  }
}

/**
 * The return type for each method
 */
export type SalvoReturns = {
  'calc_single_box_cost(uint8,uint16)uint64': bigint
  'read_gen_unix()uint64': bigint
  'read_grid_cell_value_by_index(uint64,uint8)uint8': number
  'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8': number
  'does_box_user_registry_exist(account)bool': boolean
  'does_box_game_grid_exist(uint64)bool': boolean
  'does_box_game_state_exist(uint64)bool': boolean
  'does_box_game_character_exist(account)bool': boolean
  'read_box_game_lobby(uint64)address[]': string[]
  'generate()void': void
  'get_box_user_registry(pay)void': void
  'new_game(pay,pay,pay,pay,pay,uint8)void': void
  'commit_turn(uint64,uint256)void': void
  'update()void': void
}

/**
 * Defines the types of available calls and state of the Salvo smart contract.
 */
export type SalvoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'calc_single_box_cost(uint8,uint16)uint64' | 'calc_single_box_cost', {
      argsObj: SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64']
      argsTuple: SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']
      returns: SalvoReturns['calc_single_box_cost(uint8,uint16)uint64']
    }>
    & Record<'read_gen_unix()uint64' | 'read_gen_unix', {
      argsObj: SalvoArgs['obj']['read_gen_unix()uint64']
      argsTuple: SalvoArgs['tuple']['read_gen_unix()uint64']
      returns: SalvoReturns['read_gen_unix()uint64']
    }>
    & Record<'read_grid_cell_value_by_index(uint64,uint8)uint8' | 'read_grid_cell_value_by_index', {
      argsObj: SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8']
      argsTuple: SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']
      returns: SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8']
    }>
    & Record<'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8' | 'read_grid_cell_value_at_coords', {
      argsObj: SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
      argsTuple: SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
      returns: SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
    }>
    & Record<'does_box_user_registry_exist(account)bool' | 'does_box_user_registry_exist', {
      argsObj: SalvoArgs['obj']['does_box_user_registry_exist(account)bool']
      argsTuple: SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']
      returns: SalvoReturns['does_box_user_registry_exist(account)bool']
    }>
    & Record<'does_box_game_grid_exist(uint64)bool' | 'does_box_game_grid_exist', {
      argsObj: SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool']
      argsTuple: SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']
      returns: SalvoReturns['does_box_game_grid_exist(uint64)bool']
    }>
    & Record<'does_box_game_state_exist(uint64)bool' | 'does_box_game_state_exist', {
      argsObj: SalvoArgs['obj']['does_box_game_state_exist(uint64)bool']
      argsTuple: SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']
      returns: SalvoReturns['does_box_game_state_exist(uint64)bool']
    }>
    & Record<'does_box_game_character_exist(account)bool' | 'does_box_game_character_exist', {
      argsObj: SalvoArgs['obj']['does_box_game_character_exist(account)bool']
      argsTuple: SalvoArgs['tuple']['does_box_game_character_exist(account)bool']
      returns: SalvoReturns['does_box_game_character_exist(account)bool']
    }>
    & Record<'read_box_game_lobby(uint64)address[]' | 'read_box_game_lobby', {
      argsObj: SalvoArgs['obj']['read_box_game_lobby(uint64)address[]']
      argsTuple: SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']
      returns: SalvoReturns['read_box_game_lobby(uint64)address[]']
    }>
    & Record<'generate()void' | 'generate', {
      argsObj: SalvoArgs['obj']['generate()void']
      argsTuple: SalvoArgs['tuple']['generate()void']
      returns: SalvoReturns['generate()void']
    }>
    & Record<'get_box_user_registry(pay)void' | 'get_box_user_registry', {
      argsObj: SalvoArgs['obj']['get_box_user_registry(pay)void']
      argsTuple: SalvoArgs['tuple']['get_box_user_registry(pay)void']
      returns: SalvoReturns['get_box_user_registry(pay)void']
    }>
    & Record<'new_game(pay,pay,pay,pay,pay,uint8)void' | 'new_game', {
      argsObj: SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void']
      argsTuple: SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']
      returns: SalvoReturns['new_game(pay,pay,pay,pay,pay,uint8)void']
    }>
    & Record<'commit_turn(uint64,uint256)void' | 'commit_turn', {
      argsObj: SalvoArgs['obj']['commit_turn(uint64,uint256)void']
      argsTuple: SalvoArgs['tuple']['commit_turn(uint64,uint256)void']
      returns: SalvoReturns['commit_turn(uint64,uint256)void']
    }>
    & Record<'update()void' | 'update', {
      argsObj: SalvoArgs['obj']['update()void']
      argsTuple: SalvoArgs['tuple']['update()void']
      returns: SalvoReturns['update()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        boxUserRegistry: Map<string, UserRegistry>
        boxGameGrid: Map<bigint | number, [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]>
        boxGameState: Map<bigint | number, GameState>
        boxGameLobby: Map<bigint | number, Uint8Array>
        boxGameCharacter: Map<string, GameCharacter>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SalvoSignatures = keyof SalvoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SalvoNonVoidMethodSignatures = keyof SalvoTypes['methods'] extends infer T ? T extends keyof SalvoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Salvo smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SalvoSignatures> = SalvoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Salvo smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SalvoSignatures> = SalvoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SalvoTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = SalvoTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SalvoCreateCallParams =
  | Expand<CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & {method: 'generate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & {method: 'generate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type SalvoUpdateCallParams =
  | Expand<CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & {method: 'update'}>
  | Expand<CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & {method: 'update()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type SalvoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SalvoCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: SalvoUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Salvo smart contract
 */
export abstract class SalvoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends SalvoCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'generate':
          case 'generate()void':
            return SalvoParamsFactory.create.generate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Salvo smart contract using the generate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      generate(params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'generate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends SalvoUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update':
          case 'update()void':
            return SalvoParamsFactory.update.update(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the Salvo smart contract using the update()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      update(params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the calc_single_box_cost(uint8,uint16)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calcSingleBoxCost(params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calc_single_box_cost(uint8,uint16)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.keySize, params.args.valueSize],
    }
  }
  /**
   * Constructs a no op call for the read_gen_unix()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGenUnix(params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_gen_unix()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the read_grid_cell_value_by_index(uint64,uint8)uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGridCellValueByIndex(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_grid_cell_value_by_index(uint64,uint8)uint8' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.i],
    }
  }
  /**
   * Constructs a no op call for the read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGridCellValueAtCoords(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.x, params.args.y],
    }
  }
  /**
   * Constructs a no op call for the does_box_user_registry_exist(account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxUserRegistryExist(params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_user_registry_exist(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_grid_exist(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameGridExist(params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_grid_exist(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_state_exist(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameStateExist(params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_state_exist(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_character_exist(account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameCharacterExist(params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_character_exist(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the read_box_game_lobby(uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBoxGameLobby(params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_box_game_lobby(uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the get_box_user_registry(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxUserRegistry(params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_box_user_registry(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxRPay],
    }
  }
  /**
   * Constructs a no op call for the new_game(pay,pay,pay,pay,pay,uint8)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static newGame(params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'new_game(pay,pay,pay,pay,pay,uint8)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxGPay, params.args.boxSPay, params.args.boxCPay, params.args.boxLPay, params.args.stakePay, params.args.lobbySize],
    }
  }
  /**
   * Constructs a no op call for the commit_turn(uint64,uint256)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static commitTurn(params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'commit_turn(uint64,uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.turnHash],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Salvo smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SalvoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SalvoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SalvoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SalvoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Salvo smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SalvoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? SalvoParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (SalvoCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? SalvoParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (SalvoUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new SalvoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Salvo smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      generate: (params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(SalvoParamsFactory.create.generate(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the Salvo smart contract using the update()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(SalvoParamsFactory.update.update(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Salvo smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      generate: (params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(SalvoParamsFactory.create.generate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Salvo smart contract using an ABI method call using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      generate: async (params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(SalvoParamsFactory.create.generate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | SalvoReturns['generate()void']) }, appClient: new SalvoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Salvo smart contract
 */
export class SalvoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SalvoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Salvo app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SalvoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SalvoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SalvoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SalvoClient> {
    return new SalvoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SalvoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SalvoClient> {
    return new SalvoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Salvo smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(SalvoParamsFactory.update.update(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Salvo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calcSingleBoxCost: (params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGenUnix: (params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SalvoParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGridCellValueByIndex: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.readGridCellValueByIndex(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGridCellValueAtCoords: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxUserRegistryExist: (params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameGridExist: (params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxGameGridExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameStateExist: (params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxGameStateExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameCharacterExist: (params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readBoxGameLobby: (params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.readBoxGameLobby(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `get_box_user_registry(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxUserRegistry: (params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.getBoxUserRegistry(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `new_game(pay,pay,pay,pay,pay,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    newGame: (params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `commit_turn(uint64,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    commitTurn: (params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.commitTurn(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Salvo smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(SalvoParamsFactory.update.update(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Salvo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calcSingleBoxCost: (params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGenUnix: (params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGridCellValueByIndex: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readGridCellValueByIndex(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGridCellValueAtCoords: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxUserRegistryExist: (params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameGridExist: (params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxGameGridExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameStateExist: (params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxGameStateExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameCharacterExist: (params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readBoxGameLobby: (params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readBoxGameLobby(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `get_box_user_registry(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxUserRegistry: (params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.getBoxUserRegistry(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `new_game(pay,pay,pay,pay,pay,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    newGame: (params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `commit_turn(uint64,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    commitTurn: (params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.commitTurn(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Salvo smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      update: async (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(SalvoParamsFactory.update.update(params))
        return {...result, return: result.return as unknown as (undefined | SalvoReturns['update()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Salvo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calcSingleBoxCost: async (params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.calcSingleBoxCost(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['calc_single_box_cost(uint8,uint16)uint64'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGenUnix: async (params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readGenUnix(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_gen_unix()uint64'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGridCellValueByIndex: async (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueByIndex(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGridCellValueAtCoords: async (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxUserRegistryExist: async (params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_user_registry_exist(account)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameGridExist: async (params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameGridExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_game_grid_exist(uint64)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameStateExist: async (params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameStateExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_game_state_exist(uint64)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameCharacterExist: async (params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_game_character_exist(account)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readBoxGameLobby: async (params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readBoxGameLobby(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_box_game_lobby(uint64)address[]'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `get_box_user_registry(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxUserRegistry: async (params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.getBoxUserRegistry(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['get_box_user_registry(pay)void'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `new_game(pay,pay,pay,pay,pay,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    newGame: async (params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.newGame(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['new_game(pay,pay,pay,pay,pay,uint8)void'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `commit_turn(uint64,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    commitTurn: async (params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.commitTurn(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['commit_turn(uint64,uint256)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SalvoClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calcSingleBoxCost(params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.calcSingleBoxCost(params))
    return result.return as unknown as SalvoReturns['calc_single_box_cost(uint8,uint16)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGenUnix(params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readGenUnix(params))
    return result.return as unknown as SalvoReturns['read_gen_unix()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGridCellValueByIndex(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueByIndex(params))
    return result.return as unknown as SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGridCellValueAtCoords(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
    return result.return as unknown as SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxUserRegistryExist(params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
    return result.return as unknown as SalvoReturns['does_box_user_registry_exist(account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameGridExist(params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameGridExist(params))
    return result.return as unknown as SalvoReturns['does_box_game_grid_exist(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameStateExist(params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameStateExist(params))
    return result.return as unknown as SalvoReturns['does_box_game_state_exist(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameCharacterExist(params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
    return result.return as unknown as SalvoReturns['does_box_game_character_exist(account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readBoxGameLobby(params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readBoxGameLobby(params))
    return result.return as unknown as SalvoReturns['read_box_game_lobby(uint64)address[]']
  }

  /**
   * Methods to access state for the current Salvo app
   */
  state = {
    /**
     * Methods to access global state for the current Salvo app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameId: result.game_id,
        }
      },
      /**
       * Get the current value of the game_id key in global state
       */
      gameId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("game_id")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Salvo app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the box_user_registry map in box state
       */
      boxUserRegistry: {
        /**
         * Get all current values of the box_user_registry map in box state
         */
        getMap: async (): Promise<Map<string, UserRegistry>> => { return (await this.appClient.state.box.getMap("box_user_registry")) as Map<string, UserRegistry> },
        /**
         * Get a current value of the box_user_registry map by key from box state
         */
        value: async (key: string): Promise<UserRegistry | undefined> => { return await this.appClient.state.box.getMapValue("box_user_registry", key) as UserRegistry | undefined },
      },
      /**
       * Get values from the box_game_grid map in box state
       */
      boxGameGrid: {
        /**
         * Get all current values of the box_game_grid map in box state
         */
        getMap: async (): Promise<Map<bigint, [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]>> => { return (await this.appClient.state.box.getMap("box_game_grid")) as Map<bigint, [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]> },
        /**
         * Get a current value of the box_game_grid map by key from box state
         */
        value: async (key: bigint | number): Promise<[number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] | undefined> => { return await this.appClient.state.box.getMapValue("box_game_grid", key) as [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] | undefined },
      },
      /**
       * Get values from the box_game_state map in box state
       */
      boxGameState: {
        /**
         * Get all current values of the box_game_state map in box state
         */
        getMap: async (): Promise<Map<bigint, GameState>> => { return (await this.appClient.state.box.getMap("box_game_state")) as Map<bigint, GameState> },
        /**
         * Get a current value of the box_game_state map by key from box state
         */
        value: async (key: bigint | number): Promise<GameState | undefined> => { return await this.appClient.state.box.getMapValue("box_game_state", key) as GameState | undefined },
      },
      /**
       * Get values from the box_game_lobby map in box state
       */
      boxGameLobby: {
        /**
         * Get all current values of the box_game_lobby map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("box_game_lobby")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the box_game_lobby map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("box_game_lobby", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the box_game_character map in box state
       */
      boxGameCharacter: {
        /**
         * Get all current values of the box_game_character map in box state
         */
        getMap: async (): Promise<Map<string, GameCharacter>> => { return (await this.appClient.state.box.getMap("box_game_character")) as Map<string, GameCharacter> },
        /**
         * Get a current value of the box_game_character map by key from box state
         */
        value: async (key: string): Promise<GameCharacter | undefined> => { return await this.appClient.state.box.getMapValue("box_game_character", key) as GameCharacter | undefined },
      },
    },
  }

  public newGroup(): SalvoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a calc_single_box_cost(uint8,uint16)uint64 method call against the Salvo contract
       */
      calcSingleBoxCost(params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calcSingleBoxCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('calc_single_box_cost(uint8,uint16)uint64', v))
        return this
      },
      /**
       * Add a read_gen_unix()uint64 method call against the Salvo contract
       */
      readGenUnix(params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGenUnix(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_gen_unix()uint64', v))
        return this
      },
      /**
       * Add a read_grid_cell_value_by_index(uint64,uint8)uint8 method call against the Salvo contract
       */
      readGridCellValueByIndex(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGridCellValueByIndex(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_grid_cell_value_by_index(uint64,uint8)uint8', v))
        return this
      },
      /**
       * Add a read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 method call against the Salvo contract
       */
      readGridCellValueAtCoords(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGridCellValueAtCoords(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8', v))
        return this
      },
      /**
       * Add a does_box_user_registry_exist(account)bool method call against the Salvo contract
       */
      doesBoxUserRegistryExist(params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxUserRegistryExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_user_registry_exist(account)bool', v))
        return this
      },
      /**
       * Add a does_box_game_grid_exist(uint64)bool method call against the Salvo contract
       */
      doesBoxGameGridExist(params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameGridExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_grid_exist(uint64)bool', v))
        return this
      },
      /**
       * Add a does_box_game_state_exist(uint64)bool method call against the Salvo contract
       */
      doesBoxGameStateExist(params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameStateExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_state_exist(uint64)bool', v))
        return this
      },
      /**
       * Add a does_box_game_character_exist(account)bool method call against the Salvo contract
       */
      doesBoxGameCharacterExist(params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameCharacterExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_character_exist(account)bool', v))
        return this
      },
      /**
       * Add a read_box_game_lobby(uint64)address[] method call against the Salvo contract
       */
      readBoxGameLobby(params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBoxGameLobby(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_box_game_lobby(uint64)address[]', v))
        return this
      },
      /**
       * Add a get_box_user_registry(pay)void method call against the Salvo contract
       */
      getBoxUserRegistry(params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxUserRegistry(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a new_game(pay,pay,pay,pay,pay,uint8)void method call against the Salvo contract
       */
      newGame(params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.newGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a commit_turn(uint64,uint256)void method call against the Salvo contract
       */
      commitTurn(params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.commitTurn(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.update(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Salvo contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SalvoComposer
  }
}
export type SalvoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the calc_single_box_cost(uint8,uint16)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calcSingleBoxCost(params?: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>): SalvoComposer<[...TReturns, SalvoReturns['calc_single_box_cost(uint8,uint16)uint64'] | undefined]>

  /**
   * Calls the read_gen_unix()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGenUnix(params?: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']>): SalvoComposer<[...TReturns, SalvoReturns['read_gen_unix()uint64'] | undefined]>

  /**
   * Calls the read_grid_cell_value_by_index(uint64,uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGridCellValueByIndex(params?: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']>): SalvoComposer<[...TReturns, SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8'] | undefined]>

  /**
   * Calls the read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGridCellValueAtCoords(params?: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']>): SalvoComposer<[...TReturns, SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | undefined]>

  /**
   * Calls the does_box_user_registry_exist(account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxUserRegistryExist(params?: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_user_registry_exist(account)bool'] | undefined]>

  /**
   * Calls the does_box_game_grid_exist(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameGridExist(params?: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_game_grid_exist(uint64)bool'] | undefined]>

  /**
   * Calls the does_box_game_state_exist(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameStateExist(params?: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_game_state_exist(uint64)bool'] | undefined]>

  /**
   * Calls the does_box_game_character_exist(account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameCharacterExist(params?: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_game_character_exist(account)bool'] | undefined]>

  /**
   * Calls the read_box_game_lobby(uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxGameLobby(params?: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']>): SalvoComposer<[...TReturns, SalvoReturns['read_box_game_lobby(uint64)address[]'] | undefined]>

  /**
   * Calls the get_box_user_registry(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxUserRegistry(params?: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']>): SalvoComposer<[...TReturns, SalvoReturns['get_box_user_registry(pay)void'] | undefined]>

  /**
   * Calls the new_game(pay,pay,pay,pay,pay,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newGame(params?: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']>): SalvoComposer<[...TReturns, SalvoReturns['new_game(pay,pay,pay,pay,pay,uint8)void'] | undefined]>

  /**
   * Calls the commit_turn(uint64,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  commitTurn(params?: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']>): SalvoComposer<[...TReturns, SalvoReturns['commit_turn(uint64,uint256)void'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Salvo smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(params?: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']>): SalvoComposer<[...TReturns, SalvoReturns['update()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Salvo smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SalvoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SalvoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SalvoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SalvoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SalvoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SalvoComposerResults<TReturns>>
}
export type SalvoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

