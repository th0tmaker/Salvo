/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Salvo","structs":{"GameCharacter":[{"name":"hasCommittedTurn","type":"bool"},{"name":"id","type":"uint8"},{"name":"position","type":"uint8"},{"name":"movePoints","type":"uint8"},{"name":"direction","type":"uint8"},{"name":"turnHash","type":"uint256"}],"GameState":[{"name":"stakingClosed","type":"bool"},{"name":"lobbySize","type":"uint8"},{"name":"activePlayers","type":"uint8"},{"name":"boxLStartPos","type":"uint16"},{"name":"expiryTs","type":"uint64"},{"name":"prizePot","type":"uint64"},{"name":"adminAddress","type":"address"}],"UserRegistry":[{"name":"hostingGame","type":"bool"},{"name":"gameId","type":"uint64"},{"name":"commitRandRound","type":"uint64"},{"name":"expiryRound","type":"uint64"}]},"methods":[{"name":"calc_single_box_cost","args":[{"type":"uint8","name":"key_size"},{"type":"uint16","name":"value_size"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_gen_unix","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_grid_cell_value_by_index","args":[{"type":"uint64","name":"game_id"},{"type":"uint8","name":"i"}],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_grid_cell_value_at_coords","args":[{"type":"uint64","name":"game_id"},{"type":"uint8","name":"x"},{"type":"uint8","name":"y"}],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_user_registry_exist","args":[{"type":"account","name":"account"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_grid_exist","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_state_exist","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_character_exist","args":[{"type":"account","name":"account"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_box_game_lobby","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"generate","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_box_user_registry","args":[{"type":"pay","name":"box_r_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"new_game","args":[{"type":"pay","name":"box_g_pay"},{"type":"pay","name":"box_s_pay"},{"type":"pay","name":"box_c_pay"},{"type":"pay","name":"box_l_pay"},{"type":"pay","name":"stake_pay"},{"type":"uint8","name":"lobby_size"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"commit_turn","args":[{"type":"uint64","name":"game_id"},{"type":"uint256","name":"turn_hash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"mimc_tester","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"update","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"game_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZV9pZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"box_user_registry":{"keyType":"address","valueType":"UserRegistry","prefix":"cl8="},"box_game_grid":{"keyType":"uint64","valueType":"uint8[121]","prefix":"Z18="},"box_game_state":{"keyType":"uint64","valueType":"GameState","prefix":"c18="},"box_game_lobby":{"keyType":"uint64","valueType":"AVMBytes","prefix":"bF8="},"box_game_character":{"keyType":"address","valueType":"GameCharacter","prefix":"Y18="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[783],"errorMessage":"Box found. Ensure the box does not exist."},{"pc":[799,945,953,961,969,977],"errorMessage":"Box payment receiver address must match application address."},{"pc":[791,905,913,921,929],"errorMessage":"Box payment sender address must match transaction sender address."},{"pc":[505,650,1273],"errorMessage":"Game ID not found. Ensure the game was created and still exists."},{"pc":[519],"errorMessage":"Index access is out of bounds"},{"pc":[853,863,897],"errorMessage":"Insufficient payment amount. Value is not enough to cover the minimum requirements."},{"pc":[1004],"errorMessage":"Invalid Lobby size. Value must be an even number and within permitted bounds."},{"pc":[773,843],"errorMessage":"Invalid group size. Ensure number of transactions in group is within valid bounds."},{"pc":[513],"errorMessage":"Invalid position index. Ensure index value is within valid range."},{"pc":[136,160,179,247,269,282,302,329,354,379,406,432,455,471],"errorMessage":"OnCompletion is not NoOp"},{"pc":[124],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[1488],"errorMessage":"Only app creator can act as the sender address."},{"pc":[1319],"errorMessage":"Player not found. Ensure player address is inside the game lobby."},{"pc":[937],"errorMessage":"Stake payment sender address must match sender address."},{"pc":[1482],"errorMessage":"Template variable 'UPDATABLE' needs to be 'True' at deploy-time."},{"pc":[273],"errorMessage":"can only call when creating"},{"pc":[127,139,163,182,250,285,305,332,357,382,409,435,458,474],"errorMessage":"can only call when not creating"},{"pc":[516,1303],"errorMessage":"check BoxMap entry exists"},{"pc":[1325,1343,1355],"errorMessage":"check self.box_game_character entry exists"},{"pc":[656],"errorMessage":"check self.box_game_lobby entry exists"},{"pc":[1278],"errorMessage":"check self.box_game_state entry exists"},{"pc":[1009],"errorMessage":"check self.game_id exists"},{"pc":[571,885],"errorMessage":"overflow"},{"pc":[193,204,215,225,235,260],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAGAQAgAgAAJgkEFR98dQEAAmNfAmdfAnJfAnNfAmxfB2dhbWVfaWQDBoEBMRtBAHCCDwRjM82dBLZtL1YEiZa7NwRTgdaoBHgV/kEEC0LRKgS7+o4BBPhQU60EBvDRMgRb4hnwBD/7yiQEgekFQgT9HNdqBPcXIUgEoOgYcjYaAI4PAV8BTwE4AR4BAwDqANEAtgCiAJUAfwA7ACgAEAACI0MxGYEEEkQxGESIBUUiQzEZFEQxGESIBMtJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXNhoCiAQ6IkMxGRREMRhEMRaBBQlJOBAiEkQxFoEECUk4ECISRDEWgQMJSTgQIhJEMRYlCUk4ECISRDEWIglJOBAiEkQ2GgGIAlEiQzEZFEQxGEQxFiIJSTgQIhJEiAH2IkMxGRREMRgURIgB5CJDMRkURDEYRDYaAReIAVUoTFCwIkMxGRREMRhENhoBF8AciAE0KSNPAlQoTFCwIkMxGRREMRhENhoBF4gBDSkjTwJUKExQsCJDMRkURDEYRDYaAReIAOcpI08CVChMULAiQzEZFEQxGEQ2GgEXwByIAMApI08CVChMULAiQzEZFEQxGEQ2GgEXNhoCNhoDiACBKExQsCJDMRkURDEYRDYaARc2GgKIAF4oTFCwIkMxGRREMRhEIQQWKExQsCJDMRkURDEYRDYaATYaAogAJRYoTFCwIkOKAwGL/RaL/kxQSb1FAUSL/xdJgXkMREy+REwiWImKAgGL/heL/xcIgZADC4HEEwiJigIBi/4ri/+I/8SJigMBi/4XgQsLi/8XCBZJk4EIDkRXBwGL/StPAoj/pImKAQEnBIv/UL5FAYmKAQGL/xYrTFC+RQGJigEBi/8WJwVMUL5FAYmKAQEqi/9QvkUBiYoBASNJi/8WJwZMUEm9RQFEvkxJTwJEgAIAAEwVI4sFiwQMQQBUiwKLBSRYSYwAgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOLA4wBQQAUiwNXAgCLAFBJFSQKFlcGAkxQjAGLAYwDiwUkCIwFQv+kiwOMAIknByJniYoBADIEJRJEJwQxAFC9RQEURIv/OAAxABJEi/84BzIKEkQyBoEeCBaAEQAAAAAAAAAAAAAAAAAAAAAATFAnBDEAUEy/iYoGADIEgQYSRIv6OAiB9KwDD0SL+zgIgbTYAQ9Ei/04CIv/F0lOAiQLSU4CFkmTgRAORFcGAoABCkyI/okPRIv6OAAxABJEi/s4ADEAEkSL/DgAMQASRIv9OAAxABJEi/44ADEAEkSL+jgHMgoSRIv7OAcyChJEi/w4BzIKEkSL/TgHMgoSRIv+OAcyChJEi/+AAQKnQQEJi/+AAQSmQQEAiwAlGEAA+SJEIycHZURJFitLAVCAeQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/MgeBsAkIFov+OAgWMQApi/9QgAEBUIACACBQTwNQTwJQTFAnBUsCUEy/iwGvJwZPAlBJvEhJTwK/KjEAUIAlAAYFAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL8jMQC7IggnB0xniSNC/wSKAgCAAIv+FkknBUxQSb1FAUQxAEy+RCVVJAsjSYsFiwMMiwSMAEEAFCcGiwFQvkSLBSRYiwISQQAvIowAiwBEKjEAUL5EI1MpI08CVCNTFEQqMQBQSb5Ei/9cBb8qMQBQSb5EIyJUv4mLBSQIjAVC/6uKAAEjgACBgpgEMgwNQQAYsYEGshCBBbIZJwiyHicIsh8jsgGzQv/egACMACOMAYsBgXkMQQAwiwCAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUIwAiwEiCIwBQv/IiwDmAYwAiSEFRDEAMgkSRIk=","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{"GEN_UNIX":{"type":"AVMUint64"},"UPDATABLE":{"type":"AVMUint64"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type GameCharacter = {
  hasCommittedTurn: boolean,
  id: number,
  position: number,
  movePoints: number,
  direction: number,
  turnHash: bigint
}


/**
 * Converts the ABI tuple representation of a GameCharacter to the struct representation
 */
export function GameCharacterFromTuple(abiTuple: [boolean, number, number, number, number, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameCharacter, APP_SPEC.structs) as GameCharacter
}

export type GameState = {
  stakingClosed: boolean,
  lobbySize: number,
  activePlayers: number,
  boxLStartPos: number,
  expiryTs: bigint,
  prizePot: bigint,
  adminAddress: string
}


/**
 * Converts the ABI tuple representation of a GameState to the struct representation
 */
export function GameStateFromTuple(abiTuple: [boolean, number, number, number, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameState, APP_SPEC.structs) as GameState
}

export type UserRegistry = {
  hostingGame: boolean,
  gameId: bigint,
  commitRandRound: bigint,
  expiryRound: bigint
}


/**
 * Converts the ABI tuple representation of a UserRegistry to the struct representation
 */
export function UserRegistryFromTuple(abiTuple: [boolean, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserRegistry, APP_SPEC.structs) as UserRegistry
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  GEN_UNIX: bigint,
  UPDATABLE: bigint,
}

/**
 * The argument types for the Salvo contract
 */
export type SalvoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'calc_single_box_cost(uint8,uint16)uint64': {
      keySize: bigint | number
      valueSize: bigint | number
    }
    'read_gen_unix()uint64': Record<string, never>
    'read_grid_cell_value_by_index(uint64,uint8)uint8': {
      gameId: bigint | number
      i: bigint | number
    }
    'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8': {
      gameId: bigint | number
      x: bigint | number
      y: bigint | number
    }
    'does_box_user_registry_exist(account)bool': {
      account: Uint8Array | string
    }
    'does_box_game_grid_exist(uint64)bool': {
      gameId: bigint | number
    }
    'does_box_game_state_exist(uint64)bool': {
      gameId: bigint | number
    }
    'does_box_game_character_exist(account)bool': {
      account: Uint8Array | string
    }
    'read_box_game_lobby(uint64)address[]': {
      gameId: bigint | number
    }
    'generate()void': Record<string, never>
    'get_box_user_registry(pay)void': {
      boxRPay: AppMethodCallTransactionArgument
    }
    'new_game(pay,pay,pay,pay,pay,uint8)void': {
      boxGPay: AppMethodCallTransactionArgument
      boxSPay: AppMethodCallTransactionArgument
      boxCPay: AppMethodCallTransactionArgument
      boxLPay: AppMethodCallTransactionArgument
      stakePay: AppMethodCallTransactionArgument
      lobbySize: bigint | number
    }
    'commit_turn(uint64,uint256)void': {
      gameId: bigint | number
      turnHash: bigint | number
    }
    'mimc_tester()byte[]': Record<string, never>
    'update()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'calc_single_box_cost(uint8,uint16)uint64': [keySize: bigint | number, valueSize: bigint | number]
    'read_gen_unix()uint64': []
    'read_grid_cell_value_by_index(uint64,uint8)uint8': [gameId: bigint | number, i: bigint | number]
    'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8': [gameId: bigint | number, x: bigint | number, y: bigint | number]
    'does_box_user_registry_exist(account)bool': [account: Uint8Array | string]
    'does_box_game_grid_exist(uint64)bool': [gameId: bigint | number]
    'does_box_game_state_exist(uint64)bool': [gameId: bigint | number]
    'does_box_game_character_exist(account)bool': [account: Uint8Array | string]
    'read_box_game_lobby(uint64)address[]': [gameId: bigint | number]
    'generate()void': []
    'get_box_user_registry(pay)void': [boxRPay: AppMethodCallTransactionArgument]
    'new_game(pay,pay,pay,pay,pay,uint8)void': [boxGPay: AppMethodCallTransactionArgument, boxSPay: AppMethodCallTransactionArgument, boxCPay: AppMethodCallTransactionArgument, boxLPay: AppMethodCallTransactionArgument, stakePay: AppMethodCallTransactionArgument, lobbySize: bigint | number]
    'commit_turn(uint64,uint256)void': [gameId: bigint | number, turnHash: bigint | number]
    'mimc_tester()byte[]': []
    'update()void': []
  }
}

/**
 * The return type for each method
 */
export type SalvoReturns = {
  'calc_single_box_cost(uint8,uint16)uint64': bigint
  'read_gen_unix()uint64': bigint
  'read_grid_cell_value_by_index(uint64,uint8)uint8': number
  'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8': number
  'does_box_user_registry_exist(account)bool': boolean
  'does_box_game_grid_exist(uint64)bool': boolean
  'does_box_game_state_exist(uint64)bool': boolean
  'does_box_game_character_exist(account)bool': boolean
  'read_box_game_lobby(uint64)address[]': string[]
  'generate()void': void
  'get_box_user_registry(pay)void': void
  'new_game(pay,pay,pay,pay,pay,uint8)void': void
  'commit_turn(uint64,uint256)void': void
  'mimc_tester()byte[]': Uint8Array
  'update()void': void
}

/**
 * Defines the types of available calls and state of the Salvo smart contract.
 */
export type SalvoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'calc_single_box_cost(uint8,uint16)uint64' | 'calc_single_box_cost', {
      argsObj: SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64']
      argsTuple: SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']
      returns: SalvoReturns['calc_single_box_cost(uint8,uint16)uint64']
    }>
    & Record<'read_gen_unix()uint64' | 'read_gen_unix', {
      argsObj: SalvoArgs['obj']['read_gen_unix()uint64']
      argsTuple: SalvoArgs['tuple']['read_gen_unix()uint64']
      returns: SalvoReturns['read_gen_unix()uint64']
    }>
    & Record<'read_grid_cell_value_by_index(uint64,uint8)uint8' | 'read_grid_cell_value_by_index', {
      argsObj: SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8']
      argsTuple: SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']
      returns: SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8']
    }>
    & Record<'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8' | 'read_grid_cell_value_at_coords', {
      argsObj: SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
      argsTuple: SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
      returns: SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
    }>
    & Record<'does_box_user_registry_exist(account)bool' | 'does_box_user_registry_exist', {
      argsObj: SalvoArgs['obj']['does_box_user_registry_exist(account)bool']
      argsTuple: SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']
      returns: SalvoReturns['does_box_user_registry_exist(account)bool']
    }>
    & Record<'does_box_game_grid_exist(uint64)bool' | 'does_box_game_grid_exist', {
      argsObj: SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool']
      argsTuple: SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']
      returns: SalvoReturns['does_box_game_grid_exist(uint64)bool']
    }>
    & Record<'does_box_game_state_exist(uint64)bool' | 'does_box_game_state_exist', {
      argsObj: SalvoArgs['obj']['does_box_game_state_exist(uint64)bool']
      argsTuple: SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']
      returns: SalvoReturns['does_box_game_state_exist(uint64)bool']
    }>
    & Record<'does_box_game_character_exist(account)bool' | 'does_box_game_character_exist', {
      argsObj: SalvoArgs['obj']['does_box_game_character_exist(account)bool']
      argsTuple: SalvoArgs['tuple']['does_box_game_character_exist(account)bool']
      returns: SalvoReturns['does_box_game_character_exist(account)bool']
    }>
    & Record<'read_box_game_lobby(uint64)address[]' | 'read_box_game_lobby', {
      argsObj: SalvoArgs['obj']['read_box_game_lobby(uint64)address[]']
      argsTuple: SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']
      returns: SalvoReturns['read_box_game_lobby(uint64)address[]']
    }>
    & Record<'generate()void' | 'generate', {
      argsObj: SalvoArgs['obj']['generate()void']
      argsTuple: SalvoArgs['tuple']['generate()void']
      returns: SalvoReturns['generate()void']
    }>
    & Record<'get_box_user_registry(pay)void' | 'get_box_user_registry', {
      argsObj: SalvoArgs['obj']['get_box_user_registry(pay)void']
      argsTuple: SalvoArgs['tuple']['get_box_user_registry(pay)void']
      returns: SalvoReturns['get_box_user_registry(pay)void']
    }>
    & Record<'new_game(pay,pay,pay,pay,pay,uint8)void' | 'new_game', {
      argsObj: SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void']
      argsTuple: SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']
      returns: SalvoReturns['new_game(pay,pay,pay,pay,pay,uint8)void']
    }>
    & Record<'commit_turn(uint64,uint256)void' | 'commit_turn', {
      argsObj: SalvoArgs['obj']['commit_turn(uint64,uint256)void']
      argsTuple: SalvoArgs['tuple']['commit_turn(uint64,uint256)void']
      returns: SalvoReturns['commit_turn(uint64,uint256)void']
    }>
    & Record<'mimc_tester()byte[]' | 'mimc_tester', {
      argsObj: SalvoArgs['obj']['mimc_tester()byte[]']
      argsTuple: SalvoArgs['tuple']['mimc_tester()byte[]']
      returns: SalvoReturns['mimc_tester()byte[]']
    }>
    & Record<'update()void' | 'update', {
      argsObj: SalvoArgs['obj']['update()void']
      argsTuple: SalvoArgs['tuple']['update()void']
      returns: SalvoReturns['update()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        boxUserRegistry: Map<string, UserRegistry>
        boxGameGrid: Map<bigint | number, [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]>
        boxGameState: Map<bigint | number, GameState>
        boxGameLobby: Map<bigint | number, Uint8Array>
        boxGameCharacter: Map<string, GameCharacter>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SalvoSignatures = keyof SalvoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SalvoNonVoidMethodSignatures = keyof SalvoTypes['methods'] extends infer T ? T extends keyof SalvoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Salvo smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SalvoSignatures> = SalvoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Salvo smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SalvoSignatures> = SalvoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SalvoTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = SalvoTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SalvoCreateCallParams =
  | Expand<CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & {method: 'generate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & {method: 'generate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type SalvoUpdateCallParams =
  | Expand<CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & {method: 'update'}>
  | Expand<CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & {method: 'update()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type SalvoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SalvoCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: SalvoUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Salvo smart contract
 */
export abstract class SalvoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends SalvoCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'generate':
          case 'generate()void':
            return SalvoParamsFactory.create.generate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Salvo smart contract using the generate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      generate(params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'generate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends SalvoUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update':
          case 'update()void':
            return SalvoParamsFactory.update.update(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the Salvo smart contract using the update()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      update(params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the calc_single_box_cost(uint8,uint16)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calcSingleBoxCost(params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calc_single_box_cost(uint8,uint16)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.keySize, params.args.valueSize],
    }
  }
  /**
   * Constructs a no op call for the read_gen_unix()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGenUnix(params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_gen_unix()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the read_grid_cell_value_by_index(uint64,uint8)uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGridCellValueByIndex(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_grid_cell_value_by_index(uint64,uint8)uint8' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.i],
    }
  }
  /**
   * Constructs a no op call for the read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGridCellValueAtCoords(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.x, params.args.y],
    }
  }
  /**
   * Constructs a no op call for the does_box_user_registry_exist(account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxUserRegistryExist(params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_user_registry_exist(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_grid_exist(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameGridExist(params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_grid_exist(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_state_exist(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameStateExist(params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_state_exist(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_character_exist(account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameCharacterExist(params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_character_exist(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the read_box_game_lobby(uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBoxGameLobby(params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_box_game_lobby(uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the get_box_user_registry(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxUserRegistry(params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_box_user_registry(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxRPay],
    }
  }
  /**
   * Constructs a no op call for the new_game(pay,pay,pay,pay,pay,uint8)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static newGame(params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'new_game(pay,pay,pay,pay,pay,uint8)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxGPay, params.args.boxSPay, params.args.boxCPay, params.args.boxLPay, params.args.stakePay, params.args.lobbySize],
    }
  }
  /**
   * Constructs a no op call for the commit_turn(uint64,uint256)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static commitTurn(params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'commit_turn(uint64,uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.turnHash],
    }
  }
  /**
   * Constructs a no op call for the mimc_tester()byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mimcTester(params: CallParams<SalvoArgs['obj']['mimc_tester()byte[]'] | SalvoArgs['tuple']['mimc_tester()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mimc_tester()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Salvo smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SalvoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SalvoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SalvoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SalvoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Salvo smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SalvoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? SalvoParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (SalvoCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? SalvoParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (SalvoUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new SalvoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Salvo smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      generate: (params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(SalvoParamsFactory.create.generate(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the Salvo smart contract using the update()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(SalvoParamsFactory.update.update(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Salvo smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      generate: (params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(SalvoParamsFactory.create.generate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Salvo smart contract using an ABI method call using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      generate: async (params: CallParams<SalvoArgs['obj']['generate()void'] | SalvoArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(SalvoParamsFactory.create.generate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | SalvoReturns['generate()void']) }, appClient: new SalvoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Salvo smart contract
 */
export class SalvoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SalvoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Salvo app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SalvoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SalvoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SalvoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SalvoClient> {
    return new SalvoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SalvoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SalvoClient> {
    return new SalvoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Salvo smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(SalvoParamsFactory.update.update(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Salvo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calcSingleBoxCost: (params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGenUnix: (params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SalvoParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGridCellValueByIndex: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.readGridCellValueByIndex(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGridCellValueAtCoords: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxUserRegistryExist: (params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameGridExist: (params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxGameGridExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameStateExist: (params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxGameStateExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameCharacterExist: (params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readBoxGameLobby: (params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.readBoxGameLobby(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `get_box_user_registry(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxUserRegistry: (params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.getBoxUserRegistry(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `new_game(pay,pay,pay,pay,pay,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    newGame: (params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `commit_turn(uint64,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    commitTurn: (params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SalvoParamsFactory.commitTurn(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `mimc_tester()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mimcTester: (params: CallParams<SalvoArgs['obj']['mimc_tester()byte[]'] | SalvoArgs['tuple']['mimc_tester()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SalvoParamsFactory.mimcTester(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Salvo smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(SalvoParamsFactory.update.update(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Salvo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calcSingleBoxCost: (params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGenUnix: (params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGridCellValueByIndex: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readGridCellValueByIndex(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGridCellValueAtCoords: (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxUserRegistryExist: (params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameGridExist: (params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxGameGridExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameStateExist: (params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxGameStateExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameCharacterExist: (params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readBoxGameLobby: (params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.readBoxGameLobby(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `get_box_user_registry(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxUserRegistry: (params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.getBoxUserRegistry(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `new_game(pay,pay,pay,pay,pay,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    newGame: (params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `commit_turn(uint64,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    commitTurn: (params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.commitTurn(params))
    },

    /**
     * Makes a call to the Salvo smart contract using the `mimc_tester()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mimcTester: (params: CallParams<SalvoArgs['obj']['mimc_tester()byte[]'] | SalvoArgs['tuple']['mimc_tester()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SalvoParamsFactory.mimcTester(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Salvo smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      update: async (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(SalvoParamsFactory.update.update(params))
        return {...result, return: result.return as unknown as (undefined | SalvoReturns['update()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Salvo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calcSingleBoxCost: async (params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.calcSingleBoxCost(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['calc_single_box_cost(uint8,uint16)uint64'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGenUnix: async (params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readGenUnix(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_gen_unix()uint64'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGridCellValueByIndex: async (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueByIndex(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGridCellValueAtCoords: async (params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxUserRegistryExist: async (params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_user_registry_exist(account)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameGridExist: async (params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameGridExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_game_grid_exist(uint64)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameStateExist: async (params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameStateExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_game_state_exist(uint64)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameCharacterExist: async (params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['does_box_game_character_exist(account)bool'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readBoxGameLobby: async (params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.readBoxGameLobby(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['read_box_game_lobby(uint64)address[]'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `get_box_user_registry(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxUserRegistry: async (params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.getBoxUserRegistry(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['get_box_user_registry(pay)void'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `new_game(pay,pay,pay,pay,pay,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    newGame: async (params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.newGame(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['new_game(pay,pay,pay,pay,pay,uint8)void'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `commit_turn(uint64,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    commitTurn: async (params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.commitTurn(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['commit_turn(uint64,uint256)void'])}
    },

    /**
     * Makes a call to the Salvo smart contract using the `mimc_tester()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mimcTester: async (params: CallParams<SalvoArgs['obj']['mimc_tester()byte[]'] | SalvoArgs['tuple']['mimc_tester()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SalvoParamsFactory.mimcTester(params))
      return {...result, return: result.return as unknown as (undefined | SalvoReturns['mimc_tester()byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SalvoClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calcSingleBoxCost(params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.calcSingleBoxCost(params))
    return result.return as unknown as SalvoReturns['calc_single_box_cost(uint8,uint16)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_gen_unix()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGenUnix(params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readGenUnix(params))
    return result.return as unknown as SalvoReturns['read_gen_unix()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_grid_cell_value_by_index(uint64,uint8)uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGridCellValueByIndex(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueByIndex(params))
    return result.return as unknown as SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGridCellValueAtCoords(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readGridCellValueAtCoords(params))
    return result.return as unknown as SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_user_registry_exist(account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxUserRegistryExist(params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxUserRegistryExist(params))
    return result.return as unknown as SalvoReturns['does_box_user_registry_exist(account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_game_grid_exist(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameGridExist(params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameGridExist(params))
    return result.return as unknown as SalvoReturns['does_box_game_grid_exist(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameStateExist(params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameStateExist(params))
    return result.return as unknown as SalvoReturns['does_box_game_state_exist(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `does_box_game_character_exist(account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameCharacterExist(params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.doesBoxGameCharacterExist(params))
    return result.return as unknown as SalvoReturns['does_box_game_character_exist(account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Salvo smart contract using the `read_box_game_lobby(uint64)address[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readBoxGameLobby(params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']>) {
    const result = await this.appClient.send.call(SalvoParamsFactory.readBoxGameLobby(params))
    return result.return as unknown as SalvoReturns['read_box_game_lobby(uint64)address[]']
  }

  /**
   * Methods to access state for the current Salvo app
   */
  state = {
    /**
     * Methods to access global state for the current Salvo app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameId: result.game_id,
        }
      },
      /**
       * Get the current value of the game_id key in global state
       */
      gameId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("game_id")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Salvo app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the box_user_registry map in box state
       */
      boxUserRegistry: {
        /**
         * Get all current values of the box_user_registry map in box state
         */
        getMap: async (): Promise<Map<string, UserRegistry>> => { return (await this.appClient.state.box.getMap("box_user_registry")) as Map<string, UserRegistry> },
        /**
         * Get a current value of the box_user_registry map by key from box state
         */
        value: async (key: string): Promise<UserRegistry | undefined> => { return await this.appClient.state.box.getMapValue("box_user_registry", key) as UserRegistry | undefined },
      },
      /**
       * Get values from the box_game_grid map in box state
       */
      boxGameGrid: {
        /**
         * Get all current values of the box_game_grid map in box state
         */
        getMap: async (): Promise<Map<bigint, [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]>> => { return (await this.appClient.state.box.getMap("box_game_grid")) as Map<bigint, [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]> },
        /**
         * Get a current value of the box_game_grid map by key from box state
         */
        value: async (key: bigint | number): Promise<[number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] | undefined> => { return await this.appClient.state.box.getMapValue("box_game_grid", key) as [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] | undefined },
      },
      /**
       * Get values from the box_game_state map in box state
       */
      boxGameState: {
        /**
         * Get all current values of the box_game_state map in box state
         */
        getMap: async (): Promise<Map<bigint, GameState>> => { return (await this.appClient.state.box.getMap("box_game_state")) as Map<bigint, GameState> },
        /**
         * Get a current value of the box_game_state map by key from box state
         */
        value: async (key: bigint | number): Promise<GameState | undefined> => { return await this.appClient.state.box.getMapValue("box_game_state", key) as GameState | undefined },
      },
      /**
       * Get values from the box_game_lobby map in box state
       */
      boxGameLobby: {
        /**
         * Get all current values of the box_game_lobby map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("box_game_lobby")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the box_game_lobby map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("box_game_lobby", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the box_game_character map in box state
       */
      boxGameCharacter: {
        /**
         * Get all current values of the box_game_character map in box state
         */
        getMap: async (): Promise<Map<string, GameCharacter>> => { return (await this.appClient.state.box.getMap("box_game_character")) as Map<string, GameCharacter> },
        /**
         * Get a current value of the box_game_character map by key from box state
         */
        value: async (key: string): Promise<GameCharacter | undefined> => { return await this.appClient.state.box.getMapValue("box_game_character", key) as GameCharacter | undefined },
      },
    },
  }

  public newGroup(): SalvoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a calc_single_box_cost(uint8,uint16)uint64 method call against the Salvo contract
       */
      calcSingleBoxCost(params: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calcSingleBoxCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('calc_single_box_cost(uint8,uint16)uint64', v))
        return this
      },
      /**
       * Add a read_gen_unix()uint64 method call against the Salvo contract
       */
      readGenUnix(params: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGenUnix(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_gen_unix()uint64', v))
        return this
      },
      /**
       * Add a read_grid_cell_value_by_index(uint64,uint8)uint8 method call against the Salvo contract
       */
      readGridCellValueByIndex(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGridCellValueByIndex(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_grid_cell_value_by_index(uint64,uint8)uint8', v))
        return this
      },
      /**
       * Add a read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 method call against the Salvo contract
       */
      readGridCellValueAtCoords(params: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGridCellValueAtCoords(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8', v))
        return this
      },
      /**
       * Add a does_box_user_registry_exist(account)bool method call against the Salvo contract
       */
      doesBoxUserRegistryExist(params: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxUserRegistryExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_user_registry_exist(account)bool', v))
        return this
      },
      /**
       * Add a does_box_game_grid_exist(uint64)bool method call against the Salvo contract
       */
      doesBoxGameGridExist(params: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameGridExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_grid_exist(uint64)bool', v))
        return this
      },
      /**
       * Add a does_box_game_state_exist(uint64)bool method call against the Salvo contract
       */
      doesBoxGameStateExist(params: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameStateExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_state_exist(uint64)bool', v))
        return this
      },
      /**
       * Add a does_box_game_character_exist(account)bool method call against the Salvo contract
       */
      doesBoxGameCharacterExist(params: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameCharacterExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_character_exist(account)bool', v))
        return this
      },
      /**
       * Add a read_box_game_lobby(uint64)address[] method call against the Salvo contract
       */
      readBoxGameLobby(params: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBoxGameLobby(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_box_game_lobby(uint64)address[]', v))
        return this
      },
      /**
       * Add a get_box_user_registry(pay)void method call against the Salvo contract
       */
      getBoxUserRegistry(params: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxUserRegistry(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a new_game(pay,pay,pay,pay,pay,uint8)void method call against the Salvo contract
       */
      newGame(params: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.newGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a commit_turn(uint64,uint256)void method call against the Salvo contract
       */
      commitTurn(params: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.commitTurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mimc_tester()byte[] method call against the Salvo contract
       */
      mimcTester(params: CallParams<SalvoArgs['obj']['mimc_tester()byte[]'] | SalvoArgs['tuple']['mimc_tester()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mimcTester(params)))
        resultMappers.push((v) => client.decodeReturnValue('mimc_tester()byte[]', v))
        return this
      },
      get update() {
        return {
          update: (params: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.update(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Salvo contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SalvoComposer
  }
}
export type SalvoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the calc_single_box_cost(uint8,uint16)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calcSingleBoxCost(params?: CallParams<SalvoArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | SalvoArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>): SalvoComposer<[...TReturns, SalvoReturns['calc_single_box_cost(uint8,uint16)uint64'] | undefined]>

  /**
   * Calls the read_gen_unix()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGenUnix(params?: CallParams<SalvoArgs['obj']['read_gen_unix()uint64'] | SalvoArgs['tuple']['read_gen_unix()uint64']>): SalvoComposer<[...TReturns, SalvoReturns['read_gen_unix()uint64'] | undefined]>

  /**
   * Calls the read_grid_cell_value_by_index(uint64,uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGridCellValueByIndex(params?: CallParams<SalvoArgs['obj']['read_grid_cell_value_by_index(uint64,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_by_index(uint64,uint8)uint8']>): SalvoComposer<[...TReturns, SalvoReturns['read_grid_cell_value_by_index(uint64,uint8)uint8'] | undefined]>

  /**
   * Calls the read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGridCellValueAtCoords(params?: CallParams<SalvoArgs['obj']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | SalvoArgs['tuple']['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8']>): SalvoComposer<[...TReturns, SalvoReturns['read_grid_cell_value_at_coords(uint64,uint8,uint8)uint8'] | undefined]>

  /**
   * Calls the does_box_user_registry_exist(account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxUserRegistryExist(params?: CallParams<SalvoArgs['obj']['does_box_user_registry_exist(account)bool'] | SalvoArgs['tuple']['does_box_user_registry_exist(account)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_user_registry_exist(account)bool'] | undefined]>

  /**
   * Calls the does_box_game_grid_exist(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameGridExist(params?: CallParams<SalvoArgs['obj']['does_box_game_grid_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_grid_exist(uint64)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_game_grid_exist(uint64)bool'] | undefined]>

  /**
   * Calls the does_box_game_state_exist(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameStateExist(params?: CallParams<SalvoArgs['obj']['does_box_game_state_exist(uint64)bool'] | SalvoArgs['tuple']['does_box_game_state_exist(uint64)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_game_state_exist(uint64)bool'] | undefined]>

  /**
   * Calls the does_box_game_character_exist(account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameCharacterExist(params?: CallParams<SalvoArgs['obj']['does_box_game_character_exist(account)bool'] | SalvoArgs['tuple']['does_box_game_character_exist(account)bool']>): SalvoComposer<[...TReturns, SalvoReturns['does_box_game_character_exist(account)bool'] | undefined]>

  /**
   * Calls the read_box_game_lobby(uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxGameLobby(params?: CallParams<SalvoArgs['obj']['read_box_game_lobby(uint64)address[]'] | SalvoArgs['tuple']['read_box_game_lobby(uint64)address[]']>): SalvoComposer<[...TReturns, SalvoReturns['read_box_game_lobby(uint64)address[]'] | undefined]>

  /**
   * Calls the get_box_user_registry(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxUserRegistry(params?: CallParams<SalvoArgs['obj']['get_box_user_registry(pay)void'] | SalvoArgs['tuple']['get_box_user_registry(pay)void']>): SalvoComposer<[...TReturns, SalvoReturns['get_box_user_registry(pay)void'] | undefined]>

  /**
   * Calls the new_game(pay,pay,pay,pay,pay,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newGame(params?: CallParams<SalvoArgs['obj']['new_game(pay,pay,pay,pay,pay,uint8)void'] | SalvoArgs['tuple']['new_game(pay,pay,pay,pay,pay,uint8)void']>): SalvoComposer<[...TReturns, SalvoReturns['new_game(pay,pay,pay,pay,pay,uint8)void'] | undefined]>

  /**
   * Calls the commit_turn(uint64,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  commitTurn(params?: CallParams<SalvoArgs['obj']['commit_turn(uint64,uint256)void'] | SalvoArgs['tuple']['commit_turn(uint64,uint256)void']>): SalvoComposer<[...TReturns, SalvoReturns['commit_turn(uint64,uint256)void'] | undefined]>

  /**
   * Calls the mimc_tester()byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mimcTester(params?: CallParams<SalvoArgs['obj']['mimc_tester()byte[]'] | SalvoArgs['tuple']['mimc_tester()byte[]']>): SalvoComposer<[...TReturns, SalvoReturns['mimc_tester()byte[]'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Salvo smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(params?: CallParams<SalvoArgs['obj']['update()void'] | SalvoArgs['tuple']['update()void']>): SalvoComposer<[...TReturns, SalvoReturns['update()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Salvo smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SalvoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SalvoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SalvoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SalvoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SalvoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SalvoComposerResults<TReturns>>
}
export type SalvoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

