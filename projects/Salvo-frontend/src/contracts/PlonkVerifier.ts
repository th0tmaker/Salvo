/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PlonkVerifier","structs":{"LagrangeWitness":[{"name":"l","type":"uint256[]"},{"name":"xin","type":"uint256"},{"name":"zh","type":"uint256"}],"Proof":[{"name":"a","type":"byte[96]"},{"name":"b","type":"byte[96]"},{"name":"c","type":"byte[96]"},{"name":"z","type":"byte[96]"},{"name":"t1","type":"byte[96]"},{"name":"t2","type":"byte[96]"},{"name":"t3","type":"byte[96]"},{"name":"wxi","type":"byte[96]"},{"name":"wxiw","type":"byte[96]"},{"name":"evalA","type":"uint256"},{"name":"evalB","type":"uint256"},{"name":"evalC","type":"uint256"},{"name":"evalS1","type":"uint256"},{"name":"evalS2","type":"uint256"},{"name":"evalZw","type":"uint256"}],"VerificationKey":[{"name":"qm","type":"byte[96]"},{"name":"ql","type":"byte[96]"},{"name":"qr","type":"byte[96]"},{"name":"qo","type":"byte[96]"},{"name":"qc","type":"byte[96]"},{"name":"s1","type":"byte[96]"},{"name":"s2","type":"byte[96]"},{"name":"s3","type":"byte[96]"},{"name":"power","type":"uint64"},{"name":"nPublic","type":"uint64"},{"name":"k1","type":"uint64"},{"name":"k2","type":"uint64"},{"name":"x_2","type":"byte[192]"}]},"methods":[{"name":"_dummy","args":[{"type":"(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192])","struct":"VerificationKey","name":"_vk"}],"returns":{"type":"void"},"actions":{"create":[],"call":["CloseOut"]},"readonly":false,"desc":"Dummy function that only exists so we can have the VerificationKey type in the generated client","events":[],"recommendations":{}},{"name":"verify","args":[{"type":"uint256[]","name":"signals"},{"type":"(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)","struct":"Proof","name":"proof"},{"type":"(uint256[],uint256,uint256)","struct":"LagrangeWitness","name":"lw"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[496],"errorMessage":"A not in G1"},{"pc":[507],"errorMessage":"B not in G1"},{"pc":[518],"errorMessage":"C not in G1"},{"pc":[682],"errorMessage":"Invalid number of public inputs"},{"pc":[443],"errorMessage":"Length must be 192"},{"pc":[107],"errorMessage":"Length must be 32"},{"pc":[170,194,218,242,266,290,314,338,1830,2028,2039,2049,2078,2087,2097,2104,2113],"errorMessage":"Length must be 96"},{"pc":[53],"errorMessage":"OnCompletion is not CloseOut"},{"pc":[30],"errorMessage":"OnCompletion is not NoOp"},{"pc":[542],"errorMessage":"T1 not in G1"},{"pc":[554],"errorMessage":"T2 not in G1"},{"pc":[566],"errorMessage":"T3 not in G1"},{"pc":[2320],"errorMessage":"Verification failed"},{"pc":[578],"errorMessage":"Wxi not in G1"},{"pc":[590],"errorMessage":"Wxiw not in G1"},{"pc":[530],"errorMessage":"Z not in G1"},{"pc":[67],"errorMessage":"can only call when creating"},{"pc":[33,56],"errorMessage":"can only call when not creating"},{"pc":[603],"errorMessage":"eval_a not in Fr"},{"pc":[616],"errorMessage":"eval_b not in Fr"},{"pc":[629],"errorMessage":"eval_c not in Fr"},{"pc":[642],"errorMessage":"eval_s1 not in Fr"},{"pc":[654],"errorMessage":"eval_s2 not in Fr"},{"pc":[667],"errorMessage":"eval_zw not in Fr"},{"pc":[705,809,899,928,931,950,1117,1274,1292,1777,1787,1796,1805,1814],"errorMessage":"index access is out of bounds"},{"pc":[1231],"errorMessage":"invalid xi (equals 1)"},{"pc":[1226],"errorMessage":"lw.L length too short"},{"pc":[1120],"errorMessage":"lw.L not in Fr"},{"pc":[1200],"errorMessage":"lw.xin != xi^n"},{"pc":[1063],"errorMessage":"lw.xin not in Fr"},{"pc":[1214],"errorMessage":"lw.zh != xi^n - 1"},{"pc":[1074],"errorMessage":"lw.zh not in Fr"},{"pc":[97,121,941,1185,1209,1313,1476],"errorMessage":"overflow"},{"pc":[708],"errorMessage":"public signal not in Fr"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAQIGABAIADwAGgAuADwASgBYAGiAaQBpgGoAbgByYGIHPtp1MpnX1IMznYCAmh2AVTvaQC//5b/v////8AAAABAAEBIHPtp1MpnX1IMznYCAmh2AVTvaQC//5b/v////8AAAAAAAAxG0EANoICBJXBDOQEC6l5YTYaAI4CABYAAQAxGRREMRhENhoBNhoCNhoDiABQJEMxGYECEkQxGEQkQzEZQP/aMRgURCRDigIBi/4oqov/KKpMKKBMoSiqiYoBAYv/FSIORCKvi/+rSRUiEkSJigEBi/8CKKpJFSIORCKvq4mKAwAlRxEpRwInBEkVJUsBDyVLAk8CTSNLAg8jSwNPAk1LA08CSwJSSRUjEkQhBUsDDyEFSwRPAk1LBE8DSwJSSRUjEkQhBksEDyEGSwVPAk1LBU8DSwJSSRUjEkQhBEsFDyEESwZPAk1LBk8DSwJSSRUjEkQhB0sGDyEHSwdPAk1LB08DSwJSSRUjEkQhCEsHDyEISwhPAk1LCE8DSwJSSRUjEkQhCUsIDyEJSwlPAk1LCU8DSwJSSRUjEkQhCksJDyEKSwpPAk1LCk8DSwJSSRUjEkQhC0sKDyELSwtPAk1LC08DSwJSFyEMSwsPIQxLDE8CTUsMTwNLAlIXIQ1LDA8hDUsNTwJNSw1PA0sCUhchDksNDyEOSw5PAk1LDk8DSwJSFyEPSw4PIQ9PD08CTU8OTwNPAlJJFSEFEkRPDE8MUE8LUE8KUE8JUE8IUE8HUE8GUE8FFlBPBBZQTwMWUE8CFlBMUEmL/lcAYElOAuQCRIv+V2BgSU4C5AJEi/5XwGBJTgLkAkSL/iEGI1hJTgLkAkSL/iEEI1hJTgLkAkSL/iEHI1hJTgLkAkSL/iEII1hJTgLkAkSL/iEJI1hJTgLkAkSL/iEKI1hJTgLkAkSL/oHgBiJYSU4CKKREi/6BgAciWElOAiikRIv+gaAHIlhJTgIopESL/oHAByJYSU4CKKREi/4hDyJYSU4CKKREi/6BgAgiWElOAiikRIv9JVlJTwIhC1tJTgISRCWLJ4slDEEAGIv9VwIAiydJTgIiCyJYKKREJAiMJ0L/4IsVSVcAYEsBV2BgUEsBV8BgUEsBIQYjWFBJjAlLASEEI1hJjAJQSwEhByNYSYwDUEsBIQgjWEmMBFBMIQkjWEmMBVCMCyWMJ4sniyUMQQAgi/1XAgCLJ0lOAiILIlgoqoj9KosLTFCMCyQIjCdC/9iLC4sWUIsXUIsYUIj9I0mI/R9QSYwLixlQiP0VSYwGixpQixtQixxQiP0GSYwPix9QiyBQiyFQiyJQiyNQiyRQIQWvTIj86lwgjAyBAowTixOBBgxBAC2LE0kkCSILiwxJTwIiWEsBVyAgoyiqSRUiDkQir6tLAiILTF2MDCQIjBNC/8uLHYseUEmMCoj8oosLiwZQiw9QiwxQTFCAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQjAeL/1cCIEmMDSikRIv/VyIgSYwOKKREJYwTi/8lWYv/FYv/TgJSSYwAJVlJjBKLEw1BABiLAFcCAIsTSU4CIgsiWCikRCQIjBNC/84kjBSLB1dgIEmMECWME4wRixUhCluLEw1BABiLEUmjKKqMEYsUgQILjBSLEyQIjBNC/92LEUkVIg5EIq9JjAFMSwGriw1LAahEKoj7kUkVIg5Eq4sOqESLJkAETiQkCIsSDkSLECqpRIsHgeACiw1dIQSLDl2MBymMCCWME4sTiyUMQQAui/1XAgCLE0lOAiILIlgoqkwkCEmME4sAVwIATCILIlijKKqLCEyI+zCMCEL/yosISRUiDkSLAUlOAquLAFciIIsHSU4CV0AgSUsBoyiqTwKjKKpLAlcAIEmLIklOCKMoqosfSU4HKKpMKKpLAaAoqksFVyAgTCiqTCiqTEsBoCiqSwOLI0lODKMoqosgSU4EKKpMKKpLAaAoqiiqSwOgKKqLIUlODiiqSUsFoCiqTwRPA6MoqklPAqMoqoskSU4OoyiqSwmjKKpPC0sJiPqKTIj6hkkVIg5ETw2riwmLGlCLG1CLHFCLAlBLDEsHoyiqSwwhBCJYKUsBiPpdSw6B4AIiWElLA6MoqilMiPpLSwFPAqMoqk8DoyiqKUyI+jpLD1dgIEsNSwGjKKpJKKpPDqAoqiiqSwygKKqLFUlOAyEMgQhYSwKjKKooqk8NoCiqKKpLDaAoqksDIQ2BCFhPA6MoqiiqTwygKKooqk8MoCiqTgKjKKqjKKpLDaMoqiiqTwwoqqAoqksNgcACIlhMKKpLASiqoCiqTw1PDaMoqksPoyiqTwujKKpPCYsZUIsFUIsWUIsXUIsYUIsDUIsEUE8JiPmnSw2I+aJQSwuI+ZxQSw+I+ZZQTwmI+ZBQTwiI+YpQTweI+YRQKoj5f1BPA4j5eVApTwOI+V+I+W9QTwdXgMBJVyAgTwJLAVBLAldAIExLAVBLA1dgIExLAVBLBFeAIExLAVBPBVegIExLAVBPBkzjAkkVIxJETwVPC6Moqk8JiPkTTwVPCaMoqkwoqkwoqqAoqk8ETwmjKKpMKKpMKKqgKKpPA08JoyiqTCiqTCiqoCiqTwJPB6MoqkwoqkwoqqAoqksCTwajKKpMKKpMKKqgKKqAYBfx06cxl9eUJpVjjE+prA/DaIxPl3S5BaFOOj8XG6xYbFXoP/l6Gu/7OvAK2yLGuwiz9IHjqqDxoJ4w7XQdiuT89eCV1dAK9gDbGMssBLPt0DzHRKKIiuQMqiMpRsXn4UzhAkkVIxJEix5LA+ECSRUjEkSLHUzgAkkVIxJETwNLBaMoqicFoyiqiPhITwVMUIsKTOMCSRUjEkRPA+ACSRUjEkRPAivhAkkVIxJE4AJJFSMSREwr4QJJFSMSRExQTCEOIQVYgMABAkqisvCPCpEmCAUnLcUQUcbketT6QDsCtFELZHrj0XcLrAMmqAW779SAVsjBIb24E+ArYFJxn2B9rNOgiCdPZVlr0NCZILYatdphu9x/UEkzTPESE5RdV+WsfQVdBCt+DOXVJ3J9bhGMyc3G2i41Gq39m6qMvdOnbUKaaVFg0SySOsnMO6yiieGTVIYIuCgBBgbEoC6nNMwyrNKwK8KLmcs+KH6Fp2OvJnSSq1cumas/Nw0nXOwdoaqpB1/wX3m+UOICRImLJkL7rg==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":0,"patch":0}},"events":[],"templateVariables":{"VERIFICATION_KEY":{"type":"AVMBytes"},"ROOT_OF_UNITY":{"type":"AVMBytes"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type LagrangeWitness = {
  l: bigint[],
  xin: bigint,
  zh: bigint
}


/**
 * Converts the ABI tuple representation of a LagrangeWitness to the struct representation
 */
export function LagrangeWitnessFromTuple(abiTuple: [bigint[], bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.LagrangeWitness, APP_SPEC.structs) as LagrangeWitness
}

export type Proof = {
  a: Uint8Array,
  b: Uint8Array,
  c: Uint8Array,
  z: Uint8Array,
  t1: Uint8Array,
  t2: Uint8Array,
  t3: Uint8Array,
  wxi: Uint8Array,
  wxiw: Uint8Array,
  evalA: bigint,
  evalB: bigint,
  evalC: bigint,
  evalS1: bigint,
  evalS2: bigint,
  evalZw: bigint
}


/**
 * Converts the ABI tuple representation of a Proof to the struct representation
 */
export function ProofFromTuple(abiTuple: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Proof, APP_SPEC.structs) as Proof
}

export type VerificationKey = {
  qm: Uint8Array,
  ql: Uint8Array,
  qr: Uint8Array,
  qo: Uint8Array,
  qc: Uint8Array,
  s1: Uint8Array,
  s2: Uint8Array,
  s3: Uint8Array,
  power: bigint,
  nPublic: bigint,
  k1: bigint,
  k2: bigint,
  x_2: Uint8Array
}


/**
 * Converts the ABI tuple representation of a VerificationKey to the struct representation
 */
export function VerificationKeyFromTuple(abiTuple: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VerificationKey, APP_SPEC.structs) as VerificationKey
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  VERIFICATION_KEY: Uint8Array,
  ROOT_OF_UNITY: Uint8Array,
}

/**
 * The argument types for the PlonkVerifier contract
 */
export type PlonkVerifierArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void': {
      _vk: VerificationKey
    }
    'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void': {
      signals: bigint[] | number[]
      proof: Proof
      lw: LagrangeWitness
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void': [_vk: VerificationKey]
    'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void': [signals: bigint[] | number[], proof: Proof, lw: LagrangeWitness]
  }
}

/**
 * The return type for each method
 */
export type PlonkVerifierReturns = {
  '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void': void
  'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void': void
}

/**
 * Defines the types of available calls and state of the PlonkVerifier smart contract.
 */
export type PlonkVerifierTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void' | '_dummy', {
      argsObj: PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']
      argsTuple: PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']
      returns: PlonkVerifierReturns['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']
    }>
    & Record<'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void' | 'verify', {
      argsObj: PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']
      argsTuple: PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']
      returns: PlonkVerifierReturns['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PlonkVerifierSignatures = keyof PlonkVerifierTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PlonkVerifierNonVoidMethodSignatures = keyof PlonkVerifierTypes['methods'] extends infer T ? T extends keyof PlonkVerifierTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PlonkVerifier smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PlonkVerifierSignatures> = PlonkVerifierTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PlonkVerifier smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PlonkVerifierSignatures> = PlonkVerifierTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PlonkVerifierCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PlonkVerifierDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PlonkVerifierCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PlonkVerifier smart contract
 */
export abstract class PlonkVerifierParamsFactory {
  /**
   * Gets available closeOut ABI call param factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs close out ABI call params for the PlonkVerifier smart contract using the _dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      _dummy(params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args._vk],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verify(params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signals, params.args.proof, params.args.lw],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PlonkVerifier smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PlonkVerifierFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PlonkVerifierFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PlonkVerifierClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PlonkVerifierClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PlonkVerifier smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PlonkVerifierDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PlonkVerifierClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PlonkVerifier smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PlonkVerifier smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PlonkVerifier smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PlonkVerifierClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PlonkVerifier smart contract
 */
export class PlonkVerifierClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PlonkVerifierClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PlonkVerifier app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PlonkVerifierClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PlonkVerifierNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PlonkVerifierClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PlonkVerifierClient> {
    return new PlonkVerifierClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PlonkVerifierClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PlonkVerifierClient> {
    return new PlonkVerifierClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the `_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void` ABI method.
       *
       * Dummy function that only exists so we can have the VerificationKey type in the generated client
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      _dummy: (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>) => {
        return this.appClient.params.closeOut(PlonkVerifierParamsFactory.closeOut._dummy(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PlonkVerifier smart contract using the `verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verify: (params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PlonkVerifierParamsFactory.verify(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the `_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void` ABI method.
       *
       * Dummy function that only exists so we can have the VerificationKey type in the generated client
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      _dummy: (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>) => {
        return this.appClient.createTransaction.closeOut(PlonkVerifierParamsFactory.closeOut._dummy(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PlonkVerifier smart contract using the `verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verify: (params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PlonkVerifierParamsFactory.verify(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the `_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void` ABI method.
       *
       * Dummy function that only exists so we can have the VerificationKey type in the generated client
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      _dummy: async (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']> & SendParams) => {
        const result = await this.appClient.send.closeOut(PlonkVerifierParamsFactory.closeOut._dummy(params))
        return {...result, return: result.return as unknown as (undefined | PlonkVerifierReturns['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PlonkVerifier smart contract using the `verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verify: async (params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PlonkVerifierParamsFactory.verify(params))
      return {...result, return: result.return as unknown as (undefined | PlonkVerifierReturns['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PlonkVerifierClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PlonkVerifier app
   */
  state = {
  }

  public newGroup(): PlonkVerifierComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void method call against the PlonkVerifier contract
       */
      verify(params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verify(params)))
        resultMappers.push(undefined)
        return this
      },
      get closeOut() {
        return {
          _dummy: (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut._dummy(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the PlonkVerifier contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PlonkVerifierComposer
  }
}
export type PlonkVerifierComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verify(params?: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void']>): PlonkVerifierComposer<[...TReturns, PlonkVerifierReturns['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256),(uint256[],uint256,uint256))void'] | undefined]>

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the _dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    _dummy(params?: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>): PlonkVerifierComposer<[...TReturns, PlonkVerifierReturns['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PlonkVerifierComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PlonkVerifierComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PlonkVerifierComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PlonkVerifierComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PlonkVerifierComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PlonkVerifierComposerResults<TReturns>>
}
export type PlonkVerifierComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

